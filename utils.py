"""
Utility functions for PDF/Image to LaTeX converter
"""

import re
import base64
from typing import List, Tuple, Optional
import streamlit as st
from PIL import Image
import io
import time

def clean_latex_content(latex_text: str) -> str:
    """
    L√†m s·∫°ch v√† chu·∫©n h√≥a n·ªôi dung LaTeX
    """
    if not latex_text:
        return ""
    
    # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng mong mu·ªën
    cleaned = latex_text.strip()
    
    # Chu·∫©n h√≥a c√°c c√¥ng th·ª©c LaTeX
    # Thay th·∫ø c√°c pattern kh√¥ng ƒë√∫ng format
    cleaned = re.sub(r'\$\s*\$', '', cleaned)  # Lo·∫°i b·ªè $$ r·ªóng
    cleaned = re.sub(r'\$\$\s*\$\$', '', cleaned)  # Lo·∫°i b·ªè $$$$ r·ªóng
    
    # ƒê·∫£m b·∫£o c√≥ kho·∫£ng tr·∫Øng sau d·∫•u ch·∫•m c√¢u
    cleaned = re.sub(r'\.(?=[a-zA-Z])', '. ', cleaned)
    
    # Chu·∫©n h√≥a line breaks
    cleaned = re.sub(r'\n\s*\n', '\n\n', cleaned)
    
    return cleaned

def validate_api_key(api_key: str) -> bool:
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa API key
    """
    if not api_key:
        return False
    
    # Ki·ªÉm tra ƒë·ªô d√†i t·ªëi thi·ªÉu (Gemini API key th∆∞·ªùng d√†i kho·∫£ng 39 k√Ω t·ª±)
    if len(api_key) < 20:
        return False
    
    # Ki·ªÉm tra format c∆° b·∫£n (ch·ªâ ch·ª©a k√Ω t·ª± alphanum v√† d·∫•u g·∫°ch ngang, underscore)
    if not re.match(r'^[A-Za-z0-9_-]+$', api_key):
        return False
    
    return True

def format_file_size(size_bytes: int) -> str:
    """
    Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc file sang ƒë·ªãnh d·∫°ng human-readable
    """
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"

def validate_image_file(uploaded_file) -> Tuple[bool, str]:
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file ·∫£nh
    """
    if not uploaded_file:
        return False, "Kh√¥ng c√≥ file ƒë∆∞·ª£c upload"
    
    # Ki·ªÉm tra k√≠ch th∆∞·ªõc file (gi·ªõi h·∫°n 10MB)
    if uploaded_file.size > 10 * 1024 * 1024:
        return False, f"File qu√° l·ªõn: {format_file_size(uploaded_file.size)}. Gi·ªõi h·∫°n: 10MB"
    
    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    allowed_types = ['image/png', 'image/jpeg', 'image/jpg', 'image/bmp', 'image/tiff']
    if uploaded_file.type not in allowed_types:
        return False, f"ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {uploaded_file.type}"
    
    try:
        # Th·ª≠ m·ªü file ƒë·ªÉ ki·ªÉm tra t√≠nh h·ª£p l·ªá
        Image.open(uploaded_file)
        return True, "OK"
    except Exception as e:
        return False, f"File ·∫£nh b·ªã l·ªói: {str(e)}"

def validate_pdf_file(uploaded_file) -> Tuple[bool, str]:
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file PDF
    """
    if not uploaded_file:
        return False, "Kh√¥ng c√≥ file ƒë∆∞·ª£c upload"
    
    # Ki·ªÉm tra k√≠ch th∆∞·ªõc file (gi·ªõi h·∫°n 50MB)
    if uploaded_file.size > 50 * 1024 * 1024:
        return False, f"File qu√° l·ªõn: {format_file_size(uploaded_file.size)}. Gi·ªõi h·∫°n: 50MB"
    
    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    if uploaded_file.type != 'application/pdf':
        return False, f"Kh√¥ng ph·∫£i file PDF: {uploaded_file.type}"
    
    # Ki·ªÉm tra magic bytes c·ªßa PDF
    file_header = uploaded_file.read(4)
    uploaded_file.seek(0)  # Reset file pointer
    
    if file_header != b'%PDF':
        return False, "File kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng PDF h·ª£p l·ªá"
    
    return True, "OK"

def create_download_link(file_content: bytes, filename: str, mime_type: str) -> str:
    """
    T·∫°o link download cho file
    """
    b64_content = base64.b64encode(file_content).decode()
    return f'<a href="data:{mime_type};base64,{b64_content}" download="{filename}">üì• T·∫£i {filename}</a>'

def extract_latex_equations(text: str) -> List[str]:
    """
    Tr√≠ch xu·∫•t c√°c c√¥ng th·ª©c LaTeX t·ª´ text
    """
    # Pattern cho inline math: $...$
    inline_pattern = r'\$([^$]+)\$'
    
    # Pattern cho display math: $$...$$
    display_pattern = r'\$\$([^$]+)\$\$'
    
    inline_equations = re.findall(inline_pattern, text)
    display_equations = re.findall(display_pattern, text)
    
    all_equations = []
    all_equations.extend([f"${eq}$" for eq in inline_equations])
    all_equations.extend([f"$${eq}$$" for eq in display_equations])
    
    return all_equations

def count_math_content(text: str) -> dict:
    """
    ƒê·∫øm s·ªë l∆∞·ª£ng c√¥ng th·ª©c to√°n h·ªçc trong text
    """
    equations = extract_latex_equations(text)
    
    inline_count = len([eq for eq in equations if eq.startswith('$') and not eq.startswith('$$')])
    display_count = len([eq for eq in equations if eq.startswith('$$')])
    
    return {
        'total_equations': len(equations),
        'inline_equations': inline_count,
        'display_equations': display_count,
        'text_length': len(text),
        'has_math': len(equations) > 0
    }

def show_processing_stats(stats: dict):
    """
    Hi·ªÉn th·ªã th·ªëng k√™ qu√° tr√¨nh x·ª≠ l√Ω
    """
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üìä T·ªïng c√¥ng th·ª©c", stats.get('total_equations', 0))
    
    with col2:
        st.metric("üìù Inline equations", stats.get('inline_equations', 0))
    
    with col3:
        st.metric("üìã Display equations", stats.get('display_equations', 0))

def create_latex_preview(latex_content: str, max_length: int = 1000) -> str:
    """
    T·∫°o preview cho n·ªôi dung LaTeX
    """
    if len(latex_content) <= max_length:
        return latex_content
    
    preview = latex_content[:max_length]
    # C·∫Øt t·∫°i d·∫•u xu·ªëng d√≤ng g·∫ßn nh·∫•t
    last_newline = preview.rfind('\n')
    if last_newline > max_length - 100:  # N·∫øu newline g·∫ßn cu·ªëi
        preview = preview[:last_newline]
    
    return preview + f"\n\n... (c√≤n {len(latex_content) - len(preview)} k√Ω t·ª±)"

def generate_filename(original_name: str, suffix: str = "converted") -> str:
    """
    T·∫°o t√™n file output
    """
    if '.' in original_name:
        name, ext = original_name.rsplit('.', 1)
        return f"{name}_{suffix}.docx"
    else:
        return f"{original_name}_{suffix}.docx"

def log_conversion_stats(input_type: str, file_count: int, success: bool):
    """
    Log th·ªëng k√™ conversion (c√≥ th·ªÉ m·ªü r·ªông ƒë·ªÉ l∆∞u v√†o database)
    """
    status = "SUCCESS" if success else "FAILED"
    st.write(f"üìä Conversion Stats: {input_type} | Files: {file_count} | Status: {status}")

class ConversionHistory:
    """
    Class ƒë·ªÉ qu·∫£n l√Ω l·ªãch s·ª≠ conversion trong session
    """
    
    @staticmethod
    def add_to_history(input_type: str, filename: str, success: bool, latex_length: int = 0):
        """Th√™m v√†o l·ªãch s·ª≠ conversion"""
        if 'conversion_history' not in st.session_state:
            st.session_state.conversion_history = []
        
        entry = {
            'timestamp': time.strftime("%Y-%m-%d %H:%M:%S"),
            'input_type': input_type,
            'filename': filename,
            'success': success,
            'latex_length': latex_length
        }
        
        st.session_state.conversion_history.append(entry)
        st.session_state.conversion_time = entry['timestamp']
        
        # Gi·ªõi h·∫°n l·ªãch s·ª≠ ch·ªâ 10 entries g·∫ßn nh·∫•t
        if len(st.session_state.conversion_history) > 10:
            st.session_state.conversion_history = st.session_state.conversion_history[-10:]
    
    @staticmethod
    def show_history():
        """Hi·ªÉn th·ªã l·ªãch s·ª≠ conversion"""
        if 'conversion_history' not in st.session_state or not st.session_state.conversion_history:
            st.info("Ch∆∞a c√≥ l·ªãch s·ª≠ conversion n√†o")
            return
        
        st.subheader("üìä L·ªãch s·ª≠ conversion")
        
        for i, entry in enumerate(reversed(st.session_state.conversion_history)):
            status_icon = "‚úÖ" if entry['success'] else "‚ùå"
            type_icon = "üìÑ" if entry['input_type'] == 'PDF' else "üñºÔ∏è"
            
            st.write(f"{status_icon} {type_icon} **{entry['filename']}** - {entry['latex_length']} chars LaTeX")
            st.caption(f"‚è∞ {entry['timestamp']}")
    
    @staticmethod
    def clear_history():
        """X√≥a l·ªãch s·ª≠"""
        if 'conversion_history' in st.session_state:
            del st.session_state.conversion_history
        if 'conversion_time' in st.session_state:
            del st.session_state.conversion_time
        st.success("ƒê√£ x√≥a l·ªãch s·ª≠ conversion")

def show_tips_and_tricks():
    """
    Hi·ªÉn th·ªã tips v√† tricks cho ng∆∞·ªùi d√πng
    """
    with st.expander("üí° Tips & Tricks"):
        st.markdown("""
        ### üìã ƒê·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t:
        
        **Cho PDF:**
        - S·ª≠ d·ª•ng PDF c√≥ ch·∫•t l∆∞·ª£ng cao, kh√¥ng b·ªã m·ªù
        - Tr√°nh PDF ƒë∆∞·ª£c scan v·ªõi ƒë·ªô ph√¢n gi·∫£i th·∫•p
        - PDF kh√¥ng n√™n c√≥ nhi·ªÅu h√¨nh ·∫£nh ph·ª©c t·∫°p
        
        **Cho ·∫£nh:**
        - ƒê·ªô ph√¢n gi·∫£i t·ªëi thi·ªÉu 300 DPI
        - ·∫¢nh c√≥ ƒë·ªô t∆∞∆°ng ph·∫£n t·ªët
        - C√¥ng th·ª©c r√µ r√†ng, kh√¥ng b·ªã m·ªù
        - Tr√°nh ·∫£nh c√≥ background ph·ª©c t·∫°p
        
        **ƒê·ªãnh d·∫°ng LaTeX:**
        - Inline equations: `$x^2 + y^2 = z^2$`
        - Display equations: `$$\\int_0^1 x dx = \\frac{1}{2}$$`
        - Matrix: `$$\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}$$`
        
        **Kh·∫Øc ph·ª•c s·ª± c·ªë:**
        - N·∫øu API l·ªói, ki·ªÉm tra l·∫°i API key
        - File qu√° l·ªõn? Chia nh·ªè ho·∫∑c n√©n ·∫£nh
        - K·∫øt qu·∫£ kh√¥ng ch√≠nh x√°c? Th·ª≠ c·∫Øt ·∫£nh nh·ªè h∆°n
        """)

def create_sample_prompts() -> dict:
    """
    T·∫°o c√°c prompt m·∫´u cho c√°c lo·∫°i n·ªôi dung kh√°c nhau
    """
    return {
        'math_equations': """
        Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√¥ng th·ª©c to√°n h·ªçc trong ·∫£nh th√†nh LaTeX format.
        S·ª≠ d·ª•ng ${...}$ cho inline equations v√† $${...}$$ cho display equations.
        Gi·ªØ nguy√™n c·∫•u tr√∫c v√† th·ª© t·ª± c·ªßa n·ªôi dung.
        """,
        
        'physics_formulas': """
        Chuy·ªÉn ƒë·ªïi c√°c c√¥ng th·ª©c v·∫≠t l√Ω th√†nh LaTeX format.
        Ch√∫ √Ω c√°c k√Ω hi·ªáu ƒë·∫∑c bi·ªát nh∆∞ vector, tensor, ƒë·∫°o h√†m ri√™ng.
        S·ª≠ d·ª•ng notation chu·∫©n cho c√°c ƒë·∫°i l∆∞·ª£ng v·∫≠t l√Ω.
        """,
        
        'chemistry_equations': """
        Chuy·ªÉn ƒë·ªïi c√°c ph∆∞∆°ng tr√¨nh h√≥a h·ªçc v√† c√¥ng th·ª©c th√†nh LaTeX.
        S·ª≠ d·ª•ng k√Ω hi·ªáu chu·∫©n cho c√°c nguy√™n t·ªë v√† ph·∫£n ·ª©ng.
        Ch√∫ √Ω c√°c ch·ªâ s·ªë tr√™n v√† d∆∞·ªõi.
        """,
        
        'statistics_formulas': """
        Chuy·ªÉn ƒë·ªïi c√°c c√¥ng th·ª©c th·ªëng k√™ th√†nh LaTeX format.
        Ch√∫ √Ω c√°c k√Ω hi·ªáu nh∆∞ sigma, mu, probability notation.
        Gi·ªØ ƒë√∫ng format cho distributions v√† test statistics.
        """
    }

# Error handling decorators
def handle_api_errors(func):
    """
    Decorator ƒë·ªÉ x·ª≠ l√Ω l·ªói API
    """
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            error_msg = str(e)
            if "API key" in error_msg:
                st.error("‚ùå L·ªói API Key. Vui l√≤ng ki·ªÉm tra l·∫°i API key!")
            elif "timeout" in error_msg.lower():
                st.error("‚è∞ Timeout. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.")
            elif "rate limit" in error_msg.lower():
                st.error("üö´ ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng ƒë·ª£i v√† th·ª≠ l·∫°i.")
            else:
                st.error(f"‚ùå L·ªói: {error_msg}")
            return None
    return wrapper
