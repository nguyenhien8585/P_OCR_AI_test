"""
C·∫•u h√¨nh c√°c tham s·ªë cho ImageExtractor
"""

class ExtractorConfig:
    """
    Class ch·ª©a c√°c tham s·ªë c·∫•u h√¨nh cho vi·ªác t√°ch ·∫£nh
    """
    
    # ==================== THAM S·ªê CH√çNH ====================
    
    # Di·ªán t√≠ch t·ªëi thi·ªÉu
    MIN_AREA_RATIO = 0.008      # 0.8% di·ªán t√≠ch ·∫£nh g·ªëc
    MIN_AREA_ABS = 2500         # 2500 pixels
    
    # K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu
    MIN_WIDTH = 70              # 70 pixels
    MIN_HEIGHT = 70             # 70 pixels
    
    # Gi·ªõi h·∫°n
    MAX_FIGURES = 8             # T·ªëi ƒëa 8 ·∫£nh/b·∫£ng
    MAX_AREA_RATIO = 0.6        # T·ªëi ƒëa 60% di·ªán t√≠ch ·∫£nh g·ªëc
    
    # T·ª∑ l·ªá khung h√¨nh
    MIN_ASPECT_RATIO = 0.2      # T·ª∑ l·ªá t·ªëi thi·ªÉu (r·ªông/cao)
    MAX_ASPECT_RATIO = 8.0      # T·ª∑ l·ªá t·ªëi ƒëa (r·ªông/cao)
    
    # ƒê·ªô ƒë·∫∑c t·ªëi thi·ªÉu (solidity)
    MIN_SOLIDITY = 0.4          # 40%
    
    # ==================== THAM S·ªê X·ª¨ L√ù ·∫¢NH ====================
    
    # Gaussian Blur
    BLUR_KERNEL = (3, 3)        # Kernel l√†m m·ªù
    BLUR_SIGMA = 0              # Sigma (0 = t·ª± ƒë·ªông)
    
    # CLAHE (Contrast Limited Adaptive Histogram Equalization)
    CLAHE_CLIP_LIMIT = 2.0      # Gi·ªõi h·∫°n ƒë·ªô t∆∞∆°ng ph·∫£n
    CLAHE_TILE_SIZE = (8, 8)    # K√≠ch th∆∞·ªõc tile
    
    # Adaptive Threshold
    THRESH_MAX_VALUE = 255      # Gi√° tr·ªã t·ªëi ƒëa
    THRESH_ADAPTIVE_METHOD = 'ADAPTIVE_THRESH_MEAN_C'
    THRESH_TYPE = 'THRESH_BINARY_INV'
    THRESH_BLOCK_SIZE = 25      # K√≠ch th∆∞·ªõc block
    THRESH_C = 10               # H·∫±ng s·ªë C
    
    # Morphological Operations
    DILATE_KERNEL = (3, 3)      # Kernel dilate
    DILATE_ITERATIONS = 1       # S·ªë l·∫ßn dilate
    
    # ==================== THAM S·ªê PH√ÇN LO·∫†I ====================
    
    # Ti√™u ch√≠ ph√¢n bi·ªát b·∫£ng vs h√¨nh
    TABLE_MIN_WIDTH_RATIO = 0.25    # B·∫£ng ph·∫£i r·ªông √≠t nh·∫•t 25% ·∫£nh g·ªëc
    TABLE_MIN_HEIGHT_RATIO = 0.05   # B·∫£ng ph·∫£i cao √≠t nh·∫•t 5% ·∫£nh g·ªëc
    TABLE_MIN_ASPECT = 2.0          # B·∫£ng c√≥ t·ª∑ l·ªá √≠t nh·∫•t 2:1
    TABLE_MAX_ASPECT = 10.0         # B·∫£ng c√≥ t·ª∑ l·ªá t·ªëi ƒëa 10:1
    
    # V√πng bi√™n (lo·∫°i b·ªè c√°c ƒë·ªëi t∆∞·ª£ng qu√° g·∫ßn r√¨a)
    EDGE_MARGIN_RATIO = 0.03        # 3% t·ª´ m√©p ·∫£nh
    EDGE_MARGIN_MAX_RATIO = 0.97    # 97% ƒë·∫øn m√©p ·∫£nh
    
    # ==================== T·ª™ KH√ìA NH·∫¨N DI·ªÜN ====================
    
    # T·ª´ kh√≥a cho b·∫£ng
    TABLE_KEYWORDS = [
        "b·∫£ng", "b·∫£ng gi√° tr·ªã", "b·∫£ng bi·∫øn thi√™n", 
        "b·∫£ng t·∫ßn s·ªë", "b·∫£ng s·ªë li·ªáu", "b·∫£ng th·ªëng k√™",
        "table", "data table", "value table"
    ]
    
    # T·ª´ kh√≥a cho h√¨nh
    IMAGE_KEYWORDS = [
        "h√¨nh v·∫Ω", "h√¨nh b√™n", "(h√¨nh", "xem h√¨nh", 
        "ƒë·ªì th·ªã", "bi·ªÉu ƒë·ªì", "minh h·ªça", "h√¨nh",
        "figure", "diagram", "chart", "graph", "illustration"
    ]
    
    # Pattern cho c√¢u h·ªèi
    QUESTION_PATTERN = r"^C√¢u\s*\d+[\.\:]"
    
    # ==================== THAM S·ªê DEBUG ====================
    
    # Debug mode
    DEBUG_MODE = False          # B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô debug
    SAVE_DEBUG_IMAGES = False   # L∆∞u ·∫£nh debug
    DEBUG_FOLDER = "debug_output"
    
    # Hi·ªÉn th·ªã th√¥ng tin
    SHOW_CONTOURS = False       # Hi·ªÉn th·ªã contours
    SHOW_BOUNDING_BOXES = False # Hi·ªÉn th·ªã bounding boxes
    SHOW_PROCESSING_STEPS = False # Hi·ªÉn th·ªã c√°c b∆∞·ªõc x·ª≠ l√Ω
    
    @classmethod
    def get_table_criteria(cls):
        """
        Tr·∫£ v·ªÅ ti√™u ch√≠ ph√¢n bi·ªát b·∫£ng
        """
        return {
            'min_width_ratio': cls.TABLE_MIN_WIDTH_RATIO,
            'min_height_ratio': cls.TABLE_MIN_HEIGHT_RATIO,
            'min_aspect': cls.TABLE_MIN_ASPECT,
            'max_aspect': cls.TABLE_MAX_ASPECT
        }
    
    @classmethod
    def get_size_criteria(cls):
        """
        Tr·∫£ v·ªÅ ti√™u ch√≠ k√≠ch th∆∞·ªõc
        """
        return {
            'min_area_ratio': cls.MIN_AREA_RATIO,
            'min_area_abs': cls.MIN_AREA_ABS,
            'min_width': cls.MIN_WIDTH,
            'min_height': cls.MIN_HEIGHT,
            'max_area_ratio': cls.MAX_AREA_RATIO
        }
    
    @classmethod
    def get_shape_criteria(cls):
        """
        Tr·∫£ v·ªÅ ti√™u ch√≠ h√¨nh d·∫°ng
        """
        return {
            'min_aspect_ratio': cls.MIN_ASPECT_RATIO,
            'max_aspect_ratio': cls.MAX_ASPECT_RATIO,
            'min_solidity': cls.MIN_SOLIDITY
        }
    
    @classmethod
    def get_processing_params(cls):
        """
        Tr·∫£ v·ªÅ tham s·ªë x·ª≠ l√Ω ·∫£nh
        """
        return {
            'blur_kernel': cls.BLUR_KERNEL,
            'blur_sigma': cls.BLUR_SIGMA,
            'clahe_clip_limit': cls.CLAHE_CLIP_LIMIT,
            'clahe_tile_size': cls.CLAHE_TILE_SIZE,
            'thresh_block_size': cls.THRESH_BLOCK_SIZE,
            'thresh_c': cls.THRESH_C,
            'dilate_kernel': cls.DILATE_KERNEL,
            'dilate_iterations': cls.DILATE_ITERATIONS
        }
    
    @classmethod
    def update_config(cls, **kwargs):
        """
        C·∫≠p nh·∫≠t c·∫•u h√¨nh t·ª´ dictionary
        
        Args:
            **kwargs: C√°c tham s·ªë c·∫ßn c·∫≠p nh·∫≠t
        """
        for key, value in kwargs.items():
            if hasattr(cls, key.upper()):
                setattr(cls, key.upper(), value)
            else:
                print(f"Warning: Tham s·ªë '{key}' kh√¥ng t·ªìn t·∫°i")
    
    @classmethod
    def reset_to_default(cls):
        """
        Reset v·ªÅ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
        """
        # N√†y s·∫Ω reset c√°c gi√° tr·ªã v·ªÅ m·∫∑c ƒë·ªãnh
        # C√≥ th·ªÉ implement logic ph·ª©c t·∫°p h∆°n n·∫øu c·∫ßn
        pass
    
    @classmethod
    def print_config(cls):
        """
        In ra c·∫•u h√¨nh hi·ªán t·∫°i
        """
        print("="*50)
        print("üìã C·∫§U H√åNH IMAGEEXTRACTOR")
        print("="*50)
        
        print("\nüéØ THAM S·ªê CH√çNH:")
        print(f"  - Di·ªán t√≠ch t·ªëi thi·ªÉu: {cls.MIN_AREA_RATIO*100:.1f}% ({cls.MIN_AREA_ABS} px)")
        print(f"  - K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu: {cls.MIN_WIDTH}x{cls.MIN_HEIGHT} px")
        print(f"  - S·ªë ·∫£nh t·ªëi ƒëa: {cls.MAX_FIGURES}")
        print(f"  - T·ª∑ l·ªá khung h√¨nh: {cls.MIN_ASPECT_RATIO} - {cls.MAX_ASPECT_RATIO}")
        
        print("\nüìä PH√ÇN LO·∫†I B·∫¢NG:")
        print(f"  - Chi·ªÅu r·ªông t·ªëi thi·ªÉu: {cls.TABLE_MIN_WIDTH_RATIO*100:.1f}%")
        print(f"  - Chi·ªÅu cao t·ªëi thi·ªÉu: {cls.TABLE_MIN_HEIGHT_RATIO*100:.1f}%")
        print(f"  - T·ª∑ l·ªá khung h√¨nh: {cls.TABLE_MIN_ASPECT} - {cls.TABLE_MAX_ASPECT}")
        
        print("\nüîç X·ª¨ L√ù ·∫¢NH:")
        print(f"  - Blur kernel: {cls.BLUR_KERNEL}")
        print(f"  - CLAHE clip limit: {cls.CLAHE_CLIP_LIMIT}")
        print(f"  - Threshold block size: {cls.THRESH_BLOCK_SIZE}")
        
        print("\nüè∑Ô∏è T·ª™ KH√ìA:")
        print(f"  - B·∫£ng: {len(cls.TABLE_KEYWORDS)} t·ª´ kh√≥a")
        print(f"  - H√¨nh: {len(cls.IMAGE_KEYWORDS)} t·ª´ kh√≥a")
        
        print("="*50)


# ==================== C√ÅC PRESET C·∫§U H√åNH ====================

class PresetConfigs:
    """
    C√°c c·∫•u h√¨nh preset cho c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
    """
    
    @staticmethod
    def get_high_precision():
        """
        C·∫•u h√¨nh ƒë·ªô ch√≠nh x√°c cao (√≠t ·∫£nh h∆°n nh∆∞ng ch√≠nh x√°c h∆°n)
        """
        return {
            'min_area_ratio': 0.015,    # 1.5%
            'min_area_abs': 5000,       # 5000 px
            'min_width': 100,           # 100 px
            'min_height': 100,          # 100 px
            'min_solidity': 0.6,        # 60%
            'max_figures': 5            # T·ªëi ƒëa 5 ·∫£nh
        }
    
    @staticmethod
    def get_high_recall():
        """
        C·∫•u h√¨nh thu th·∫≠p nhi·ªÅu (nhi·ªÅu ·∫£nh h∆°n, c√≥ th·ªÉ √≠t ch√≠nh x√°c)
        """
        return {
            'min_area_ratio': 0.005,    # 0.5%
            'min_area_abs': 1500,       # 1500 px
            'min_width': 50,            # 50 px
            'min_height': 50,           # 50 px
            'min_solidity': 0.3,        # 30%
            'max_figures': 15           # T·ªëi ƒëa 15 ·∫£nh
        }
    
    @staticmethod
    def get_table_focused():
        """
        C·∫•u h√¨nh t·∫≠p trung v√†o b·∫£ng
        """
        return {
            'table_min_width_ratio': 0.2,   # 20%
            'table_min_height_ratio': 0.03, # 3%
            'table_min_aspect': 1.5,        # 1.5:1
            'table_max_aspect': 15.0,       # 15:1
            'min_area_ratio': 0.01          # 1%
        }
    
    @staticmethod
    def get_figure_focused():
        """
        C·∫•u h√¨nh t·∫≠p trung v√†o h√¨nh
        """
        return {
            'min_aspect_ratio': 0.3,        # H√¨nh vu√¥ng h∆°n
            'max_aspect_ratio': 5.0,        # Kh√¥ng qu√° d√†i
            'min_area_ratio': 0.012,        # 1.2%
            'table_min_width_ratio': 0.4    # Kh√≥ ƒë∆∞·ª£c coi l√† b·∫£ng
        }


if __name__ == "__main__":
    # Demo s·ª≠ d·ª•ng
    ExtractorConfig.print_config()
    
    print("\n" + "="*50)
    print("üîß THAY ƒê·ªîI C·∫§U H√åNH")
    print("="*50)
    
    # Thay ƒë·ªïi m·ªôt s·ªë tham s·ªë
    ExtractorConfig.update_config(
        min_area_ratio=0.01,
        max_figures=10
    )
    
    print("ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh!")
    ExtractorConfig.print_config()
