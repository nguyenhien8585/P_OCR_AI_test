import streamlit as st
import requests
import base64
import io
import json
from PIL import Image
import fitz  # PyMuPDF
from docx import Document
import tempfile
import os
import re
import time
import cv2
import numpy as np

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="PDF/Image to LaTeX Converter",
    page_icon="üìù",
    layout="wide"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #2E86AB;
        font-size: 2.5rem;
        margin-bottom: 2rem;
    }
    .latex-output {
        background-color: #f4f4f4;
        padding: 1rem;
        border-radius: 5px;
        font-family: 'Courier New', monospace;
        border-left: 4px solid #2E86AB;
    }
    .success-message {
        color: #28a745;
        font-weight: bold;
    }
    .error-message {
        color: #dc3545;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

class ImageExtractor:
    """
    Class ƒë·ªÉ t√°ch ·∫£nh/b·∫£ng t·ª´ ·∫£nh g·ªëc v√† ch√®n v√†o ƒë√∫ng v·ªã tr√≠ trong vƒÉn b·∫£n
    """
    
    def __init__(self):
        self.min_area_ratio = 0.008    # Di·ªán t√≠ch t·ªëi thi·ªÉu (% c·ªßa ·∫£nh g·ªëc)
        self.min_area_abs = 2500       # Di·ªán t√≠ch t·ªëi thi·ªÉu (pixel)
        self.min_width = 70            # Chi·ªÅu r·ªông t·ªëi thi·ªÉu
        self.min_height = 70           # Chi·ªÅu cao t·ªëi thi·ªÉu
        self.max_figures = 8           # S·ªë l∆∞·ª£ng ·∫£nh t·ªëi ƒëa
    
    def extract_figures_and_tables(self, image_bytes):
        """T√°ch ·∫£nh v√† b·∫£ng t·ª´ ·∫£nh g·ªëc"""
        # 1. ƒê·ªçc ·∫£nh
        img_pil = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        img = np.array(img_pil)
        h, w = img.shape[:2]
        
        # 2. Ti·ªÅn x·ª≠ l√Ω ·∫£nh
        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
        gray = cv2.GaussianBlur(gray, (3, 3), 0)
        
        # 3. TƒÉng c∆∞·ªùng ƒë·ªô t∆∞∆°ng ph·∫£n
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        gray = clahe.apply(gray)
        
        # 4. T·∫°o ·∫£nh nh·ªã ph√¢n
        thresh = cv2.adaptiveThreshold(
            gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, 
            cv2.THRESH_BINARY_INV, 25, 10
        )
        
        # 5. L√†m d√†y c√°c ƒë∆∞·ªùng vi·ªÅn
        kernel = np.ones((3, 3), np.uint8)
        thresh = cv2.dilate(thresh, kernel, iterations=1)
        
        # 6. T√¨m c√°c contour
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # 7. L·ªçc v√† ph√¢n lo·∫°i c√°c v√πng
        candidates = []
        for cnt in contours:
            x, y, ww, hh = cv2.boundingRect(cnt)
            area = ww * hh
            area_ratio = area / (w * h)
            aspect_ratio = ww / (hh + 1e-6)
            
            # L·ªçc theo k√≠ch th∆∞·ªõc
            if (area < self.min_area_abs or 
                area_ratio < self.min_area_ratio or 
                area_ratio > 0.6):
                continue
            
            if ww < self.min_width or hh < self.min_height:
                continue
            
            if not (0.2 < aspect_ratio < 8.0):
                continue
            
            # Lo·∫°i b·ªè v√πng ·ªü r√¨a
            if (x < 0.03*w or y < 0.03*h or 
                (x+ww) > 0.97*w or (y+hh) > 0.97*h):
                continue
            
            # Ki·ªÉm tra ƒë·ªô ƒë·∫∑c
            hull = cv2.convexHull(cnt)
            hull_area = cv2.contourArea(hull)
            if hull_area == 0:
                continue
            solidity = float(area) / hull_area
            if solidity < 0.4:
                continue
            
            # Ph√¢n lo·∫°i b·∫£ng vs h√¨nh
            is_table = (ww > 0.25*w and hh > 0.05*h and 
                       aspect_ratio > 2.0 and aspect_ratio < 10.0)
            
            candidates.append({
                "area": area,
                "x0": x, "y0": y, "x1": x+ww, "y1": y+hh,
                "is_table": is_table,
                "bbox": (x, y, ww, hh)
            })
        
        # 8. S·∫Øp x·∫øp v√† l·ªçc
        candidates = sorted(candidates, key=lambda f: f['area'], reverse=True)
        candidates = self._filter_nested_boxes(candidates)
        candidates = candidates[:self.max_figures]
        candidates = sorted(candidates, key=lambda box: (box["y0"], box["x0"]))
        
        # 9. T·∫°o danh s√°ch ·∫£nh k·∫øt qu·∫£
        final_figures = []
        img_idx = 0
        table_idx = 0
        
        for fig_data in candidates:
            # C·∫Øt ·∫£nh
            crop = img[fig_data["y0"]:fig_data["y1"], fig_data["x0"]:fig_data["x1"]]
            
            # Chuy·ªÉn th√†nh base64
            buf = io.BytesIO()
            Image.fromarray(crop).save(buf, format="JPEG")
            b64 = base64.b64encode(buf.getvalue()).decode()
            
            # ƒê·∫∑t t√™n file
            if fig_data["is_table"]:
                name = f"table-{table_idx+1}.jpeg"
                table_idx += 1
            else:
                name = f"img-{img_idx+1}.jpeg"
                img_idx += 1
            
            final_figures.append({
                "name": name,
                "base64": b64,
                "is_table": fig_data["is_table"],
                "bbox": fig_data["bbox"]
            })
        
        return final_figures, h, w
    
    def _filter_nested_boxes(self, candidates):
        """Lo·∫°i b·ªè c√°c box n·∫±m b√™n trong box kh√°c"""
        filtered = []
        for i, box in enumerate(candidates):
            x0, y0, x1, y1 = box['x0'], box['y0'], box['x1'], box['y1']
            is_nested = False
            
            for j, other in enumerate(candidates):
                if i == j:
                    continue
                ox0, oy0, ox1, oy1 = other['x0'], other['y0'], other['x1'], other['y1']
                
                if x0 >= ox0 and y0 >= oy0 and x1 <= ox1 and y1 <= oy1:
                    is_nested = True
                    break
            
            if not is_nested:
                filtered.append(box)
        
        return filtered
    
    def insert_figures_into_text(self, text, figures, img_h, img_w):
        """Ch√®n ·∫£nh/b·∫£ng v√†o ƒë√∫ng v·ªã tr√≠ trong vƒÉn b·∫£n"""
        lines = self._preprocess_text_lines(text)
        
        figures_sorted = sorted(
            [fig for fig in figures if fig.get('bbox')],
            key=lambda f: (f['bbox'][1], f['bbox'][0])
        )
        
        processed_lines = []
        used_figures = set()
        fig_idx = 0
        
        for i, line in enumerate(lines):
            processed_lines.append(line)
            
            inserted = self._try_insert_figure(
                line, figures_sorted, used_figures, 
                processed_lines, fig_idx
            )
            
            if inserted:
                fig_idx = inserted
        
        # Ch√®n c√°c ·∫£nh c√≤n l·∫°i v√†o c√¢u h·ªèi
        processed_lines = self._insert_remaining_figures(
            processed_lines, figures_sorted, used_figures, fig_idx
        )
        
        return '\n'.join(processed_lines)
    
    def _preprocess_text_lines(self, text):
        """Ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n th√†nh c√°c d√≤ng"""
        lines = []
        buffer = ""
        
        for line in text.split('\n'):
            stripped_line = line.strip()
            if stripped_line:
                buffer = buffer + " " + stripped_line if buffer else stripped_line
            else:
                if buffer:
                    lines.append(buffer)
                    buffer = ""
                lines.append('')
        
        if buffer:
            lines.append(buffer)
        
        return lines
    
    def _try_insert_figure(self, line, figures_sorted, used_figures, processed_lines, fig_idx):
        """Th·ª≠ ch√®n ·∫£nh/b·∫£ng d·ª±a tr√™n t·ª´ kh√≥a"""
        lower_line = line.lower()
        
        # T·ª´ kh√≥a cho b·∫£ng
        table_keywords = [
            "b·∫£ng", "b·∫£ng gi√° tr·ªã", "b·∫£ng bi·∫øn thi√™n", 
            "b·∫£ng t·∫ßn s·ªë", "b·∫£ng s·ªë li·ªáu", "table"
        ]
        
        # T·ª´ kh√≥a cho h√¨nh
        image_keywords = [
            "h√¨nh v·∫Ω", "h√¨nh b√™n", "(h√¨nh", "xem h√¨nh", 
            "ƒë·ªì th·ªã", "bi·ªÉu ƒë·ªì", "minh h·ªça", "h√¨nh", "figure", "chart"
        ]
        
        # Ki·ªÉm tra v√† ch√®n b·∫£ng
        if (any(keyword in lower_line for keyword in table_keywords) or 
            (line.strip().startswith("|") and "|" in line)):
            
            for j in range(fig_idx, len(figures_sorted)):
                fig = figures_sorted[j]
                if fig['is_table'] and fig['name'] not in used_figures:
                    tag = f"\n[B·∫¢NG: {fig['name']}]\n"
                    processed_lines.append(tag)
                    used_figures.add(fig['name'])
                    return j + 1
        
        # Ki·ªÉm tra v√† ch√®n h√¨nh
        elif any(keyword in lower_line for keyword in image_keywords):
            for j in range(fig_idx, len(figures_sorted)):
                fig = figures_sorted[j]
                if not fig['is_table'] and fig['name'] not in used_figures:
                    tag = f"\n[H√åNH: {fig['name']}]\n"
                    processed_lines.append(tag)
                    used_figures.add(fig['name'])
                    return j + 1
        
        return fig_idx
    
    def _insert_remaining_figures(self, processed_lines, figures_sorted, used_figures, fig_idx):
        """Ch√®n c√°c ·∫£nh c√≤n l·∫°i v√†o ƒë·∫ßu c√°c c√¢u h·ªèi"""
        for i, line in enumerate(processed_lines):
            if re.match(r"^(C√¢u|Question|Problem)\s*\d+[\.\:]", line) and fig_idx < len(figures_sorted):
                next_line = processed_lines[i+1] if i+1 < len(processed_lines) else ""
                
                if (not re.match(r"\[H√åNH:.*\]", next_line) and 
                    not re.match(r"\[B·∫¢NG:.*\]", next_line)):
                    
                    while (fig_idx < len(figures_sorted) and 
                           figures_sorted[fig_idx]['name'] in used_figures):
                        fig_idx += 1
                    
                    if fig_idx < len(figures_sorted):
                        fig = figures_sorted[fig_idx]
                        tag = (f"\n[B·∫¢NG: {fig['name']}]\n" if fig['is_table'] 
                               else f"\n[H√åNH: {fig['name']}]\n")
                        processed_lines.insert(i+1, tag)
                        used_figures.add(fig['name'])
                        fig_idx += 1
        
        return processed_lines

class GeminiAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    
    def encode_image(self, image_data: bytes) -> str:
        """M√£ h√≥a ·∫£nh th√†nh base64"""
        return base64.b64encode(image_data).decode('utf-8')
    
    def convert_to_latex(self, content_data: bytes, content_type: str, prompt: str) -> str:
        """Chuy·ªÉn ƒë·ªïi n·ªôi dung sang LaTeX s·ª≠ d·ª•ng Gemini API"""
        headers = {"Content-Type": "application/json"}
        
        # T·∫°o payload cho API
        if content_type.startswith('image/'):
            mime_type = content_type
        else:
            mime_type = "image/png"
        
        encoded_content = self.encode_image(content_data)
        
        payload = {
            "contents": [
                {
                    "parts": [
                        {"text": prompt},
                        {
                            "inline_data": {
                                "mime_type": mime_type,
                                "data": encoded_content
                            }
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.1,
                "topK": 1,
                "topP": 0.8,
                "maxOutputTokens": 8192,
            }
        }
        
        try:
            response = requests.post(
                f"{self.base_url}?key={self.api_key}",
                headers=headers,
                json=payload,
                timeout=90
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and len(result['candidates']) > 0:
                    content = result['candidates'][0]['content']['parts'][0]['text']
                    return content.strip()
                else:
                    raise Exception("API kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá")
            elif response.status_code == 401:
                raise Exception("API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
            elif response.status_code == 429:
                raise Exception("ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n rate limit")
            else:
                raise Exception(f"API Error {response.status_code}: {response.text}")
        
        except requests.exceptions.Timeout:
            raise Exception("Request timeout - th·ª≠ l·∫°i sau √≠t ph√∫t")
        except requests.exceptions.ConnectionError:
            raise Exception("L·ªói k·∫øt n·ªëi m·∫°ng")
        except Exception as e:
            raise Exception(str(e))

class PDFProcessor:
    @staticmethod
    def extract_images_and_text(pdf_file):
        """Tr√≠ch xu·∫•t ·∫£nh v√† chuy·ªÉn ƒë·ªïi trang PDF th√†nh ·∫£nh"""
        pdf_document = fitz.open(stream=pdf_file.read(), filetype="pdf")
        images = []
        
        for page_num in range(pdf_document.page_count):
            page = pdf_document[page_num]
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            img = Image.open(io.BytesIO(img_data))
            images.append((img, page_num + 1))
        
        pdf_document.close()
        return images

class WordExporter:
    @staticmethod
    def create_word_document(latex_content: str, extracted_figures=None, images=None) -> io.BytesIO:
        """T·∫°o file Word v·ªõi equations t·ª´ LaTeX v√† ·∫£nh ƒë√£ t√°ch"""
        doc = Document()
        
        # Th√™m ti√™u ƒë·ªÅ
        title = doc.add_heading('T√†i li·ªáu ƒë√£ chuy·ªÉn ƒë·ªïi t·ª´ PDF/·∫¢nh', 0)
        title.alignment = 1
        
        # Th√™m th√¥ng tin
        doc.add_paragraph(f"ƒê∆∞·ª£c t·∫°o b·ªüi PDF/Image to LaTeX Converter")
        doc.add_paragraph(f"Th·ªùi gian: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        doc.add_paragraph("")
        
        # X·ª≠ l√Ω n·ªôi dung LaTeX
        lines = latex_content.split('\n')
        
        for line in lines:
            line = line.strip()
            
            # X·ª≠ l√Ω tag ·∫£nh/b·∫£ng ƒë√£ t√°ch
            if line.startswith('[H√åNH:') and line.endswith(']'):
                img_name = line.replace('[H√åNH:', '').replace(']', '').strip()
                WordExporter._insert_extracted_image(doc, img_name, extracted_figures, "H√¨nh minh h·ªça")
                continue
            elif line.startswith('[B·∫¢NG:') and line.endswith(']'):
                img_name = line.replace('[B·∫¢NG:', '').replace(']', '').strip()
                WordExporter._insert_extracted_image(doc, img_name, extracted_figures, "B·∫£ng s·ªë li·ªáu")
                continue
            
            # Skip comments
            if line.startswith('<!--') and line.endswith('-->'):
                if 'Trang' in line or '·∫¢nh' in line:
                    doc.add_heading(line.replace('<!--', '').replace('-->', '').strip(), level=2)
                continue
            
            if not line:
                continue
            
            # X·ª≠ l√Ω c√°c c√¥ng th·ª©c LaTeX
            if '

def validate_api_key(api_key: str) -> bool:
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa API key"""
    if not api_key or len(api_key) < 20:
        return False
    return re.match(r'^[A-Za-z0-9_-]+$', api_key) is not None

def format_file_size(size_bytes: int) -> str:
    """Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc file sang ƒë·ªãnh d·∫°ng human-readable"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter + Auto Image Extract</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
        
        st.markdown("---")
        
        # C√†i ƒë·∫∑t t√°ch ·∫£nh
        st.subheader("üñºÔ∏è T√°ch ·∫£nh t·ª± ƒë·ªông")
        enable_extraction = st.checkbox("B·∫≠t t√°ch ·∫£nh/b·∫£ng t·ª± ƒë·ªông", value=True, 
                                       help="T·ª± ƒë·ªông t√°ch v√† ch√®n ·∫£nh/b·∫£ng v√†o ƒë√∫ng v·ªã tr√≠")
        
        if enable_extraction:
            min_area = st.slider("Di·ªán t√≠ch t·ªëi thi·ªÉu (%)", 0.1, 2.0, 0.8, 0.1,
                               help="% di·ªán t√≠ch ·∫£nh g·ªëc") / 100
            max_figures = st.slider("S·ªë ·∫£nh t·ªëi ƒëa", 1, 15, 8, 1)
            min_size = st.slider("K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu (px)", 30, 150, 70, 10)
        
        st.markdown("---")
        st.markdown("""
        ### üìã H∆∞·ªõng d·∫´n:
        1. Nh·∫≠p API key Gemini
        2. Ch·ªçn tab PDF ho·∫∑c ·∫¢nh  
        3. Upload file
        4. Ch·ªù x·ª≠ l√Ω v√† t·∫£i file Word
        
        ### üéØ T√≠nh nƒÉng m·ªõi:
        - ‚úÖ T·ª± ƒë·ªông t√°ch ·∫£nh/b·∫£ng
        - ‚úÖ Ch√®n ƒë√∫ng v·ªã tr√≠ d·ª±a tr√™n t·ª´ kh√≥a
        - ‚úÖ Ph√¢n bi·ªát h√¨nh minh h·ªça v√† b·∫£ng s·ªë li·ªáu
        
        ### üîë L·∫•y API Key:
        [Google AI Studio](https://makersuite.google.com/app/apikey)
        """)
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i Google AI Studio")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2 = st.tabs(["üìÑ PDF to LaTeX + Auto Extract", "üñºÔ∏è Image to LaTeX + Auto Extract"])
    
    # Kh·ªüi t·∫°o API v√† ImageExtractor
    try:
        gemini_api = GeminiAPI(api_key)
        if enable_extraction:
            image_extractor = ImageExtractor()
            image_extractor.min_area_ratio = min_area
            image_extractor.max_figures = max_figures
            image_extractor.min_width = min_size
            image_extractor.min_height = min_size
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX + T√°ch ·∫£nh t·ª± ƒë·ªông")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc v√† h√¨nh ·∫£nh"
        )
        
        if uploaded_pdf:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview
                        for img, page_num in pdf_images[:3]:
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 3:
                            st.info(f"... v√† {len(pdf_images) - 3} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF + T√°ch ·∫£nh", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        all_extracted_figures = []
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T√°ch ·∫£nh/b·∫£ng n·∫øu ƒë∆∞·ª£c b·∫≠t
                            extracted_figures = []
                            if enable_extraction:
                                try:
                                    figures, h, w = image_extractor.extract_figures_and_tables(img_bytes)
                                    extracted_figures = figures
                                    all_extracted_figures.extend(figures)
                                    st.write(f"üñºÔ∏è Trang {page_num}: T√°ch ƒë∆∞·ª£c {len(figures)} ·∫£nh/b·∫£ng")
                                except Exception as e:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√°ch ·∫£nh trang {page_num}: {str(e)}")
                            
                            # T·∫°o prompt cho Gemini
                            prompt = f"""
H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh trang {page_num} th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c display
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n

{'6. Khi g·∫∑p h√¨nh ·∫£nh/b·∫£ng, s·ª≠ d·ª•ng t·ª´ kh√≥a nh∆∞ "xem h√¨nh", "b·∫£ng sau", "bi·ªÉu ƒë·ªì", "ƒë·ªì th·ªã"' if enable_extraction else ''}

ƒê·ªäNH D·∫†NG OUTPUT:
- Text: vi·∫øt b√¨nh th∆∞·ªùng
- Inline: ${{x^2 + y^2}}$
- Display: ${{\\int_0^1 x dx = \\frac{{1}}{{2}}}}$
"""
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    # Ch√®n ·∫£nh v√†o vƒÉn b·∫£n n·∫øu c√≥ t√°ch ·∫£nh
                                    if enable_extraction and extracted_figures:
                                        latex_result = image_extractor.insert_figures_into_text(
                                            latex_result, extracted_figures, h, w
                                        )
                                    
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX (v·ªõi ·∫£nh ƒë√£ t√°ch):", combined_latex, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã th·ªëng k√™
                        if enable_extraction:
                            st.info(f"üñºÔ∏è T·ªïng c·ªông ƒë√£ t√°ch: {len(all_extracted_figures)} ·∫£nh/b·∫£ng")
                        
                        # L∆∞u v√†o session state
                        st.session_state.pdf_latex_content = combined_latex
                        st.session_state.pdf_images = [img for img, _ in pdf_images]
                        st.session_state.pdf_extracted_figures = all_extracted_figures if enable_extraction else None
                
                # T·∫°o file Word
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word (v·ªõi ·∫£nh t·ª± ƒë·ªông)", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                extracted_figs = st.session_state.get('pdf_extracted_figures')
                                original_imgs = st.session_state.pdf_images
                                
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    extracted_figures=extracted_figs,
                                    images=original_imgs
                                )
                                
                                filename = f"{uploaded_pdf.name.split('.')[0]}_latex_with_images.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word (c√≥ ·∫£nh t·ª± ƒë·ªông ch√®n)",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word v·ªõi ·∫£nh t·ª± ƒë·ªông ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Tab x·ª≠ l√Ω ·∫£nh
    with tab2:
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX + T√°ch ·∫£nh t·ª± ƒë·ªông")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc v√† h√¨nh minh h·ªça"
        )
        
        if uploaded_images:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                for i, uploaded_image in enumerate(uploaded_images[:3]):
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                
                if len(uploaded_images) > 3:
                    st.info(f"... v√† {len(uploaded_images) - 3} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh + T√°ch ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    all_extracted_figures = []
                    all_original_images = []
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        image_bytes = uploaded_image.getvalue()
                        image_pil = Image.open(uploaded_image)
                        all_original_images.append(image_pil)
                        
                        # T√°ch ·∫£nh/b·∫£ng n·∫øu ƒë∆∞·ª£c b·∫≠t
                        extracted_figures = []
                        if enable_extraction:
                            try:
                                figures, h, w = image_extractor.extract_figures_and_tables(image_bytes)
                                extracted_figures = figures
                                all_extracted_figures.extend(figures)
                                st.write(f"üñºÔ∏è {uploaded_image.name}: T√°ch ƒë∆∞·ª£c {len(figures)} ·∫£nh/b·∫£ng")
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√°ch ·∫£nh {uploaded_image.name}: {str(e)}")
                        
                        prompt = """
Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c display  
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
"""
                        
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                # Ch√®n ·∫£nh v√†o vƒÉn b·∫£n n·∫øu c√≥ t√°ch ·∫£nh
                                if enable_extraction and extracted_figures:
                                    latex_result = image_extractor.insert_figures_into_text(
                                        latex_result, extracted_figures, h, w
                                    )
                                
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    combined_latex = "\n".join(all_latex_content)
                    
                    st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                    st.text_area("üìù K·∫øt qu·∫£ LaTeX (v·ªõi ·∫£nh ƒë√£ t√°ch):", combined_latex, height=300)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Hi·ªÉn th·ªã th·ªëng k√™
                    if enable_extraction:
                        st.info(f"üñºÔ∏è T·ªïng c·ªông ƒë√£ t√°ch: {len(all_extracted_figures)} ·∫£nh/b·∫£ng")
                    
                    # L∆∞u v√†o session
                    st.session_state.image_latex_content = combined_latex
                    st.session_state.image_list = all_original_images
                    st.session_state.image_extracted_figures = all_extracted_figures if enable_extraction else None
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word (v·ªõi ·∫£nh t·ª± ƒë·ªông)", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                extracted_figs = st.session_state.get('image_extracted_figures')
                                original_imgs = st.session_state.image_list
                                
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    extracted_figures=extracted_figs,
                                    images=original_imgs
                                )
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word (c√≥ ·∫£nh t·ª± ƒë·ªông ch√®n)",
                                    data=word_buffer.getvalue(),
                                    file_name="images_latex_with_extracted.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word v·ªõi ·∫£nh t·ª± ƒë·ªông ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>‚ú® <strong>T√≠nh nƒÉng m·ªõi:</strong> T·ª± ƒë·ªông t√°ch ·∫£nh/b·∫£ng v√† ch√®n ƒë√∫ng v·ªã tr√≠!</p>
        <p>üéØ H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi PDF v√† ·∫£nh sang LaTeX v·ªõi ƒë·ªô ch√≠nh x√°c cao + AI t√°ch ·∫£nh th√¥ng minh</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() in line:
                p = doc.add_paragraph()
                
                # X·ª≠ l√Ω display equations ($...$) tr∆∞·ªõc
                while '$' in line:
                    start_idx = line.find('$')
                    if start_idx != -1:
                        end_idx = line.find('$', start_idx + 2)
                        if end_idx != -1:
                            if start_idx > 0:
                                p.add_run(line[:start_idx])
                            
                            equation = line[start_idx+2:end_idx]
                            eq_run = p.add_run(f"\n[EQUATION: {equation}]\n")
                            eq_run.font.bold = True
                            
                            line = line[end_idx+2:]
                        else:
                            break
                    else:
                        break
                
                # X·ª≠ l√Ω inline equations ($...$)
                while '

def validate_api_key(api_key: str) -> bool:
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa API key"""
    if not api_key or len(api_key) < 20:
        return False
    return re.match(r'^[A-Za-z0-9_-]+$', api_key) is not None

def format_file_size(size_bytes: int) -> str:
    """Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc file sang ƒë·ªãnh d·∫°ng human-readable"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
        
        st.markdown("---")
        st.markdown("""
        ### üìã H∆∞·ªõng d·∫´n:
        1. Nh·∫≠p API key Gemini
        2. Ch·ªçn tab PDF ho·∫∑c ·∫¢nh  
        3. Upload file
        4. Ch·ªù x·ª≠ l√Ω v√† t·∫£i file Word
        
        ### üîë L·∫•y API Key:
        [Google AI Studio](https://makersuite.google.com/app/apikey)
        """)
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i Google AI Studio")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2 = st.tabs(["üìÑ PDF to LaTeX", "üñºÔ∏è Image to LaTeX"])
    
    # Kh·ªüi t·∫°o API
    try:
        gemini_api = GeminiAPI(api_key)
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o API: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_pdf:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview
                        for img, page_num in pdf_images[:3]:
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 3:
                            st.info(f"... v√† {len(pdf_images) - 3} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T·∫°o prompt cho Gemini
                            prompt = """
H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng $${...}$$ cho c√¥ng th·ª©c display
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n

ƒê·ªäNH D·∫†NG OUTPUT:
- Text: vi·∫øt b√¨nh th∆∞·ªùng
- Inline: ${x^2 + y^2}$
- Display: $${\\int_0^1 x dx = \\frac{1}{2}}$$
"""
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX:", combined_latex, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # L∆∞u v√†o session state
                        st.session_state.pdf_latex_content = combined_latex
                        st.session_state.pdf_images = [img for img, _ in pdf_images]
                
                # T·∫°o file Word
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    st.session_state.pdf_images
                                )
                                
                                filename = f"{uploaded_pdf.name.split('.')[0]}_converted.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Tab x·ª≠ l√Ω ·∫£nh
    with tab2:
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_images:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                for i, uploaded_image in enumerate(uploaded_images[:3]):
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                
                if len(uploaded_images) > 3:
                    st.info(f"... v√† {len(uploaded_images) - 3} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        image_bytes = uploaded_image.getvalue()
                        
                        prompt = """
Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng $${...}$$ cho c√¥ng th·ª©c display  
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
"""
                        
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    combined_latex = "\n".join(all_latex_content)
                    
                    st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                    st.text_area("üìù K·∫øt qu·∫£ LaTeX:", combined_latex, height=300)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # L∆∞u v√†o session
                    st.session_state.image_latex_content = combined_latex
                    st.session_state.image_list = [Image.open(img) for img in uploaded_images]
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    st.session_state.image_list
                                )
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name="images_converted.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi PDF v√† ·∫£nh sang LaTeX v·ªõi ƒë·ªô ch√≠nh x√°c cao</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() in line:
                    start_idx = line.find('

def validate_api_key(api_key: str) -> bool:
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa API key"""
    if not api_key or len(api_key) < 20:
        return False
    return re.match(r'^[A-Za-z0-9_-]+$', api_key) is not None

def format_file_size(size_bytes: int) -> str:
    """Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc file sang ƒë·ªãnh d·∫°ng human-readable"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
        
        st.markdown("---")
        st.markdown("""
        ### üìã H∆∞·ªõng d·∫´n:
        1. Nh·∫≠p API key Gemini
        2. Ch·ªçn tab PDF ho·∫∑c ·∫¢nh  
        3. Upload file
        4. Ch·ªù x·ª≠ l√Ω v√† t·∫£i file Word
        
        ### üîë L·∫•y API Key:
        [Google AI Studio](https://makersuite.google.com/app/apikey)
        """)
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i Google AI Studio")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2 = st.tabs(["üìÑ PDF to LaTeX", "üñºÔ∏è Image to LaTeX"])
    
    # Kh·ªüi t·∫°o API
    try:
        gemini_api = GeminiAPI(api_key)
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o API: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_pdf:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview
                        for img, page_num in pdf_images[:3]:
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 3:
                            st.info(f"... v√† {len(pdf_images) - 3} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T·∫°o prompt cho Gemini
                            prompt = """
H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng $${...}$$ cho c√¥ng th·ª©c display
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n

ƒê·ªäNH D·∫†NG OUTPUT:
- Text: vi·∫øt b√¨nh th∆∞·ªùng
- Inline: ${x^2 + y^2}$
- Display: $${\\int_0^1 x dx = \\frac{1}{2}}$$
"""
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX:", combined_latex, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # L∆∞u v√†o session state
                        st.session_state.pdf_latex_content = combined_latex
                        st.session_state.pdf_images = [img for img, _ in pdf_images]
                
                # T·∫°o file Word
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    st.session_state.pdf_images
                                )
                                
                                filename = f"{uploaded_pdf.name.split('.')[0]}_converted.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Tab x·ª≠ l√Ω ·∫£nh
    with tab2:
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_images:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                for i, uploaded_image in enumerate(uploaded_images[:3]):
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                
                if len(uploaded_images) > 3:
                    st.info(f"... v√† {len(uploaded_images) - 3} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        image_bytes = uploaded_image.getvalue()
                        
                        prompt = """
Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng $${...}$$ cho c√¥ng th·ª©c display  
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
"""
                        
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    combined_latex = "\n".join(all_latex_content)
                    
                    st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                    st.text_area("üìù K·∫øt qu·∫£ LaTeX:", combined_latex, height=300)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # L∆∞u v√†o session
                    st.session_state.image_latex_content = combined_latex
                    st.session_state.image_list = [Image.open(img) for img in uploaded_images]
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    st.session_state.image_list
                                )
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name="images_converted.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi PDF v√† ·∫£nh sang LaTeX v·ªõi ƒë·ªô ch√≠nh x√°c cao</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main())
                    if start_idx != -1:
                        end_idx = line.find('

def validate_api_key(api_key: str) -> bool:
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa API key"""
    if not api_key or len(api_key) < 20:
        return False
    return re.match(r'^[A-Za-z0-9_-]+$', api_key) is not None

def format_file_size(size_bytes: int) -> str:
    """Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc file sang ƒë·ªãnh d·∫°ng human-readable"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
        
        st.markdown("---")
        st.markdown("""
        ### üìã H∆∞·ªõng d·∫´n:
        1. Nh·∫≠p API key Gemini
        2. Ch·ªçn tab PDF ho·∫∑c ·∫¢nh  
        3. Upload file
        4. Ch·ªù x·ª≠ l√Ω v√† t·∫£i file Word
        
        ### üîë L·∫•y API Key:
        [Google AI Studio](https://makersuite.google.com/app/apikey)
        """)
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i Google AI Studio")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2 = st.tabs(["üìÑ PDF to LaTeX", "üñºÔ∏è Image to LaTeX"])
    
    # Kh·ªüi t·∫°o API
    try:
        gemini_api = GeminiAPI(api_key)
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o API: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_pdf:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview
                        for img, page_num in pdf_images[:3]:
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 3:
                            st.info(f"... v√† {len(pdf_images) - 3} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T·∫°o prompt cho Gemini
                            prompt = """
H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng $${...}$$ cho c√¥ng th·ª©c display
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n

ƒê·ªäNH D·∫†NG OUTPUT:
- Text: vi·∫øt b√¨nh th∆∞·ªùng
- Inline: ${x^2 + y^2}$
- Display: $${\\int_0^1 x dx = \\frac{1}{2}}$$
"""
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX:", combined_latex, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # L∆∞u v√†o session state
                        st.session_state.pdf_latex_content = combined_latex
                        st.session_state.pdf_images = [img for img, _ in pdf_images]
                
                # T·∫°o file Word
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    st.session_state.pdf_images
                                )
                                
                                filename = f"{uploaded_pdf.name.split('.')[0]}_converted.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Tab x·ª≠ l√Ω ·∫£nh
    with tab2:
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_images:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                for i, uploaded_image in enumerate(uploaded_images[:3]):
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                
                if len(uploaded_images) > 3:
                    st.info(f"... v√† {len(uploaded_images) - 3} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        image_bytes = uploaded_image.getvalue()
                        
                        prompt = """
Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng $${...}$$ cho c√¥ng th·ª©c display  
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
"""
                        
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    combined_latex = "\n".join(all_latex_content)
                    
                    st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                    st.text_area("üìù K·∫øt qu·∫£ LaTeX:", combined_latex, height=300)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # L∆∞u v√†o session
                    st.session_state.image_latex_content = combined_latex
                    st.session_state.image_list = [Image.open(img) for img in uploaded_images]
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    st.session_state.image_list
                                )
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name="images_converted.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi PDF v√† ·∫£nh sang LaTeX v·ªõi ƒë·ªô ch√≠nh x√°c cao</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main(), start_idx + 1)
                        if end_idx != -1:
                            if start_idx > 0:
                                p.add_run(line[:start_idx])
                            
                            equation = line[start_idx+1:end_idx]
                            eq_run = p.add_run(f"[{equation}]")
                            eq_run.font.italic = True
                            
                            line = line[end_idx+1:]
                        else:
                            break
                    else:
                        break
                
                if line.strip():
                    p.add_run(line)
            else:
                doc.add_paragraph(line)
        
        # Th√™m ·∫£nh g·ªëc n·∫øu c√≥ (fallback)
        if images and not extracted_figures:
            doc.add_page_break()
            doc.add_heading('H√¨nh ·∫£nh g·ªëc', level=1)
            
            for i, img in enumerate(images):
                try:
                    doc.add_heading(f'H√¨nh {i+1}', level=2)
                    
                    if img.mode in ('RGBA', 'LA', 'P'):
                        img = img.convert('RGB')
                    
                    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
                        img.save(tmp.name, 'PNG')
                        try:
                            doc.add_picture(tmp.name, width=doc.sections[0].page_width * 0.8)
                        except Exception:
                            doc.add_paragraph(f"[H√¨nh ·∫£nh {i+1} - Kh√¥ng th·ªÉ hi·ªÉn th·ªã]")
                        os.unlink(tmp.name)
                except Exception:
                    doc.add_paragraph(f"[L·ªói hi·ªÉn th·ªã h√¨nh {i+1}]")
        
        # L∆∞u document v√†o buffer
        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        return buffer
    
    @staticmethod
    def _insert_extracted_image(doc, img_name, extracted_figures, caption_prefix):
        """Ch√®n ·∫£nh ƒë√£ t√°ch v√†o Word document"""
        if not extracted_figures:
            doc.add_paragraph(f"[{caption_prefix}: {img_name} - Kh√¥ng t√¨m th·∫•y]")
            return
        
        # T√¨m ·∫£nh trong danh s√°ch ƒë√£ t√°ch
        target_figure = None
        for fig in extracted_figures:
            if fig['name'] == img_name:
                target_figure = fig
                break
        
        if not target_figure:
            doc.add_paragraph(f"[{caption_prefix}: {img_name} - Kh√¥ng t√¨m th·∫•y]")
            return
        
        try:
            # Th√™m heading
            doc.add_heading(f"{caption_prefix}: {img_name}", level=3)
            
            # Decode base64 v√† ch√®n ·∫£nh
            img_data = base64.b64decode(target_figure['base64'])
            img_pil = Image.open(io.BytesIO(img_data))
            
            if img_pil.mode in ('RGBA', 'LA', 'P'):
                img_pil = img_pil.convert('RGB')
            
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
                img_pil.save(tmp.name, 'PNG')
                try:
                    # T√≠nh k√≠ch th∆∞·ªõc ph√π h·ª£p
                    max_width = doc.sections[0].page_width * 0.7
                    doc.add_picture(tmp.name, width=max_width)
                except Exception:
                    doc.add_paragraph(f"[Kh√¥ng th·ªÉ hi·ªÉn th·ªã {img_name}]")
                os.unlink(tmp.name)
        
        except Exception as e:
            doc.add_paragraph(f"[L·ªói hi·ªÉn th·ªã {img_name}: {str(e)}]")

def validate_api_key(api_key: str) -> bool:
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa API key"""
    if not api_key or len(api_key) < 20:
        return False
    return re.match(r'^[A-Za-z0-9_-]+$', api_key) is not None

def format_file_size(size_bytes: int) -> str:
    """Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc file sang ƒë·ªãnh d·∫°ng human-readable"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
        
        st.markdown("---")
        st.markdown("""
        ### üìã H∆∞·ªõng d·∫´n:
        1. Nh·∫≠p API key Gemini
        2. Ch·ªçn tab PDF ho·∫∑c ·∫¢nh  
        3. Upload file
        4. Ch·ªù x·ª≠ l√Ω v√† t·∫£i file Word
        
        ### üîë L·∫•y API Key:
        [Google AI Studio](https://makersuite.google.com/app/apikey)
        """)
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i Google AI Studio")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2 = st.tabs(["üìÑ PDF to LaTeX", "üñºÔ∏è Image to LaTeX"])
    
    # Kh·ªüi t·∫°o API
    try:
        gemini_api = GeminiAPI(api_key)
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o API: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_pdf:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview
                        for img, page_num in pdf_images[:3]:
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 3:
                            st.info(f"... v√† {len(pdf_images) - 3} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T·∫°o prompt cho Gemini
                            prompt = """
H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng $${...}$$ cho c√¥ng th·ª©c display
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n

ƒê·ªäNH D·∫†NG OUTPUT:
- Text: vi·∫øt b√¨nh th∆∞·ªùng
- Inline: ${x^2 + y^2}$
- Display: $${\\int_0^1 x dx = \\frac{1}{2}}$$
"""
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX:", combined_latex, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # L∆∞u v√†o session state
                        st.session_state.pdf_latex_content = combined_latex
                        st.session_state.pdf_images = [img for img, _ in pdf_images]
                
                # T·∫°o file Word
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    st.session_state.pdf_images
                                )
                                
                                filename = f"{uploaded_pdf.name.split('.')[0]}_converted.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Tab x·ª≠ l√Ω ·∫£nh
    with tab2:
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_images:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                for i, uploaded_image in enumerate(uploaded_images[:3]):
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                
                if len(uploaded_images) > 3:
                    st.info(f"... v√† {len(uploaded_images) - 3} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        image_bytes = uploaded_image.getvalue()
                        
                        prompt = """
Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.

Y√äU C·∫¶U:
1. S·ª≠ d·ª•ng ${...}$ cho c√¥ng th·ª©c inline
2. S·ª≠ d·ª•ng $${...}$$ cho c√¥ng th·ª©c display  
3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
"""
                        
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    combined_latex = "\n".join(all_latex_content)
                    
                    st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                    st.text_area("üìù K·∫øt qu·∫£ LaTeX:", combined_latex, height=300)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # L∆∞u v√†o session
                    st.session_state.image_latex_content = combined_latex
                    st.session_state.image_list = [Image.open(img) for img in uploaded_images]
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    st.session_state.image_list
                                )
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name="images_converted.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi PDF v√† ·∫£nh sang LaTeX v·ªõi ƒë·ªô ch√≠nh x√°c cao</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
