import streamlit as st
import requests
import base64
import io
import json
from PIL import Image, ImageDraw, ImageFont
import fitz  # PyMuPDF
from docx import Document
import tempfile
import os
import re
import time
import cv2
import numpy as np

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="PDF/Image to LaTeX Converter - Enhanced",
    page_icon="üìù",
    layout="wide"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #2E86AB;
        font-size: 2.5rem;
        margin-bottom: 2rem;
    }
    .latex-output {
        background-color: #f4f4f4;
        padding: 1rem;
        border-radius: 5px;
        font-family: 'Courier New', monospace;
        border-left: 4px solid #2E86AB;
    }
    .success-message {
        color: #28a745;
        font-weight: bold;
    }
    .error-message {
        color: #dc3545;
        font-weight: bold;
    }
    .extracted-image {
        border: 2px solid #2E86AB;
        border-radius: 8px;
        margin: 10px 0;
        padding: 5px;
    }
    .image-info {
        background-color: #e8f4f8;
        padding: 8px;
        border-radius: 4px;
        margin: 5px 0;
        font-size: 0.9em;
    }
</style>
""", unsafe_allow_html=True)

class AdvancedImageExtractor:
    """
    Class c·∫£i ti·∫øn ƒë·ªÉ t√°ch ·∫£nh/b·∫£ng t·ª´ ·∫£nh g·ªëc v·ªõi ƒë·ªô ch√≠nh x√°c cao
    """
    
    def __init__(self):
        self.min_area_ratio = 0.005    # Di·ªán t√≠ch t·ªëi thi·ªÉu (% c·ªßa ·∫£nh g·ªëc)
        self.min_area_abs = 1500       # Di·ªán t√≠ch t·ªëi thi·ªÉu (pixel)
        self.min_width = 50            # Chi·ªÅu r·ªông t·ªëi thi·ªÉu
        self.min_height = 50           # Chi·ªÅu cao t·ªëi thi·ªÉu
        self.max_figures = 10          # S·ªë l∆∞·ª£ng ·∫£nh t·ªëi ƒëa
        self.padding = 5               # Padding xung quanh ·∫£nh c·∫Øt
    
    def extract_figures_and_tables(self, image_bytes):
        """T√°ch ·∫£nh v√† b·∫£ng t·ª´ ·∫£nh g·ªëc v·ªõi thu·∫≠t to√°n c·∫£i ti·∫øn"""
        # 1. ƒê·ªçc ·∫£nh
        img_pil = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        img = np.array(img_pil)
        h, w = img.shape[:2]
        
        # 2. Ti·ªÅn x·ª≠ l√Ω ·∫£nh nhi·ªÅu b∆∞·ªõc
        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
        
        # Kh·ª≠ nhi·ªÖu
        gray = cv2.medianBlur(gray, 3)
        gray = cv2.GaussianBlur(gray, (3, 3), 0)
        
        # TƒÉng c∆∞·ªùng ƒë·ªô t∆∞∆°ng ph·∫£n adaptive
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
        gray = clahe.apply(gray)
        
        # 3. Ph√°t hi·ªán c·∫°nh v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
        # Ph∆∞∆°ng ph√°p 1: Adaptive threshold
        thresh1 = cv2.adaptiveThreshold(
            gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
            cv2.THRESH_BINARY_INV, 11, 2
        )
        
        # Ph∆∞∆°ng ph√°p 2: Canny edge detection
        edges = cv2.Canny(gray, 50, 150, apertureSize=3)
        
        # Ph∆∞∆°ng ph√°p 3: Morphological operations
        kernel_rect = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
        thresh2 = cv2.morphologyEx(thresh1, cv2.MORPH_CLOSE, kernel_rect)
        
        # K·∫øt h·ª£p c√°c ph∆∞∆°ng ph√°p
        combined = cv2.bitwise_or(thresh2, edges)
        
        # 4. L√†m d√†y c√°c ƒë∆∞·ªùng vi·ªÅn
        kernel = np.ones((2, 2), np.uint8)
        combined = cv2.dilate(combined, kernel, iterations=1)
        
        # 5. T√¨m c√°c contour v·ªõi hierarchy
        contours, hierarchy = cv2.findContours(
            combined, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE
        )
        
        # 6. L·ªçc v√† ph√¢n lo·∫°i c√°c v√πng v·ªõi nhi·ªÅu ti√™u ch√≠
        candidates = []
        for i, cnt in enumerate(contours):
            # T√≠nh to√°n bounding box
            x, y, ww, hh = cv2.boundingRect(cnt)
            area = ww * hh
            area_ratio = area / (w * h)
            aspect_ratio = ww / (hh + 1e-6)
            
            # L·ªçc theo k√≠ch th∆∞·ªõc c∆° b·∫£n
            if (area < self.min_area_abs or 
                area_ratio < self.min_area_ratio or 
                area_ratio > 0.7):
                continue
            
            if ww < self.min_width or hh < self.min_height:
                continue
            
            # L·ªçc aspect ratio h·ª£p l√Ω
            if not (0.1 < aspect_ratio < 15.0):
                continue
            
            # Lo·∫°i b·ªè v√πng ·ªü r√¨a ·∫£nh
            margin = 0.02
            if (x < margin*w or y < margin*h or 
                (x+ww) > (1-margin)*w or (y+hh) > (1-margin)*h):
                continue
            
            # T√≠nh c√°c ƒë·∫∑c tr∆∞ng h√¨nh h·ªçc
            hull = cv2.convexHull(cnt)
            hull_area = cv2.contourArea(hull)
            contour_area = cv2.contourArea(cnt)
            
            if hull_area == 0:
                continue
                
            solidity = float(contour_area) / hull_area
            if solidity < 0.3:  # Lo·∫°i b·ªè shape qu√° ph·ª©c t·∫°p
                continue
            
            # T√≠nh extent (t·ª∑ l·ªá fill bounding box)
            extent = float(contour_area) / area
            if extent < 0.2:  # Lo·∫°i b·ªè shape qu√° th∆∞a
                continue
            
            # Ph√¢n lo·∫°i b·∫£ng vs h√¨nh d·ª±a tr√™n nhi·ªÅu ti√™u ch√≠
            is_table = self._classify_as_table(x, y, ww, hh, w, h, cnt, gray)
            
            # T√≠nh to√°n ƒëi·ªÉm confidence
            confidence = self._calculate_confidence(
                area_ratio, aspect_ratio, solidity, extent, ww, hh, w, h
            )
            
            candidates.append({
                "area": area,
                "x0": x, "y0": y, "x1": x+ww, "y1": y+hh,
                "width": ww, "height": hh,
                "is_table": is_table,
                "confidence": confidence,
                "aspect_ratio": aspect_ratio,
                "solidity": solidity,
                "extent": extent,
                "bbox": (x, y, ww, hh),
                "contour": cnt
            })
        
        # 7. S·∫Øp x·∫øp theo confidence v√† area
        candidates = sorted(candidates, key=lambda f: f['confidence'], reverse=True)
        candidates = self._filter_overlapping_boxes(candidates)
        candidates = candidates[:self.max_figures]
        
        # 8. S·∫Øp x·∫øp l·∫°i theo v·ªã tr√≠ (top-to-bottom, left-to-right)
        candidates = sorted(candidates, key=lambda box: (box["y0"], box["x0"]))
        
        # 9. T·∫°o danh s√°ch ·∫£nh k·∫øt qu·∫£ v·ªõi padding
        final_figures = []
        img_idx = 0
        table_idx = 0
        
        for fig_data in candidates:
            # C·∫Øt ·∫£nh v·ªõi padding
            x0 = max(0, fig_data["x0"] - self.padding)
            y0 = max(0, fig_data["y0"] - self.padding)
            x1 = min(w, fig_data["x1"] + self.padding)
            y1 = min(h, fig_data["y1"] + self.padding)
            
            crop = img[y0:y1, x0:x1]
            
            if crop.size == 0:
                continue
            
            # Chuy·ªÉn th√†nh base64
            buf = io.BytesIO()
            Image.fromarray(crop).save(buf, format="JPEG", quality=95)
            b64 = base64.b64encode(buf.getvalue()).decode()
            
            # ƒê·∫∑t t√™n file
            if fig_data["is_table"]:
                name = f"table-{table_idx+1}.jpeg"
                table_idx += 1
            else:
                name = f"img-{img_idx+1}.jpeg"
                img_idx += 1
            
            final_figures.append({
                "name": name,
                "base64": b64,
                "is_table": fig_data["is_table"],
                "bbox": (x0, y0, x1-x0, y1-y0),
                "original_bbox": fig_data["bbox"],
                "confidence": fig_data["confidence"],
                "aspect_ratio": fig_data["aspect_ratio"],
                "area": fig_data["area"]
            })
        
        return final_figures, h, w
    
    def _classify_as_table(self, x, y, w, h, img_w, img_h, contour, gray_img):
        """Ph√¢n lo·∫°i xem v√πng n√†y l√† b·∫£ng hay h√¨nh ·∫£nh"""
        aspect_ratio = w / (h + 1e-6)
        
        # Ki·ªÉm tra t·ª∑ l·ªá v√† k√≠ch th∆∞·ªõc cho b·∫£ng
        size_score = 0
        if w > 0.3 * img_w:  # B·∫£ng th∆∞·ªùng r·ªông
            size_score += 2
        if h > 0.1 * img_h and h < 0.6 * img_h:  # Chi·ªÅu cao v·ª´a ph·∫£i
            size_score += 1
        
        # Ki·ªÉm tra aspect ratio
        ratio_score = 0
        if 2.0 < aspect_ratio < 8.0:  # B·∫£ng th∆∞·ªùng d√†i h∆°n cao
            ratio_score += 2
        elif 1.2 < aspect_ratio < 12.0:
            ratio_score += 1
        
        # Ki·ªÉm tra ƒë∆∞·ªùng k·∫ª ngang trong v√πng
        roi = gray_img[y:y+h, x:x+w]
        horizontal_lines = self._detect_horizontal_lines(roi)
        line_score = min(horizontal_lines * 0.5, 2)
        
        total_score = size_score + ratio_score + line_score
        return total_score >= 3
    
    def _detect_horizontal_lines(self, roi):
        """Ph√°t hi·ªán ƒë∆∞·ªùng k·∫ª ngang trong v√πng (d·∫•u hi·ªáu c·ªßa b·∫£ng)"""
        if roi.shape[0] < 10 or roi.shape[1] < 10:
            return 0
        
        # T·∫°o kernel d√†i ngang ƒë·ªÉ detect ƒë∆∞·ªùng k·∫ª ngang
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (roi.shape[1]//3, 1))
        thresh = cv2.threshold(roi, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
        horizontal_lines = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)
        
        # ƒê·∫øm s·ªë ƒë∆∞·ªùng k·∫ª
        lines = cv2.HoughLinesP(horizontal_lines, 1, np.pi/180, 
                               threshold=roi.shape[1]//4, minLineLength=roi.shape[1]//3)
        
        return len(lines) if lines is not None else 0
    
    def _calculate_confidence(self, area_ratio, aspect_ratio, solidity, extent, w, h, img_w, img_h):
        """T√≠nh ƒëi·ªÉm confidence cho vi·ªác c·∫Øt ·∫£nh"""
        confidence = 0
        
        # ƒêi·ªÉm d·ª±a tr√™n k√≠ch th∆∞·ªõc
        if 0.01 < area_ratio < 0.5:
            confidence += 30
        elif 0.005 < area_ratio < 0.01:
            confidence += 20
        
        # ƒêi·ªÉm d·ª±a tr√™n aspect ratio
        if 0.5 < aspect_ratio < 3.0:
            confidence += 25
        elif 0.2 < aspect_ratio < 8.0:
            confidence += 15
        
        # ƒêi·ªÉm d·ª±a tr√™n solidity (ƒë·ªô ƒë·∫∑c)
        if solidity > 0.8:
            confidence += 20
        elif solidity > 0.6:
            confidence += 15
        
        # ƒêi·ªÉm d·ª±a tr√™n extent
        if extent > 0.6:
            confidence += 15
        elif extent > 0.4:
            confidence += 10
        
        # ƒêi·ªÉm d·ª±a tr√™n v·ªã tr√≠ (∆∞u ti√™n v√πng trung t√¢m)
        center_x, center_y = w//2, h//2
        if 0.2 * img_w < center_x < 0.8 * img_w and 0.2 * img_h < center_y < 0.8 * img_h:
            confidence += 10
        
        return confidence
    
    def _filter_overlapping_boxes(self, candidates):
        """Lo·∫°i b·ªè c√°c box tr√πng l·∫∑p"""
        filtered = []
        
        for i, box in enumerate(candidates):
            is_duplicate = False
            x0, y0, x1, y1 = box['x0'], box['y0'], box['x1'], box['y1']
            
            for j, other in enumerate(filtered):
                ox0, oy0, ox1, oy1 = other['x0'], other['y0'], other['x1'], other['y1']
                
                # T√≠nh IoU (Intersection over Union)
                intersection_area = max(0, min(x1, ox1) - max(x0, ox0)) * max(0, min(y1, oy1) - max(y0, oy0))
                union_area = (x1-x0)*(y1-y0) + (ox1-ox0)*(oy1-oy0) - intersection_area
                
                if union_area > 0:
                    iou = intersection_area / union_area
                    if iou > 0.3:  # N·∫øu overlap > 30%
                        is_duplicate = True
                        break
            
            if not is_duplicate:
                filtered.append(box)
        
        return filtered
    
    def create_debug_image(self, image_bytes, figures):
        """T·∫°o ·∫£nh debug hi·ªÉn th·ªã c√°c v√πng ƒë√£ c·∫Øt"""
        img_pil = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        draw = ImageDraw.Draw(img_pil)
        
        colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray']
        
        for i, fig in enumerate(figures):
            color = colors[i % len(colors)]
            bbox = fig['original_bbox']
            x, y, w, h = bbox
            
            # V·∫Ω khung
            draw.rectangle([x, y, x+w, y+h], outline=color, width=3)
            
            # V·∫Ω label
            label = f"{fig['name']} ({fig['confidence']:.0f}%)"
            draw.text((x, y-20), label, fill=color)
        
        return img_pil
    
    def insert_figures_into_text(self, text, figures, img_h, img_w):
        """Ch√®n ·∫£nh/b·∫£ng v√†o ƒë√∫ng v·ªã tr√≠ trong vƒÉn b·∫£n v·ªõi logic c·∫£i thi·ªán"""
        lines = self._preprocess_text_lines(text)
        
        figures_sorted = sorted(
            [fig for fig in figures if fig.get('bbox')],
            key=lambda f: (f['bbox'][1], f['bbox'][0])  # Sort by y, then x
        )
        
        processed_lines = []
        used_figures = set()
        fig_idx = 0
        
        for i, line in enumerate(lines):
            processed_lines.append(line)
            
            inserted = self._try_insert_figure(
                line, figures_sorted, used_figures, 
                processed_lines, fig_idx
            )
            
            if isinstance(inserted, int):
                fig_idx = inserted
        
        # Ch√®n c√°c ·∫£nh c√≤n l·∫°i
        processed_lines = self._insert_remaining_figures(
            processed_lines, figures_sorted, used_figures, fig_idx
        )
        
        return '\n'.join(processed_lines)
    
    def _preprocess_text_lines(self, text):
        """Ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n th√†nh c√°c d√≤ng"""
        lines = []
        current_line = ""
        
        for line in text.split('\n'):
            stripped = line.strip()
            if stripped:
                if current_line:
                    current_line += " " + stripped
                else:
                    current_line = stripped
            else:
                if current_line:
                    lines.append(current_line)
                    current_line = ""
                if lines:  # Ch·ªâ th√™m d√≤ng tr·ªëng n·∫øu ƒë√£ c√≥ content
                    lines.append('')
        
        if current_line:
            lines.append(current_line)
        
        return lines
    
    def _try_insert_figure(self, line, figures_sorted, used_figures, processed_lines, fig_idx):
        """Th·ª≠ ch√®n ·∫£nh/b·∫£ng d·ª±a tr√™n t·ª´ kh√≥a c·∫£i thi·ªán"""
        lower_line = line.lower()
        
        # T·ª´ kh√≥a cho b·∫£ng (m·ªü r·ªông)
        table_keywords = [
            "b·∫£ng", "b·∫£ng gi√° tr·ªã", "b·∫£ng bi·∫øn thi√™n", "b·∫£ng t·∫ßn s·ªë", 
            "b·∫£ng s·ªë li·ªáu", "table", "cho b·∫£ng", "theo b·∫£ng", "b·∫£ng sau",
            "quan s√°t b·∫£ng", "t·ª´ b·∫£ng", "d·ª±a v√†o b·∫£ng"
        ]
        
        # T·ª´ kh√≥a cho h√¨nh (m·ªü r·ªông)  
        image_keywords = [
            "h√¨nh v·∫Ω", "h√¨nh b√™n", "(h√¨nh", "xem h√¨nh", "ƒë·ªì th·ªã", 
            "bi·ªÉu ƒë·ªì", "minh h·ªça", "h√¨nh", "figure", "chart", "graph",
            "cho h√¨nh", "theo h√¨nh", "h√¨nh sau", "quan s√°t h√¨nh",
            "t·ª´ h√¨nh", "d·ª±a v√†o h√¨nh", "s∆° ƒë·ªì"
        ]
        
        # Ki·ªÉm tra b·∫£ng tr∆∞·ªõc
        if any(keyword in lower_line for keyword in table_keywords):
            for j in range(fig_idx, len(figures_sorted)):
                fig = figures_sorted[j]
                if fig['is_table'] and fig['name'] not in used_figures:
                    tag = f"\n[B·∫¢NG: {fig['name']}]\n"
                    processed_lines.append(tag)
                    used_figures.add(fig['name'])
                    return j + 1
        
        # Ki·ªÉm tra h√¨nh ·∫£nh
        elif any(keyword in lower_line for keyword in image_keywords):
            for j in range(fig_idx, len(figures_sorted)):
                fig = figures_sorted[j]
                if not fig['is_table'] and fig['name'] not in used_figures:
                    tag = f"\n[H√åNH: {fig['name']}]\n"
                    processed_lines.append(tag)
                    used_figures.add(fig['name'])
                    return j + 1
        
        return fig_idx
    
    def _insert_remaining_figures(self, processed_lines, figures_sorted, used_figures, fig_idx):
        """Ch√®n c√°c ·∫£nh c√≤n l·∫°i v√†o ƒë·∫ßu c√¢u h·ªèi"""
        # Pattern ƒë·ªÉ nh·∫≠n di·ªán c√¢u h·ªèi
        question_patterns = [
            r"^(C√¢u|Question|Problem)\s*\d+",
            r"^\d+[\.\)]\s*",
            r"^[A-D][\.\)]\s*",
            r"^[a-d][\.\)]\s*"
        ]
        
        for i, line in enumerate(processed_lines):
            # Ki·ªÉm tra xem c√≥ ph·∫£i ƒë·∫ßu c√¢u h·ªèi kh√¥ng
            is_question = any(re.match(pattern, line.strip()) for pattern in question_patterns)
            
            if is_question and fig_idx < len(figures_sorted):
                # Ki·ªÉm tra d√≤ng ti·∫øp theo ƒë√£ c√≥ ·∫£nh ch∆∞a
                next_line = processed_lines[i+1] if i+1 < len(processed_lines) else ""
                has_image = re.match(r"\[(H√åNH|B·∫¢NG):.*\]", next_line.strip())
                
                if not has_image:
                    # T√¨m ·∫£nh ch∆∞a s·ª≠ d·ª•ng
                    while (fig_idx < len(figures_sorted) and 
                           figures_sorted[fig_idx]['name'] in used_figures):
                        fig_idx += 1
                    
                    if fig_idx < len(figures_sorted):
                        fig = figures_sorted[fig_idx]
                        tag = (f"\n[B·∫¢NG: {fig['name']}]\n" if fig['is_table'] 
                               else f"\n[H√åNH: {fig['name']}]\n")
                        processed_lines.insert(i+1, tag)
                        used_figures.add(fig['name'])
                        fig_idx += 1
        
        return processed_lines

class GeminiAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    
    def encode_image(self, image_data: bytes) -> str:
        """M√£ h√≥a ·∫£nh th√†nh base64"""
        return base64.b64encode(image_data).decode('utf-8')
    
    def convert_to_latex(self, content_data: bytes, content_type: str, prompt: str) -> str:
        """Chuy·ªÉn ƒë·ªïi n·ªôi dung sang LaTeX s·ª≠ d·ª•ng Gemini API"""
        headers = {"Content-Type": "application/json"}
        
        if content_type.startswith('image/'):
            mime_type = content_type
        else:
            mime_type = "image/png"
        
        encoded_content = self.encode_image(content_data)
        
        payload = {
            "contents": [
                {
                    "parts": [
                        {"text": prompt},
                        {
                            "inline_data": {
                                "mime_type": mime_type,
                                "data": encoded_content
                            }
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.1,
                "topK": 1,
                "topP": 0.8,
                "maxOutputTokens": 8192,
            }
        }
        
        try:
            response = requests.post(
                f"{self.base_url}?key={self.api_key}",
                headers=headers,
                json=payload,
                timeout=90
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and len(result['candidates']) > 0:
                    content = result['candidates'][0]['content']['parts'][0]['text']
                    return content.strip()
                else:
                    raise Exception("API kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá")
            elif response.status_code == 401:
                raise Exception("API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
            elif response.status_code == 429:
                raise Exception("ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n rate limit")
            else:
                raise Exception(f"API Error {response.status_code}: {response.text}")
        
        except requests.exceptions.Timeout:
            raise Exception("Request timeout - th·ª≠ l·∫°i sau √≠t ph√∫t")
        except requests.exceptions.ConnectionError:
            raise Exception("L·ªói k·∫øt n·ªëi m·∫°ng")
        except Exception as e:
            raise Exception(str(e))

class PDFProcessor:
    @staticmethod
    def extract_images_and_text(pdf_file):
        """Tr√≠ch xu·∫•t ·∫£nh v√† chuy·ªÉn ƒë·ªïi trang PDF th√†nh ·∫£nh"""
        pdf_document = fitz.open(stream=pdf_file.read(), filetype="pdf")
        images = []
        
        for page_num in range(pdf_document.page_count):
            page = pdf_document[page_num]
            mat = fitz.Matrix(2.5, 2.5)  # TƒÉng ƒë·ªô ph√¢n gi·∫£i
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            img = Image.open(io.BytesIO(img_data))
            images.append((img, page_num + 1))
        
        pdf_document.close()
        return images

class WordExporter:
    @staticmethod
    def create_word_document(latex_content: str, extracted_figures=None, images=None) -> io.BytesIO:
        """T·∫°o file Word v·ªõi equations t·ª´ LaTeX v√† ·∫£nh ƒë√£ t√°ch"""
        doc = Document()
        
        # Th√™m ti√™u ƒë·ªÅ
        title = doc.add_heading('T√†i li·ªáu ƒë√£ chuy·ªÉn ƒë·ªïi t·ª´ PDF/·∫¢nh', 0)
        title.alignment = 1
        
        # Th√™m th√¥ng tin
        doc.add_paragraph(f"ƒê∆∞·ª£c t·∫°o b·ªüi PDF/Image to LaTeX Converter Enhanced")
        doc.add_paragraph(f"Th·ªùi gian: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        doc.add_paragraph("")
        
        # X·ª≠ l√Ω n·ªôi dung LaTeX
        lines = latex_content.split('\n')
        
        for line in lines:
            line = line.strip()
            
            # X·ª≠ l√Ω tag ·∫£nh/b·∫£ng ƒë√£ t√°ch
            if line.startswith('[H√åNH:') and line.endswith(']'):
                img_name = line.replace('[H√åNH:', '').replace(']', '').strip()
                WordExporter._insert_extracted_image(doc, img_name, extracted_figures, "H√¨nh minh h·ªça")
                continue
            elif line.startswith('[B·∫¢NG:') and line.endswith(']'):
                img_name = line.replace('[B·∫¢NG:', '').replace(']', '').strip()
                WordExporter._insert_extracted_image(doc, img_name, extracted_figures, "B·∫£ng s·ªë li·ªáu")
                continue
            
            # Skip comments
            if line.startswith('<!--') and line.endswith('-->'):
                if 'Trang' in line or '·∫¢nh' in line:
                    doc.add_heading(line.replace('<!--', '').replace('-->', '').strip(), level=2)
                continue
            
            if not line:
                continue
            
            # X·ª≠ l√Ω c√°c c√¥ng th·ª©c LaTeX
            if '$$' in line or '$' in line:
                p = doc.add_paragraph()
                
                # X·ª≠ l√Ω display equations ($$...$$) tr∆∞·ªõc
                while '$$' in line:
                    start_idx = line.find('$$')
                    if start_idx != -1:
                        end_idx = line.find('$$', start_idx + 2)
                        if end_idx != -1:
                            if start_idx > 0:
                                p.add_run(line[:start_idx])
                            
                            equation = line[start_idx+2:end_idx]
                            eq_run = p.add_run(f"\n[EQUATION: {equation}]\n")
                            eq_run.font.bold = True
                            
                            line = line[end_idx+2:]
                        else:
                            break
                    else:
                        break
                
                # X·ª≠ l√Ω inline equations ($...$)
                while '$' in line:
                    start_idx = line.find('$')
                    if start_idx != -1:
                        end_idx = line.find('$', start_idx + 1)
                        if end_idx != -1:
                            if start_idx > 0:
                                p.add_run(line[:start_idx])
                            
                            equation = line[start_idx+1:end_idx]
                            eq_run = p.add_run(f"[{equation}]")
                            eq_run.font.italic = True
                            
                            line = line[end_idx+1:]
                        else:
                            break
                    else:
                        break
                
                if line.strip():
                    p.add_run(line)
            else:
                doc.add_paragraph(line)
        
        # Th√™m ·∫£nh g·ªëc n·∫øu c√≥ (fallback)
        if images and not extracted_figures:
            doc.add_page_break()
            doc.add_heading('H√¨nh ·∫£nh g·ªëc', level=1)
            
            for i, img in enumerate(images):
                try:
                    doc.add_heading(f'H√¨nh {i+1}', level=2)
                    
                    if img.mode in ('RGBA', 'LA', 'P'):
                        img = img.convert('RGB')
                    
                    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
                        img.save(tmp.name, 'PNG')
                        try:
                            doc.add_picture(tmp.name, width=doc.sections[0].page_width * 0.8)
                        except Exception:
                            doc.add_paragraph(f"[H√¨nh ·∫£nh {i+1} - Kh√¥ng th·ªÉ hi·ªÉn th·ªã]")
                        os.unlink(tmp.name)
                except Exception:
                    doc.add_paragraph(f"[L·ªói hi·ªÉn th·ªã h√¨nh {i+1}]")
        
        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        return buffer
    
    @staticmethod
    def _insert_extracted_image(doc, img_name, extracted_figures, caption_prefix):
        """Ch√®n ·∫£nh ƒë√£ t√°ch v√†o Word document"""
        if not extracted_figures:
            doc.add_paragraph(f"[{caption_prefix}: {img_name} - Kh√¥ng t√¨m th·∫•y]")
            return
        
        target_figure = None
        for fig in extracted_figures:
            if fig['name'] == img_name:
                target_figure = fig
                break
        
        if not target_figure:
            doc.add_paragraph(f"[{caption_prefix}: {img_name} - Kh√¥ng t√¨m th·∫•y]")
            return
        
        try:
            doc.add_heading(f"{caption_prefix}: {img_name}", level=3)
            
            img_data = base64.b64decode(target_figure['base64'])
            img_pil = Image.open(io.BytesIO(img_data))
            
            if img_pil.mode in ('RGBA', 'LA', 'P'):
                img_pil = img_pil.convert('RGB')
            
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
                img_pil.save(tmp.name, 'PNG')
                try:
                    max_width = doc.sections[0].page_width * 0.8
                    doc.add_picture(tmp.name, width=max_width)
                except Exception:
                    doc.add_paragraph(f"[Kh√¥ng th·ªÉ hi·ªÉn th·ªã {img_name}]")
                os.unlink(tmp.name)
        
        except Exception as e:
            doc.add_paragraph(f"[L·ªói hi·ªÉn th·ªã {img_name}: {str(e)}]")

def validate_api_key(api_key: str) -> bool:
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa API key"""
    if not api_key or len(api_key) < 20:
        return False
    return re.match(r'^[A-Za-z0-9_-]+$', api_key) is not None

def format_file_size(size_bytes: int) -> str:
    """Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc file sang ƒë·ªãnh d·∫°ng human-readable"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter - Enhanced</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
        
        st.markdown("---")
        
        # C√†i ƒë·∫∑t t√°ch ·∫£nh n√¢ng cao
        st.subheader("üñºÔ∏è T√°ch ·∫£nh n√¢ng cao")
        enable_extraction = st.checkbox("B·∫≠t t√°ch ·∫£nh/b·∫£ng t·ª± ƒë·ªông", value=True, 
                                       help="T·ª± ƒë·ªông t√°ch v√† ch√®n ·∫£nh/b·∫£ng v√†o ƒë√∫ng v·ªã tr√≠")
        
        if enable_extraction:
            st.write("**C√†i ƒë·∫∑t n√¢ng cao:**")
            min_area = st.slider("Di·ªán t√≠ch t·ªëi thi·ªÉu (%)", 0.1, 3.0, 0.5, 0.1,
                               help="% di·ªán t√≠ch ·∫£nh g·ªëc") / 100
            max_figures = st.slider("S·ªë ·∫£nh t·ªëi ƒëa", 1, 20, 10, 1)
            min_size = st.slider("K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu (px)", 30, 200, 50, 10)
            padding = st.slider("Padding xung quanh (px)", 0, 20, 5, 1)
            
            show_debug = st.checkbox("Hi·ªÉn th·ªã ·∫£nh debug", value=True,
                                   help="Hi·ªÉn th·ªã ·∫£nh v·ªõi c√°c v√πng ƒë√£ ph√°t hi·ªán")
        
        st.markdown("---")
        st.markdown("""
        ### üìã H∆∞·ªõng d·∫´n:
        1. Nh·∫≠p API key Gemini
        2. Ch·ªçn tab PDF ho·∫∑c ·∫¢nh  
        3. Upload file
        4. Ch·ªù x·ª≠ l√Ω v√† t·∫£i file Word
        
        ### üéØ T√≠nh nƒÉng n√¢ng cao:
        - ‚úÖ Thu·∫≠t to√°n c·∫Øt ·∫£nh c·∫£i ti·∫øn
        - ‚úÖ Hi·ªÉn th·ªã ·∫£nh c·∫Øt v·ªõi k√≠ch th∆∞·ªõc l·ªõn
        - ‚úÖ ƒê·ªãnh d·∫°ng chu·∫©n cho c√¢u h·ªèi
        - ‚úÖ Debug mode v·ªõi confidence score
        
        ### üìù ƒê·ªãnh d·∫°ng h·ªó tr·ª£:
        **Tr·∫Øc nghi·ªám 4 ph∆∞∆°ng √°n:**
        ```
        C√¢u X: [n·ªôi dung]
        A. [ƒê√°p √°n]
        B. [ƒê√°p √°n]  
        C. [ƒê√°p √°n]
        D. [ƒê√°p √°n]
        ```
        
        **Tr·∫Øc nghi·ªám ƒë√∫ng sai:**
        ```
        a) [ƒê√°p √°n]
        b) [ƒê√°p √°n]
        c) [ƒê√°p √°n]
        d) [ƒê√°p √°n]
        ```
        
        ### üîë L·∫•y API Key:
        [Google AI Studio](https://makersuite.google.com/app/apikey)
        """)
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i Google AI Studio")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2 = st.tabs(["üìÑ PDF to LaTeX + Enhanced Extract", "üñºÔ∏è Image to LaTeX + Enhanced Extract"])
    
    # Kh·ªüi t·∫°o API v√† ImageExtractor
    try:
        gemini_api = GeminiAPI(api_key)
        if enable_extraction:
            image_extractor = AdvancedImageExtractor()
            image_extractor.min_area_ratio = min_area
            image_extractor.max_figures = max_figures
            image_extractor.min_width = min_size
            image_extractor.min_height = min_size
            image_extractor.padding = padding
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX + T√°ch ·∫£nh n√¢ng cao")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc v√† h√¨nh ·∫£nh"
        )
        
        if uploaded_pdf:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview
                        for img, page_num in pdf_images[:2]:
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 2:
                            st.info(f"... v√† {len(pdf_images) - 2} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF + T√°ch ·∫£nh n√¢ng cao", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        all_extracted_figures = []
                        all_debug_images = []
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T√°ch ·∫£nh/b·∫£ng n·∫øu ƒë∆∞·ª£c b·∫≠t
                            extracted_figures = []
                            if enable_extraction:
                                try:
                                    figures, h, w = image_extractor.extract_figures_and_tables(img_bytes)
                                    extracted_figures = figures
                                    all_extracted_figures.extend(figures)
                                    
                                    # T·∫°o ·∫£nh debug
                                    if show_debug and figures:
                                        debug_img = image_extractor.create_debug_image(img_bytes, figures)
                                        all_debug_images.append((debug_img, page_num, figures))
                                    
                                    st.write(f"üñºÔ∏è Trang {page_num}: T√°ch ƒë∆∞·ª£c {len(figures)} ·∫£nh/b·∫£ng")
                                    
                                except Exception as e:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√°ch ·∫£nh trang {page_num}: {str(e)}")
                            
                            # T·∫°o prompt c·∫£i ti·∫øn cho Gemini
                            prompt = f"""
H√£y chuy·ªÉn ƒë·ªïi T·∫§T C·∫¢ n·ªôi dung trong ·∫£nh trang {page_num} th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c v·ªõi c·∫•u tr√∫c chu·∫©n.

Y√äU C·∫¶U ƒê·ªäNH D·∫†NG:

1. **Tr·∫Øc nghi·ªám 4 ph∆∞∆°ng √°n:**
```
C√¢u X: [n·ªôi dung c√¢u h·ªèi]
A. [ƒë√°p √°n A]
B. [ƒë√°p √°n B]  
C. [ƒë√°p √°n C]
D. [ƒë√°p √°n D]
```

2. **Tr·∫Øc nghi·ªám ƒë√∫ng sai:**
```
a) [n·ªôi dung ƒë√°p √°n a]
b) [n·ªôi dung ƒë√°p √°n b]
c) [n·ªôi dung ƒë√°p √°n c]
d) [n·ªôi dung ƒë√°p √°n d]
```

3. **Tr·∫£ l·ªùi ng·∫Øn/T·ª± lu·∫≠n:**
```
C√¢u X: [n·ªôi dung c√¢u h·ªèi]
```

4. **C√¥ng th·ª©c to√°n h·ªçc:**
- Inline: ${{x^2 + y^2}}$
- Display: $${{\\int_0^1 x dx = \\frac{{1}}{{2}}}}$$

5. **H√¨nh ·∫£nh v√† b·∫£ng:**
{'- Khi th·∫•y h√¨nh ·∫£nh/ƒë·ªì th·ªã: s·ª≠ d·ª•ng t·ª´ kh√≥a "xem h√¨nh", "theo h√¨nh", "h√¨nh sau"' if enable_extraction else ''}
{'- Khi th·∫•y b·∫£ng: s·ª≠ d·ª•ng t·ª´ kh√≥a "b·∫£ng sau", "theo b·∫£ng", "quan s√°t b·∫£ng"' if enable_extraction else ''}

Y√äU C·∫¶U KH√ÅC:
- Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
- Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
- S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
- ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng ƒë√∫ng cho t·ª´ng lo·∫°i c√¢u h·ªèi
"""
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    # Ch√®n ·∫£nh v√†o vƒÉn b·∫£n n·∫øu c√≥ t√°ch ·∫£nh
                                    if enable_extraction and extracted_figures:
                                        latex_result = image_extractor.insert_figures_into_text(
                                            latex_result, extracted_figures, h, w
                                        )
                                    
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX (ƒë·ªãnh d·∫°ng chu·∫©n):", combined_latex, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã th·ªëng k√™
                        if enable_extraction:
                            st.info(f"üñºÔ∏è T·ªïng c·ªông ƒë√£ t√°ch: {len(all_extracted_figures)} ·∫£nh/b·∫£ng")
                            
                            # Hi·ªÉn th·ªã ·∫£nh debug v√† ·∫£nh ƒë√£ c·∫Øt
                            if show_debug and all_debug_images:
                                st.subheader("üîç Debug - ·∫¢nh ƒë√£ ph√°t hi·ªán v√† c·∫Øt")
                                
                                for debug_img, page_num, figures in all_debug_images:
                                    st.write(f"**Trang {page_num} - V√πng ph√°t hi·ªán:**")
                                    st.image(debug_img, caption=f"ƒê√£ ph√°t hi·ªán {len(figures)} v√πng", use_column_width=True)
                                    
                                    # Hi·ªÉn th·ªã t·ª´ng ·∫£nh ƒë√£ c·∫Øt v·ªõi th√¥ng tin chi ti·∫øt
                                    if figures:
                                        cols = st.columns(min(len(figures), 3))
                                        for idx, fig in enumerate(figures):
                                            with cols[idx % 3]:
                                                # Decode v√† hi·ªÉn th·ªã ·∫£nh c·∫Øt
                                                img_data = base64.b64decode(fig['base64'])
                                                img_pil = Image.open(io.BytesIO(img_data))
                                                
                                                st.markdown(f'<div class="extracted-image">', unsafe_allow_html=True)
                                                st.image(img_pil, caption=fig['name'], use_column_width=True)
                                                
                                                # Th√¥ng tin chi ti·∫øt
                                                st.markdown(f'''
                                                <div class="image-info">
                                                <strong>{fig['name']}</strong><br>
                                                Lo·∫°i: {"B·∫£ng" if fig['is_table'] else "H√¨nh ·∫£nh"}<br>
                                                Confidence: {fig['confidence']:.1f}%<br>
                                                T·ª∑ l·ªá: {fig['aspect_ratio']:.2f}<br>
                                                K√≠ch th∆∞·ªõc: {fig['bbox'][2]}√ó{fig['bbox'][3]}px
                                                </div>
                                                ''', unsafe_allow_html=True)
                                                st.markdown('</div>', unsafe_allow_html=True)
                        
                        # L∆∞u v√†o session state
                        st.session_state.pdf_latex_content = combined_latex
                        st.session_state.pdf_images = [img for img, _ in pdf_images]
                        st.session_state.pdf_extracted_figures = all_extracted_figures if enable_extraction else None
                
                # T·∫°o file Word
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word (ƒë·ªãnh d·∫°ng chu·∫©n + ·∫£nh)", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                extracted_figs = st.session_state.get('pdf_extracted_figures')
                                original_imgs = st.session_state.pdf_images
                                
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    extracted_figures=extracted_figs,
                                    images=original_imgs
                                )
                                
                                filename = f"{uploaded_pdf.name.split('.')[0]}_enhanced_latex.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word (Enhanced)",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word v·ªõi ƒë·ªãnh d·∫°ng chu·∫©n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Tab x·ª≠ l√Ω ·∫£nh (t∆∞∆°ng t·ª± nh∆∞ PDF tab)
    with tab2:
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX + T√°ch ·∫£nh n√¢ng cao")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc v√† h√¨nh minh h·ªça"
        )
        
        if uploaded_images:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                for i, uploaded_image in enumerate(uploaded_images[:2]):
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                
                if len(uploaded_images) > 2:
                    st.info(f"... v√† {len(uploaded_images) - 2} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh + T√°ch ·∫£nh n√¢ng cao", key="convert_images"):
                    all_latex_content = []
                    all_extracted_figures = []
                    all_original_images = []
                    all_debug_images = []
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        image_bytes = uploaded_image.getvalue()
                        image_pil = Image.open(uploaded_image)
                        all_original_images.append(image_pil)
                        
                        # T√°ch ·∫£nh/b·∫£ng n·∫øu ƒë∆∞·ª£c b·∫≠t
                        extracted_figures = []
                        if enable_extraction:
                            try:
                                figures, h, w = image_extractor.extract_figures_and_tables(image_bytes)
                                extracted_figures = figures
                                all_extracted_figures.extend(figures)
                                
                                # T·∫°o ·∫£nh debug
                                if show_debug and figures:
                                    debug_img = image_extractor.create_debug_image(image_bytes, figures)
                                    all_debug_images.append((debug_img, uploaded_image.name, figures))
                                
                                st.write(f"üñºÔ∏è {uploaded_image.name}: T√°ch ƒë∆∞·ª£c {len(figures)} ·∫£nh/b·∫£ng")
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√°ch ·∫£nh {uploaded_image.name}: {str(e)}")
                        
                        prompt = """
Chuy·ªÉn ƒë·ªïi T·∫§T C·∫¢ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c v·ªõi c·∫•u tr√∫c chu·∫©n.

Y√äU C·∫¶U ƒê·ªäNH D·∫†NG:

1. **Tr·∫Øc nghi·ªám 4 ph∆∞∆°ng √°n:**
```
C√¢u X: [n·ªôi dung c√¢u h·ªèi]
A. [ƒë√°p √°n A]
B. [ƒë√°p √°n B]  
C. [ƒë√°p √°n C]
D. [ƒë√°p √°n D]
```

2. **Tr·∫Øc nghi·ªám ƒë√∫ng sai:**
```
a) [n·ªôi dung ƒë√°p √°n a]
b) [n·ªôi dung ƒë√°p √°n b]
c) [n·ªôi dung ƒë√°p √°n c]
d) [n·ªôi dung ƒë√°p √°n d]
```

3. **Tr·∫£ l·ªùi ng·∫Øn/T·ª± lu·∫≠n:**
```
C√¢u X: [n·ªôi dung c√¢u h·ªèi]
```

4. **C√¥ng th·ª©c to√°n h·ªçc:**
- Inline: ${x^2 + y^2}$
- Display: $${\\int_0^1 x dx = \\frac{1}{2}}$$

Y√äU C·∫¶U KH√ÅC:
- Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
- Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
- S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
- ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng ƒë√∫ng cho t·ª´ng lo·∫°i c√¢u h·ªèi
"""
                        
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                # Ch√®n ·∫£nh v√†o vƒÉn b·∫£n n·∫øu c√≥ t√°ch ·∫£nh
                                if enable_extraction and extracted_figures:
                                    latex_result = image_extractor.insert_figures_into_text(
                                        latex_result, extracted_figures, h, w
                                    )
                                
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    combined_latex = "\n".join(all_latex_content)
                    
                    st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                    st.text_area("üìù K·∫øt qu·∫£ LaTeX (ƒë·ªãnh d·∫°ng chu·∫©n):", combined_latex, height=300)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Hi·ªÉn th·ªã th·ªëng k√™ v√† ·∫£nh debug
                    if enable_extraction:
                        st.info(f"üñºÔ∏è T·ªïng c·ªông ƒë√£ t√°ch: {len(all_extracted_figures)} ·∫£nh/b·∫£ng")
                        
                        if show_debug and all_debug_images:
                            st.subheader("üîç Debug - ·∫¢nh ƒë√£ ph√°t hi·ªán v√† c·∫Øt")
                            
                            for debug_img, img_name, figures in all_debug_images:
                                st.write(f"**{img_name} - V√πng ph√°t hi·ªán:**")
                                st.image(debug_img, caption=f"ƒê√£ ph√°t hi·ªán {len(figures)} v√πng", use_column_width=True)
                                
                                if figures:
                                    cols = st.columns(min(len(figures), 3))
                                    for idx, fig in enumerate(figures):
                                        with cols[idx % 3]:
                                            img_data = base64.b64decode(fig['base64'])
                                            img_pil = Image.open(io.BytesIO(img_data))
                                            
                                            st.markdown(f'<div class="extracted-image">', unsafe_allow_html=True)
                                            st.image(img_pil, caption=fig['name'], use_column_width=True)
                                            
                                            st.markdown(f'''
                                            <div class="image-info">
                                            <strong>{fig['name']}</strong><br>
                                            Lo·∫°i: {"B·∫£ng" if fig['is_table'] else "H√¨nh ·∫£nh"}<br>
                                            Confidence: {fig['confidence']:.1f}%<br>
                                            T·ª∑ l·ªá: {fig['aspect_ratio']:.2f}<br>
                                            K√≠ch th∆∞·ªõc: {fig['bbox'][2]}√ó{fig['bbox'][3]}px
                                            </div>
                                            ''', unsafe_allow_html=True)
                                            st.markdown('</div>', unsafe_allow_html=True)
                    
                    # L∆∞u v√†o session
                    st.session_state.image_latex_content = combined_latex
                    st.session_state.image_list = all_original_images
                    st.session_state.image_extracted_figures = all_extracted_figures if enable_extraction else None
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word (ƒë·ªãnh d·∫°ng chu·∫©n + ·∫£nh)", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                extracted_figs = st.session_state.get('image_extracted_figures')
                                original_imgs = st.session_state.image_list
                                
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    extracted_figures=extracted_figs,
                                    images=original_imgs
                                )
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word (Enhanced)",
                                    data=word_buffer.getvalue(),
                                    file_name="images_enhanced_latex.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word v·ªõi ƒë·ªãnh d·∫°ng chu·∫©n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>‚ú® <strong>Enhanced Version:</strong> Thu·∫≠t to√°n c·∫Øt ·∫£nh c·∫£i ti·∫øn + ƒê·ªãnh d·∫°ng chu·∫©n!</p>
        <p>üéØ H·ªó tr·ª£ ƒë·∫ßy ƒë·ªß: Tr·∫Øc nghi·ªám 4 ph∆∞∆°ng √°n, ƒê√∫ng/Sai, T·ª± lu·∫≠n + AI t√°ch ·∫£nh th√¥ng minh</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
