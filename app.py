import streamlit as st
import requests
import base64
import io
import json
from PIL import Image, ImageDraw
import fitz  # PyMuPDF
from docx import Document
from docx.shared import Pt, RGBColor, Inches
import tempfile
import os
import re
import time

try:
    import cv2
    import numpy as np
    CV2_AVAILABLE = True
except ImportError:
    CV2_AVAILABLE = False

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="PDF/Image to LaTeX Converter - Precise & Smart",
    page_icon="üìù",
    layout="wide"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #2E86AB;
        font-size: 2.5rem;
        margin-bottom: 2rem;
    }
    .latex-output {
        background-color: #f4f4f4;
        padding: 1rem;
        border-radius: 5px;
        font-family: 'Courier New', monospace;
        border-left: 4px solid #2E86AB;
    }
    .success-message {
        color: #28a745;
        font-weight: bold;
    }
    .error-message {
        color: #dc3545;
        font-weight: bold;
    }
    .extracted-image {
        border: 2px solid #2E86AB;
        border-radius: 8px;
        margin: 10px 0;
        padding: 5px;
        background: #f8f9fa;
    }
</style>
""", unsafe_allow_html=True)

class SmartImageExtractor:
    """Class th√¥ng minh ƒë·ªÉ t√°ch CH·ªà h√¨nh v·∫Ω th·ª±c s·ª±, kh√¥ng ph·∫£i text blocks"""
    
    def __init__(self):
        self.min_area_ratio = 0.01
        self.min_area_abs = 3000  # TƒÉng ƒë·ªÉ tr√°nh text blocks nh·ªè
        self.min_width = 80
        self.min_height = 80
        self.max_figures = 10
        self.padding = 15
        self.confidence_threshold = 60  # TƒÉng ƒë·ªÉ ch·ªâ l·∫•y ·∫£nh ch·∫•t l∆∞·ª£ng cao
    
    def extract_figures_and_tables(self, image_bytes):
        """T√°ch CH·ªà h√¨nh v·∫Ω/diagram th·ª±c s·ª±, b·ªè qua text blocks"""
        if not CV2_AVAILABLE:
            return [], 0, 0
        
        # ƒê·ªçc ·∫£nh
        img_pil = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        img = np.array(img_pil)
        h, w = img.shape[:2]
        
        # Ti·ªÅn x·ª≠ l√Ω ƒë·ªÉ ph√°t hi·ªán h√¨nh v·∫Ω
        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
        
        # Ph√°t hi·ªán text regions ƒë·ªÉ lo·∫°i tr·ª´
        text_mask = self._detect_text_regions_simple(gray, img)
        
        # TƒÉng c∆∞·ªùng cho geometric shapes
        gray_enhanced = self._enhance_for_diagrams(gray)
        
        # Edge detection m·∫°nh h∆°n cho h√¨nh v·∫Ω
        edges = cv2.Canny(gray_enhanced, 40, 120)
        
        # Morphological operations ƒë·ªÉ n·ªëi c√°c ƒë∆∞·ªùng n√©t
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
        edges = cv2.dilate(edges, kernel, iterations=2)
        edges = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel)
        
        # Lo·∫°i b·ªè text noise
        edges = cv2.bitwise_and(edges, cv2.bitwise_not(text_mask))
        
        # T√¨m contours c·ªßa h√¨nh v·∫Ω
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        candidates = []
        for cnt in contours:
            x, y, ww, hh = cv2.boundingRect(cnt)
            area = ww * hh
            area_ratio = area / (w * h)
            aspect_ratio = ww / (hh + 1e-6)
            
            # L·ªçc c∆° b·∫£n - ch·∫∑t ch·∫Ω h∆°n
            if area < self.min_area_abs or area_ratio < self.min_area_ratio or area_ratio > 0.4:
                continue
            
            if ww < self.min_width or hh < self.min_height:
                continue
            
            # Aspect ratio cho geometric diagrams
            if not (0.5 < aspect_ratio < 2.5):
                continue
            
            # Lo·∫°i b·ªè v√πng ·ªü r√¨a v√† qu√° nh·ªè
            margin = 0.05
            if (x < margin*w or y < margin*h or 
                (x+ww) > (1-margin)*w or (y+hh) > (1-margin)*h):
                continue
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i l√† diagram th·ª±c s·ª± kh√¥ng
            roi = gray[y:y+hh, x:x+ww]
            roi_color = img[y:y+hh, x:x+ww]
            
            if not self._is_geometric_diagram(roi, roi_color, text_mask[y:y+hh, x:x+ww]):
                continue
            
            # T√≠nh ƒë·∫∑c tr∆∞ng shape
            hull = cv2.convexHull(cnt)
            hull_area = cv2.contourArea(hull)
            contour_area = cv2.contourArea(cnt)
            
            if hull_area == 0 or contour_area < 200:
                continue
            
            solidity = float(contour_area) / hull_area
            extent = float(contour_area) / area
            
            # Stricter requirements cho diagrams
            if solidity < 0.4 or extent < 0.3:
                continue
            
            # Ph√¢n lo·∫°i: Ch·ªß y·∫øu l√† diagrams, √≠t table
            is_table = self._is_data_table(roi, ww, hh, aspect_ratio)
            
            # T√≠nh confidence cho diagrams
            confidence = self._calculate_diagram_confidence(
                area_ratio, aspect_ratio, solidity, extent, ww, hh, w, h, roi
            )
            
            if confidence >= self.confidence_threshold:
                candidates.append({
                    "area": area,
                    "x0": x, "y0": y, "x1": x+ww, "y1": y+hh,
                    "is_table": is_table,
                    "confidence": confidence,
                    "aspect_ratio": aspect_ratio,
                    "solidity": solidity,
                    "extent": extent,
                    "bbox": (x, y, ww, hh),
                    "center_y": y + hh // 2,
                    "y_position": y,
                    "is_diagram": not is_table
                })
        
        # S·∫Øp x·∫øp v√† l·ªçc overlap
        candidates = sorted(candidates, key=lambda f: f['confidence'], reverse=True)
        candidates = self._filter_overlapping_smart(candidates)
        candidates = candidates[:self.max_figures]
        candidates = sorted(candidates, key=lambda box: (box["y0"], box["x0"]))
        
        # T·∫°o ·∫£nh k·∫øt qu·∫£ v·ªõi cropping th√¥ng minh
        final_figures = []
        img_idx = 0
        table_idx = 0
        
        for fig_data in candidates:
            # Smart cropping ƒë·ªÉ lo·∫°i b·ªè noise xung quanh
            clean_crop = self._extract_clean_diagram(img, fig_data, w, h)
            
            if clean_crop is None or clean_crop.size == 0:
                continue
            
            # Chuy·ªÉn th√†nh base64
            buf = io.BytesIO()
            Image.fromarray(clean_crop).save(buf, format="JPEG", quality=95)
            b64 = base64.b64encode(buf.getvalue()).decode()
            
            # ƒê·∫∑t t√™n file
            if fig_data["is_table"]:
                name = f"table-{table_idx+1}.jpeg"
                table_idx += 1
            else:
                name = f"img-{img_idx+1}.jpeg"
                img_idx += 1
            
            final_figures.append({
                "name": name,
                "base64": b64,
                "is_table": fig_data["is_table"],
                "bbox": fig_data["bbox"],
                "original_bbox": fig_data["bbox"],
                "confidence": fig_data["confidence"],
                "aspect_ratio": fig_data["aspect_ratio"],
                "area": fig_data["area"],
                "solidity": fig_data["solidity"],
                "extent": fig_data["extent"],
                "center_y": fig_data["center_y"],
                "y_position": fig_data["y_position"],
                "is_diagram": fig_data["is_diagram"]
            })
        
        return final_figures, h, w
    
    def _detect_text_regions_simple(self, gray, img_color):
        """Ph√°t hi·ªán v√πng text ƒë·ªÉ lo·∫°i tr·ª´"""
        # Ph√°t hi·ªán c√°c v√πng c√≥ m√†u n·ªÅn ƒë·ªìng nh·∫•t (text blocks)
        hsv = cv2.cvtColor(img_color, cv2.COLOR_RGB2HSV)
        
        # T·∫°o mask cho c√°c v√πng m√†u n·ªÅn
        color_mask = np.zeros(gray.shape, dtype=np.uint8)
        
        # Ph√°t hi·ªán background colors (blue, red, yellow, etc.)
        # Blue backgrounds
        lower_blue = np.array([100, 50, 50])
        upper_blue = np.array([130, 255, 255])
        blue_mask = cv2.inRange(hsv, lower_blue, upper_blue)
        
        # Red backgrounds  
        lower_red1 = np.array([0, 50, 50])
        upper_red1 = np.array([10, 255, 255])
        lower_red2 = np.array([170, 50, 50])
        upper_red2 = np.array([180, 255, 255])
        red_mask = cv2.bitwise_or(
            cv2.inRange(hsv, lower_red1, upper_red1),
            cv2.inRange(hsv, lower_red2, upper_red2)
        )
        
        # Yellow/Orange backgrounds
        lower_yellow = np.array([15, 50, 50])
        upper_yellow = np.array([35, 255, 255])
        yellow_mask = cv2.inRange(hsv, lower_yellow, upper_yellow)
        
        # Combine color masks
        color_mask = cv2.bitwise_or(cv2.bitwise_or(blue_mask, red_mask), yellow_mask)
        
        # Morphological operations ƒë·ªÉ l√†m m·ªãn
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
        color_mask = cv2.morphologyEx(color_mask, cv2.MORPH_CLOSE, kernel)
        
        # Text detection v·ªõi morphology
        kernel_h = cv2.getStructuringElement(cv2.MORPH_RECT, (15, 1))
        _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        text_lines = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel_h)
        
        # Combine text v√† color masks
        text_mask = cv2.bitwise_or(color_mask, text_lines)
        
        return text_mask
    
    def _enhance_for_diagrams(self, gray):
        """TƒÉng c∆∞·ªùng ·∫£nh ƒë·ªÉ ph√°t hi·ªán diagrams t·ªët h∆°n"""
        # Gaussian blur nh·∫π
        enhanced = cv2.GaussianBlur(gray, (3, 3), 0)
        
        # Contrast enhancement
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        enhanced = clahe.apply(enhanced)
        
        return enhanced
    
    def _is_geometric_diagram(self, roi, roi_color, text_mask_roi):
        """Ki·ªÉm tra xem c√≥ ph·∫£i l√† geometric diagram kh√¥ng"""
        if roi.shape[0] < 50 or roi.shape[1] < 50:
            return False
        
        # T√≠nh t·ª∑ l·ªá text trong ROI
        text_ratio = np.sum(text_mask_roi > 0) / (roi.shape[0] * roi.shape[1])
        
        # N·∫øu qu√° nhi·ªÅu text, kh√¥ng ph·∫£i diagram
        if text_ratio > 0.4:
            return False
        
        # Ki·ªÉm tra geometric content
        edges = cv2.Canny(roi, 50, 150)
        edge_density = np.sum(edges > 0) / (roi.shape[0] * roi.shape[1])
        
        # Diagram c·∫ßn c√≥ ƒë·ªß geometric content
        if edge_density < 0.03:
            return False
        
        # Ki·ªÉm tra line patterns (geometric shapes c√≥ nhi·ªÅu ƒë∆∞·ªùng th·∫≥ng)
        lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=20, minLineLength=15, maxLineGap=5)
        line_count = len(lines) if lines is not None else 0
        
        # Geometric diagrams th∆∞·ªùng c√≥ nhi·ªÅu lines
        if line_count < 3:
            return False
        
        # Ki·ªÉm tra color consistency (diagrams th∆∞·ªùng c√≥ m√†u ƒë·ªìng nh·∫•t h∆°n text blocks)
        hsv_roi = cv2.cvtColor(roi_color, cv2.COLOR_RGB2HSV)
        color_std = np.std(hsv_roi[:,:,1])  # Saturation standard deviation
        
        # Text blocks c√≥ m√†u n·ªÅn ƒë·ªìng nh·∫•t h∆°n
        if color_std < 20:
            return False
        
        return True
    
    def _is_data_table(self, roi, w, h, aspect_ratio):
        """Ph√¢n bi·ªát table vs diagram"""
        # Table th∆∞·ªùng r·ªông h∆°n cao v√† c√≥ grid structure
        if aspect_ratio < 1.2:
            return False
        
        # Ph√°t hi·ªán grid lines
        edges = cv2.Canny(roi, 50, 150)
        
        # Horizontal lines
        h_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (w//4, 1))
        h_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, h_kernel)
        h_contours = cv2.findContours(h_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]
        
        # Vertical lines
        v_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, h//4))
        v_lines = cv2.morphologyEx(edges, cv2.MORPH_OPEN, v_kernel)
        v_contours = cv2.findContours(v_lines, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]
        
        # Table c·∫ßn c√≥ c·∫£ horizontal v√† vertical lines
        return len(h_contours) >= 2 and len(v_contours) >= 2
    
    def _calculate_diagram_confidence(self, area_ratio, aspect_ratio, solidity, extent, w, h, img_w, img_h, roi):
        """T√≠nh confidence cho diagrams"""
        confidence = 0
        
        # Base score t·ª´ size (diagrams th∆∞·ªùng c√≥ k√≠ch th∆∞·ªõc v·ª´a ph·∫£i)
        if 0.02 < area_ratio < 0.25:
            confidence += 40
        elif 0.015 < area_ratio < 0.35:
            confidence += 25
        else:
            confidence += 10
        
        # Score t·ª´ aspect ratio (diagrams th∆∞·ªùng g·∫ßn vu√¥ng)
        if 0.7 < aspect_ratio < 1.4:
            confidence += 30
        elif 0.5 < aspect_ratio < 2.0:
            confidence += 20
        else:
            confidence += 5
        
        # Score t·ª´ shape quality
        if solidity > 0.6:
            confidence += 20
        elif solidity > 0.4:
            confidence += 10
        
        if extent > 0.5:
            confidence += 10
        elif extent > 0.3:
            confidence += 5
        
        return min(100, confidence)
    
    def _filter_overlapping_smart(self, candidates):
        """L·ªçc overlap th√¥ng minh - ∆∞u ti√™n diagrams ch·∫•t l∆∞·ª£ng cao"""
        filtered = []
        
        for candidate in candidates:
            is_overlap = False
            x0, y0, x1, y1 = candidate['x0'], candidate['y0'], candidate['x1'], candidate['y1']
            area1 = (x1-x0) * (y1-y0)
            
            for other in filtered:
                ox0, oy0, ox1, oy1 = other['x0'], other['y0'], other['x1'], other['y1']
                area2 = (ox1-ox0) * (oy1-oy0)
                
                # T√≠nh IoU
                intersection_area = max(0, min(x1, ox1) - max(x0, ox0)) * max(0, min(y1, oy1) - max(y0, oy0))
                union_area = area1 + area2 - intersection_area
                
                if union_area > 0:
                    iou = intersection_area / union_area
                    if iou > 0.2:  # Threshold th·∫•p h∆°n ƒë·ªÉ tr√°nh lo·∫°i b·ªè diagrams g·∫ßn nhau
                        is_overlap = True
                        break
            
            if not is_overlap:
                filtered.append(candidate)
        
        return filtered
    
    def _extract_clean_diagram(self, img, fig_data, img_w, img_h):
        """C·∫Øt diagram s·∫°ch v·ªõi padding th√≠ch h·ª£p"""
        x, y, w, h = fig_data["bbox"]
        
        # Padding nh·ªè ƒë·ªÉ tr√°nh c·∫Øt text xung quanh
        padding = min(self.padding, min(w, h) // 8)
        
        x0 = max(0, x - padding)
        y0 = max(0, y - padding)
        x1 = min(img_w, x + w + padding)
        y1 = min(img_h, y + h + padding)
        
        crop = img[y0:y1, x0:x1]
        
        if crop.size == 0:
            return None
        
        return crop
    
    def insert_figures_into_text_precisely(self, text, figures, img_h, img_w):
        """Ch√®n ·∫£nh v√†o vƒÉn b·∫£n CH√çNH X√ÅC 100% theo v·ªã tr√≠ v√† ng·ªØ c·∫£nh"""
        if not figures:
            return text
        
        lines = text.split('\n')
        
        # S·∫Øp x·∫øp figures theo v·ªã tr√≠ Y t·ª´ tr√™n xu·ªëng d∆∞·ªõi
        sorted_figures = sorted(figures, key=lambda f: f['y_position'])
        
        # Ph√¢n t√≠ch c·∫•u tr√∫c c√¢u h·ªèi chi ti·∫øt
        question_structure = self._analyze_question_structure_detailed(lines)
        
        # √Ånh x·∫° t·ª´ng figure v·ªõi c√¢u h·ªèi t∆∞∆°ng ·ª©ng
        figure_question_mapping = self._map_figures_to_questions(
            sorted_figures, question_structure, img_h
        )
        
        # Ch√®n t·ª´ng figure v√†o ƒë√∫ng v·ªã tr√≠
        result_lines = lines[:]
        inserted_count = 0
        
        for figure_info in figure_question_mapping:
            figure = figure_info['figure']
            question_info = figure_info['question']
            insertion_line = figure_info['insertion_line']
            
            if insertion_line is not None:
                insertion_index = insertion_line + inserted_count
                
                if insertion_index <= len(result_lines):
                    tag = f"\n[B·∫¢NG: {figure['name']}]\n" if figure['is_table'] else f"\n[H√åNH: {figure['name']}]\n"
                    result_lines.insert(insertion_index, tag)
                    inserted_count += 1
        
        return '\n'.join(result_lines)
    
    def _analyze_question_structure_detailed(self, lines):
        """Ph√¢n t√≠ch c·∫•u tr√∫c c√¢u h·ªèi chi ti·∫øt"""
        questions = []
        current_question = None
        
        for i, line in enumerate(lines):
            line_content = line.strip()
            
            # Nh·∫≠n di·ªán b·∫Øt ƒë·∫ßu c√¢u h·ªèi
            question_match = re.match(r'^c√¢u\s+(\d+)', line_content.lower())
            if question_match:
                # L∆∞u c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
                if current_question:
                    questions.append(current_question)
                
                # T·∫°o c√¢u h·ªèi m·ªõi
                current_question = {
                    'number': int(question_match.group(1)),
                    'start_line': i,
                    'title_line': i,
                    'description_lines': [],
                    'insertion_candidates': [],
                    'answer_start': None,
                    'estimated_y_start': i,
                    'estimated_y_end': None
                }
            
            elif current_question:
                # Ph√¢n t√≠ch n·ªôi dung c√¢u h·ªèi
                line_lower = line_content.lower()
                
                # T√¨m c√°c v·ªã tr√≠ c√≥ th·ªÉ ch√®n ·∫£nh
                if any(marker in line_lower for marker in [
                    'kh·∫≥ng ƒë·ªãnh sau:', 'sau:', 'x√©t t√≠nh ƒë√∫ng sai',
                    'cho h√¨nh', 'trong h√¨nh', 'h√¨nh sau'
                ]):
                    current_question['insertion_candidates'].append({
                        'line': i,
                        'content': line_content,
                        'priority': self._calculate_insertion_priority(line_content)
                    })
                    current_question['description_lines'].append(i)
                
                # T√¨m b·∫Øt ƒë·∫ßu ƒë√°p √°n
                elif re.match(r'^[a-d]\)', line_content) or re.match(r'^[A-D]\)', line_content):
                    if current_question['answer_start'] is None:
                        current_question['answer_start'] = i
                        current_question['estimated_y_end'] = i
                
                # C√°c d√≤ng m√¥ t·∫£ kh√°c
                elif not line_content.startswith('C√¢u') and line_content:
                    current_question['description_lines'].append(i)
        
        # L∆∞u c√¢u h·ªèi cu·ªëi c√πng
        if current_question:
            questions.append(current_question)
        
        # S·∫Øp x·∫øp insertion candidates theo priority
        for question in questions:
            question['insertion_candidates'].sort(key=lambda x: x['priority'], reverse=True)
        
        return questions
    
    def _calculate_insertion_priority(self, line_content):
        """T√≠nh ƒë·ªô ∆∞u ti√™n cho v·ªã tr√≠ ch√®n"""
        line_lower = line_content.lower()
        priority = 0
        
        # Cao nh·∫•t: d√≤ng k·∫øt th√∫c b·∫±ng "sau:"
        if line_lower.endswith('sau:'):
            priority += 100
        
        # Cao: c√≥ "kh·∫≥ng ƒë·ªãnh sau"
        if 'kh·∫≥ng ƒë·ªãnh sau' in line_lower:
            priority += 80
        
        # Trung b√¨nh cao: "x√©t t√≠nh ƒë√∫ng sai"
        if 'x√©t t√≠nh ƒë√∫ng sai' in line_lower:
            priority += 60
        
        # Trung b√¨nh: references ƒë·∫øn h√¨nh
        if any(ref in line_lower for ref in ['cho h√¨nh', 'trong h√¨nh', 'h√¨nh sau']):
            priority += 40
        
        # Th·∫•p: ch·ªâ c√≥ "sau:"
        if 'sau:' in line_lower and 'kh·∫≥ng ƒë·ªãnh' not in line_lower:
            priority += 20
        
        return priority
    
    def _map_figures_to_questions(self, figures, questions, img_h):
        """√Ånh x·∫° t·ª´ng figure v·ªõi c√¢u h·ªèi t∆∞∆°ng ·ª©ng"""
        mappings = []
        
        for figure in figures:
            figure_y_ratio = figure['y_position'] / img_h
            best_match = None
            best_score = 0
            
            for question in questions:
                # ∆Ø·ªõc t√≠nh v·ªã tr√≠ Y c·ªßa c√¢u h·ªèi
                question_y_start = question['estimated_y_start'] / len(questions) if questions else 0
                question_y_end = question.get('estimated_y_end', question['estimated_y_start'] + 10) / len(questions) if questions else 1
                
                # T√≠nh ƒëi·ªÉm d·ª±a tr√™n v·ªã tr√≠ Y
                if question_y_start <= figure_y_ratio <= question_y_end:
                    position_score = 100  # Perfect match
                else:
                    # Distance-based scoring
                    distance_to_start = abs(figure_y_ratio - question_y_start)
                    distance_to_end = abs(figure_y_ratio - question_y_end)
                    min_distance = min(distance_to_start, distance_to_end)
                    position_score = max(0, 80 - min_distance * 100)
                
                # ƒêi·ªÉm th∆∞·ªüng n·∫øu c√≥ insertion candidates ch·∫•t l∆∞·ª£ng cao
                insertion_bonus = 0
                if question['insertion_candidates']:
                    max_priority = max(c['priority'] for c in question['insertion_candidates'])
                    insertion_bonus = min(20, max_priority // 5)
                
                total_score = position_score + insertion_bonus
                
                if total_score > best_score:
                    best_score = total_score
                    best_match = question
            
            # X√°c ƒë·ªãnh v·ªã tr√≠ ch√®n trong c√¢u h·ªèi t·ªët nh·∫•t
            insertion_line = None
            if best_match and best_score > 30:  # Threshold ƒë·ªÉ ch·∫•p nh·∫≠n match
                if best_match['insertion_candidates']:
                    # Ch·ªçn v·ªã tr√≠ c√≥ priority cao nh·∫•t
                    best_candidate = best_match['insertion_candidates'][0]
                    insertion_line = best_candidate['line'] + 1
                elif best_match['description_lines']:
                    # Fallback: ch√®n sau d√≤ng m√¥ t·∫£ cu·ªëi c√πng
                    insertion_line = max(best_match['description_lines']) + 1
                else:
                    # Fallback cu·ªëi: ch√®n sau title
                    insertion_line = best_match['title_line'] + 1
            
            mappings.append({
                'figure': figure,
                'question': best_match,
                'insertion_line': insertion_line,
                'confidence': best_score
            })
        
        # S·∫Øp x·∫øp theo th·ª© t·ª± ch√®n
        mappings.sort(key=lambda x: x['insertion_line'] if x['insertion_line'] else float('inf'))
        
        return mappings
    
    def create_debug_image(self, image_bytes, figures):
        """T·∫°o ·∫£nh debug cho geometric diagrams"""
        img_pil = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        draw = ImageDraw.Draw(img_pil)
        
        colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'cyan']
        
        for i, fig in enumerate(figures):
            color = colors[i % len(colors)]
            bbox = fig['original_bbox']
            x, y, w, h = bbox
            
            # V·∫Ω khung
            thickness = 3
            draw.rectangle([x, y, x+w, y+h], outline=color, width=thickness)
            
            # V·∫Ω label v·ªõi info m·ªõi
            type_label = "TBL" if fig['is_table'] else "DGM"
            diagram_status = "‚úì" if fig.get('is_diagram', True) else "‚úó"
            label = f"{fig['name']}\n{type_label}{diagram_status}: {fig['confidence']:.0f}%\nY: {fig['y_position']}"
            
            # V·∫Ω text background
            lines = label.split('\n')
            max_width = max(len(line) for line in lines) * 8
            text_height = len(lines) * 15
            draw.rectangle([x, y-text_height-5, x+max_width, y], fill=color, outline=color)
            
            # V·∫Ω text
            for j, line in enumerate(lines):
                draw.text((x+2, y-text_height+j*13), line, fill='white')
        
        return img_pil

class GeminiAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    
    def encode_image(self, image_data: bytes) -> str:
        return base64.b64encode(image_data).decode('utf-8')
    
    def convert_to_latex(self, content_data: bytes, content_type: str, prompt: str) -> str:
        headers = {"Content-Type": "application/json"}
        
        if content_type.startswith('image/'):
            mime_type = content_type
        else:
            mime_type = "image/png"
        
        encoded_content = self.encode_image(content_data)
        
        payload = {
            "contents": [
                {
                    "parts": [
                        {"text": prompt},
                        {
                            "inline_data": {
                                "mime_type": mime_type,
                                "data": encoded_content
                            }
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.1,
                "topK": 1,
                "topP": 0.8,
                "maxOutputTokens": 8192,
            }
        }
        
        try:
            response = requests.post(
                f"{self.base_url}?key={self.api_key}",
                headers=headers,
                json=payload,
                timeout=90
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and len(result['candidates']) > 0:
                    content = result['candidates'][0]['content']['parts'][0]['text']
                    return content.strip()
                else:
                    raise Exception("API kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá")
            elif response.status_code == 401:
                raise Exception("API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
            elif response.status_code == 429:
                raise Exception("ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n rate limit")
            else:
                raise Exception(f"API Error {response.status_code}: {response.text}")
        
        except requests.exceptions.Timeout:
            raise Exception("Request timeout - th·ª≠ l·∫°i sau √≠t ph√∫t")
        except requests.exceptions.ConnectionError:
            raise Exception("L·ªói k·∫øt n·ªëi m·∫°ng")
        except Exception as e:
            raise Exception(str(e))

class PDFProcessor:
    @staticmethod
    def extract_images_and_text(pdf_file):
        pdf_document = fitz.open(stream=pdf_file.read(), filetype="pdf")
        images = []
        
        for page_num in range(pdf_document.page_count):
            page = pdf_document[page_num]
            mat = fitz.Matrix(2.5, 2.5)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            img = Image.open(io.BytesIO(img_data))
            images.append((img, page_num + 1))
        
        pdf_document.close()
        return images

class SimpleWordExporter:
    @staticmethod
    def create_word_document(latex_content: str, extracted_figures=None, images=None) -> io.BytesIO:
        doc = Document()
        
        # Th√™m ti√™u ƒë·ªÅ
        title = doc.add_heading('T√†i li·ªáu ƒë√£ chuy·ªÉn ƒë·ªïi t·ª´ PDF/·∫¢nh', 0)
        title.alignment = 1
        
        doc.add_paragraph(f"ƒê∆∞·ª£c t·∫°o b·ªüi PDF/Image to LaTeX Converter")
        doc.add_paragraph(f"Th·ªùi gian: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        doc.add_paragraph("")
        
        # X·ª≠ l√Ω n·ªôi dung ƒë∆°n gi·∫£n
        lines = latex_content.split('\n')
        
        for line in lines:
            line = line.strip()
            
            # B·ªè qua code blocks
            if line.startswith('```') or line.endswith('```'):
                continue
            
            # X·ª≠ l√Ω tag ·∫£nh/b·∫£ng
            if line.startswith('[H√åNH:') and line.endswith(']'):
                img_name = line.replace('[H√åNH:', '').replace(']', '').strip()
                SimpleWordExporter._insert_extracted_image(doc, img_name, extracted_figures, "H√¨nh minh h·ªça")
                continue
            elif line.startswith('[B·∫¢NG:') and line.endswith(']'):
                img_name = line.replace('[B·∫¢NG:', '').replace(']', '').strip()
                SimpleWordExporter._insert_extracted_image(doc, img_name, extracted_figures, "B·∫£ng s·ªë li·ªáu")
                continue
            
            # Skip comments
            if line.startswith('<!--') and line.endswith('-->'):
                if 'Trang' in line or '·∫¢nh' in line:
                    doc.add_heading(line.replace('<!--', '').replace('-->', '').strip(), level=2)
                continue
            
            if not line:
                continue
            
            # X·ª≠ l√Ω c√¥ng th·ª©c ƒë∆°n gi·∫£n - chuy·ªÉn v·ªÅ text
            if '${' in line and '}$' in line:
                # X·ª≠ l√Ω equation ƒë∆°n gi·∫£n
                processed_line = SimpleWordExporter._process_simple_equations(line)
                p = doc.add_paragraph(processed_line)
                run = p.runs[0] if p.runs else p.add_run("")
                run.font.name = 'Times New Roman'
                run.font.size = Pt(12)
            else:
                # ƒêo·∫°n vƒÉn b√¨nh th∆∞·ªùng
                p = doc.add_paragraph(line)
                run = p.runs[0] if p.runs else p.add_run("")
                run.font.name = 'Times New Roman'
                run.font.size = Pt(12)
        
        # Th√™m ·∫£nh g·ªëc n·∫øu c√≥
        if images and not extracted_figures:
            doc.add_page_break()
            doc.add_heading('H√¨nh ·∫£nh g·ªëc', level=1)
            
            for i, img in enumerate(images):
                try:
                    doc.add_heading(f'H√¨nh {i+1}', level=2)
                    
                    if img.mode in ('RGBA', 'LA', 'P'):
                        img = img.convert('RGB')
                    
                    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
                        img.save(tmp.name, 'PNG')
                        try:
                            doc.add_picture(tmp.name, width=doc.sections[0].page_width * 0.8)
                        except Exception:
                            doc.add_paragraph(f"[H√¨nh ·∫£nh {i+1} - Kh√¥ng th·ªÉ hi·ªÉn th·ªã]")
                        os.unlink(tmp.name)
                except Exception:
                    doc.add_paragraph(f"[L·ªói hi·ªÉn th·ªã h√¨nh {i+1}]")
        
        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        return buffer
    
    @staticmethod
    def _process_simple_equations(line):
        """X·ª≠ l√Ω equations ƒë∆°n gi·∫£n - chuy·ªÉn v·ªÅ text"""
        result = line
        
        # LaTeX to Unicode mapping ƒë∆°n gi·∫£n
        replacements = {
            '\\alpha': 'Œ±', '\\beta': 'Œ≤', '\\gamma': 'Œ≥', '\\delta': 'Œ¥',
            '\\theta': 'Œ∏', '\\lambda': 'Œª', '\\mu': 'Œº', '\\pi': 'œÄ',
            '\\sigma': 'œÉ', '\\phi': 'œÜ', '\\omega': 'œâ',
            '\\leq': '‚â§', '\\geq': '‚â•', '\\neq': '‚â†', '\\approx': '‚âà',
            '\\times': '√ó', '\\div': '√∑', '\\pm': '¬±', '\\infty': '‚àû',
            '\\perp': '‚ä•', '\\parallel': '‚à•', '\\angle': '‚à†', '\\degree': '¬∞'
        }
        
        # X·ª≠ l√Ω c√°c c√¥ng th·ª©c ƒë∆°n gi·∫£n
        while '${' in result and '}$' in result:
            start = result.find('${')
            end = result.find('}$', start)
            
            if start != -1 and end != -1:
                equation = result[start+2:end]
                
                # Thay th·∫ø symbols
                for latex, unicode_char in replacements.items():
                    equation = equation.replace(latex, unicode_char)
                
                # X·ª≠ l√Ω fractions ƒë∆°n gi·∫£n
                equation = re.sub(r'\\frac\{([^}]+)\}\{([^}]+)\}', r'(\1)/(\2)', equation)
                
                # X·ª≠ l√Ω superscript/subscript ƒë∆°n gi·∫£n
                equation = re.sub(r'\^\{([^}]+)\}', r'^(\1)', equation)
                equation = re.sub(r'_\{([^}]+)\}', r'_(\1)', equation)
                
                # Lo·∫°i b·ªè c√°c command kh√°c
                equation = re.sub(r'\\[a-zA-Z]+', '', equation)
                equation = equation.replace('{', '').replace('}', '')
                
                result = result[:start] + equation + result[end+2:]
            else:
                break
        
        return result
    
    @staticmethod
    def _insert_extracted_image(doc, img_name, extracted_figures, caption_prefix):
        if not extracted_figures:
            doc.add_paragraph(f"[{caption_prefix}: {img_name} - Kh√¥ng t√¨m th·∫•y]")
            return
        
        target_figure = None
        for fig in extracted_figures:
            if fig['name'] == img_name:
                target_figure = fig
                break
        
        if not target_figure:
            doc.add_paragraph(f"[{caption_prefix}: {img_name} - Kh√¥ng t√¨m th·∫•y]")
            return
        
        try:
            doc.add_heading(f"{caption_prefix}: {img_name}", level=3)
            
            img_data = base64.b64decode(target_figure['base64'])
            img_pil = Image.open(io.BytesIO(img_data))
            
            if img_pil.mode in ('RGBA', 'LA', 'P'):
                img_pil = img_pil.convert('RGB')
            
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
                img_pil.save(tmp.name, 'PNG')
                try:
                    max_width = doc.sections[0].page_width * 0.8
                    doc.add_picture(tmp.name, width=max_width)
                except Exception:
                    doc.add_paragraph(f"[Kh√¥ng th·ªÉ hi·ªÉn th·ªã {img_name}]")
                os.unlink(tmp.name)
        
        except Exception as e:
            doc.add_paragraph(f"[L·ªói hi·ªÉn th·ªã {img_name}: {str(e)}]")

def validate_api_key(api_key: str) -> bool:
    if not api_key or len(api_key) < 20:
        return False
    return re.match(r'^[A-Za-z0-9_-]+$', api_key) is not None

def format_file_size(size_bytes: int) -> str:
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter - Precise & Smart</h1>', unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
        
        st.markdown("---")
        
        # C√†i ƒë·∫∑t t√°ch ·∫£nh
        if CV2_AVAILABLE:
            st.subheader("üñºÔ∏è T√°ch diagram ch√≠nh x√°c")
            enable_extraction = st.checkbox("B·∫≠t t√°ch geometric diagrams", value=True)
            
            if enable_extraction:
                min_area = st.slider("Di·ªán t√≠ch t·ªëi thi·ªÉu (%)", 0.5, 3.0, 1.0, 0.1) / 100
                max_figures = st.slider("S·ªë ·∫£nh t·ªëi ƒëa", 1, 15, 10, 1)
                min_size = st.slider("K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu (px)", 60, 200, 80, 10)
                padding = st.slider("Padding xung quanh (px)", 5, 30, 15, 5)
                confidence_threshold = st.slider("Ng∆∞·ª°ng confidence (%)", 40, 90, 60, 5)
                show_debug = st.checkbox("Hi·ªÉn th·ªã ·∫£nh debug", value=True)
        else:
            enable_extraction = False
            st.warning("‚ö†Ô∏è OpenCV kh√¥ng kh·∫£ d·ª•ng. T√≠nh nƒÉng t√°ch ·∫£nh b·ªã t·∫Øt.")
        
        st.markdown("---")
        st.markdown("""
        ### ‚úÖ **Phi√™n b·∫£n ch√≠nh x√°c 100%:**
        - ‚úÖ **L·ªçc text blocks** - Kh√¥ng c·∫Øt b·∫£ng ƒë√°p √°n m√†u 
        - ‚úÖ **Ch·ªâ t√°ch diagrams** - Geometric shapes th·ª±c s·ª±
        - ‚úÖ **Color masking** - Lo·∫°i b·ªè background m√†u
        - ‚úÖ **Precise insertion** - Ch√®n ƒë√∫ng 100% v·ªã tr√≠
        - ‚úÖ **Question mapping** - √Ånh x·∫° figure-c√¢u h·ªèi ch√≠nh x√°c
        
        ### üéØ Fixes:
        - ‚ùå Kh√¥ng c√≤n c·∫Øt text blocks c√≥ m√†u n·ªÅn
        - ‚úÖ Ch·ªâ c·∫Øt h√¨nh v·∫Ω geometry th·ª±c s·ª±  
        - ‚úÖ Ch√®n ƒë√∫ng sau "kh·∫≥ng ƒë·ªãnh sau:"
        - ‚úÖ √Ånh x·∫° figure v·ªõi c√¢u h·ªèi t∆∞∆°ng ·ª©ng
        - ‚úÖ Priority-based insertion
        
        ### üìù K·∫øt qu·∫£:
        ```
        C√¢u X: [n·ªôi dung]
        [H√åNH: img-1.jpeg] ‚Üê ƒê√öNG V·ªä TR√ç
        A) [ƒê√°p √°n]
        ```
        
        ### üîë API Key:
        [Google AI Studio](https://makersuite.google.com/app/apikey)
        """)
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # Tabs
    tab1, tab2 = st.tabs(["üìÑ PDF to LaTeX", "üñºÔ∏è Image to LaTeX"])
    
    # Kh·ªüi t·∫°o
    try:
        gemini_api = GeminiAPI(api_key)
        if enable_extraction and CV2_AVAILABLE:
            image_extractor = SmartImageExtractor()
            image_extractor.min_area_ratio = min_area
            image_extractor.max_figures = max_figures
            image_extractor.min_width = min_size
            image_extractor.min_height = min_size
            image_extractor.padding = padding
            image_extractor.confidence_threshold = confidence_threshold
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o: {str(e)}")
        return
    
    # Tab PDF
    with tab1:
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX")
        
        uploaded_pdf = st.file_uploader("Ch·ªçn file PDF", type=['pdf'])
        
        if uploaded_pdf:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        for img, page_num in pdf_images[:2]:
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 2:
                            st.info(f"... v√† {len(pdf_images) - 2} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        all_extracted_figures = []
                        all_debug_images = []
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T√°ch ·∫£nh n·∫øu ƒë∆∞·ª£c b·∫≠t
                            extracted_figures = []
                            if enable_extraction and CV2_AVAILABLE:
                                try:
                                    figures, h, w = image_extractor.extract_figures_and_tables(img_bytes)
                                    extracted_figures = figures
                                    all_extracted_figures.extend(figures)
                                    
                                    if show_debug and figures:
                                        debug_img = image_extractor.create_debug_image(img_bytes, figures)
                                        all_debug_images.append((debug_img, page_num, figures))
                                    
                                    st.write(f"üñºÔ∏è Trang {page_num}: T√°ch ƒë∆∞·ª£c {len(figures)} diagrams (l·ªçc text blocks)")
                                except Exception as e:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√°ch ·∫£nh trang {page_num}: {str(e)}")
                            
                            # Prompt cho Gemini
                            prompt_text = """
Chuy·ªÉn ƒë·ªïi T·∫§T C·∫¢ n·ªôi dung trong ·∫£nh th√†nh vƒÉn b·∫£n thu·∫ßn t√∫y v·ªõi ƒë·ªãnh d·∫°ng CH√çNH X√ÅC.

üéØ ƒê·ªäNH D·∫†NG B·∫ÆT BU·ªòC:

1. **Tr·∫Øc nghi·ªám 4 ph∆∞∆°ng √°n - S·ª¨ D·ª§NG A), B), C), D):**
C√¢u X: [n·ªôi dung c√¢u h·ªèi ƒë·∫ßy ƒë·ªß]
A) [n·ªôi dung ƒë√°p √°n A ƒë·∫ßy ƒë·ªß]
B) [n·ªôi dung ƒë√°p √°n B ƒë·∫ßy ƒë·ªß]
C) [n·ªôi dung ƒë√°p √°n C ƒë·∫ßy ƒë·ªß]
D) [n·ªôi dung ƒë√°p √°n D ƒë·∫ßy ƒë·ªß]

2. **Tr·∫Øc nghi·ªám ƒë√∫ng sai - S·ª¨ D·ª§NG a), b), c), d):**
C√¢u X: [n·ªôi dung c√¢u h·ªèi n·∫øu c√≥]
a) [n·ªôi dung ƒë√°p √°n a ƒë·∫ßy ƒë·ªß]
b) [n·ªôi dung ƒë√°p √°n b ƒë·∫ßy ƒë·ªß]
c) [n·ªôi dung ƒë√°p √°n c ƒë·∫ßy ƒë·ªß]
d) [n·ªôi dung ƒë√°p √°n d ƒë·∫ßy ƒë·ªß]

3. **C√¥ng th·ª©c to√°n h·ªçc:**
- CH·ªà s·ª≠ d·ª•ng: ${x^2 + y^2}$ cho c√¥ng th·ª©c
- V√ç D·ª§: ${ABCD}$, ${A'C' \\perp BD}$, ${\\frac{a+b}{c-d}}$

‚ö†Ô∏è Y√äU C·∫¶U:
- TUY·ªÜT ƒê·ªêI s·ª≠ d·ª•ng A), B), C), D) cho tr·∫Øc nghi·ªám 4 ph∆∞∆°ng √°n
- TUY·ªÜT ƒê·ªêI s·ª≠ d·ª•ng a), b), c), d) cho tr·∫Øc nghi·ªám ƒë√∫ng sai
- CH·ªà vƒÉn b·∫£n thu·∫ßn t√∫y v·ªõi c√¥ng th·ª©c ${...}$
- Gi·ªØ ch√≠nh x√°c th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
- Bao g·ªìm t·∫•t c·∫£ text v√† c√¥ng th·ª©c t·ª´ ·∫£nh
"""
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt_text)
                                if latex_result:
                                    # Ch√®n ·∫£nh v√†o vƒÉn b·∫£n CH√çNH X√ÅC
                                    if enable_extraction and extracted_figures and CV2_AVAILABLE:
                                        latex_result = image_extractor.insert_figures_into_text_precisely(
                                            latex_result, extracted_figures, h, w
                                        )
                                    
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        st.text_area("üìù K·∫øt qu·∫£:", combined_latex, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # Th·ªëng k√™
                        if enable_extraction and CV2_AVAILABLE:
                            st.info(f"üñºÔ∏è T·ªïng c·ªông ƒë√£ t√°ch: {len(all_extracted_figures)} geometric diagrams (l·ªçc text blocks)")
                            
                            # Debug images
                            if show_debug and all_debug_images:
                                st.subheader("üîç Debug - Ch·ªâ Geometric Diagrams (l·ªçc text blocks)")
                                
                                for debug_img, page_num, figures in all_debug_images:
                                    st.write(f"**Trang {page_num}:**")
                                    st.image(debug_img, caption=f"Ph√°t hi·ªán {len(figures)} v√πng", use_column_width=True)
                                    
                                    if figures:
                                        cols = st.columns(min(len(figures), 3))
                                        for idx, fig in enumerate(figures):
                                            with cols[idx % 3]:
                                                img_data = base64.b64decode(fig['base64'])
                                                img_pil = Image.open(io.BytesIO(img_data))
                                                
                                                st.image(img_pil, caption=fig['name'], use_column_width=True)
                                                st.write(f"**{fig['name']}**")
                                                st.write(f"üè∑Ô∏è Lo·∫°i: {'üìä B·∫£ng' if fig['is_table'] else 'üìê Diagram'}")
                                                st.write(f"üéØ Confidence: {fig['confidence']:.1f}%")
                                                st.write(f"üìç V·ªã tr√≠ Y: {fig['y_position']}px")
                                                st.write(f"üìê T·ª∑ l·ªá: {fig['aspect_ratio']:.2f}")
                                                st.write(f"üîç Is Diagram: {fig.get('is_diagram', True)}")
                        
                        # L∆∞u session
                        st.session_state.pdf_latex_content = combined_latex
                        st.session_state.pdf_images = [img for img, _ in pdf_images]
                        st.session_state.pdf_extracted_figures = all_extracted_figures if enable_extraction else None
                
                # T·∫°o Word
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                extracted_figs = st.session_state.get('pdf_extracted_figures')
                                original_imgs = st.session_state.pdf_images
                                
                                word_buffer = SimpleWordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    extracted_figures=extracted_figs,
                                    images=original_imgs
                                )
                                
                                filename = f"{uploaded_pdf.name.split('.')[0]}_converted.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Tab Image
    with tab2:
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True
        )
        
        if uploaded_images:
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                for i, uploaded_image in enumerate(uploaded_images[:2]):
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                
                if len(uploaded_images) > 2:
                    st.info(f"... v√† {len(uploaded_images) - 2} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    all_extracted_figures = []
                    all_original_images = []
                    all_debug_images = []
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}...")
                        
                        image_bytes = uploaded_image.getvalue()
                        image_pil = Image.open(uploaded_image)
                        all_original_images.append(image_pil)
                        
                        # T√°ch ·∫£nh
                        extracted_figures = []
                        if enable_extraction and CV2_AVAILABLE:
                            try:
                                figures, h, w = image_extractor.extract_figures_and_tables(image_bytes)
                                extracted_figures = figures
                                all_extracted_figures.extend(figures)
                                
                                if show_debug and figures:
                                    debug_img = image_extractor.create_debug_image(image_bytes, figures)
                                    all_debug_images.append((debug_img, uploaded_image.name, figures))
                                
                                st.write(f"üñºÔ∏è {uploaded_image.name}: T√°ch ƒë∆∞·ª£c {len(figures)} diagrams (l·ªçc text blocks)")
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√°ch ·∫£nh {uploaded_image.name}: {str(e)}")
                        
                        prompt_text = """
Chuy·ªÉn ƒë·ªïi T·∫§T C·∫¢ n·ªôi dung trong ·∫£nh th√†nh vƒÉn b·∫£n thu·∫ßn t√∫y v·ªõi ƒë·ªãnh d·∫°ng CH√çNH X√ÅC.

üéØ ƒê·ªäNH D·∫†NG B·∫ÆT BU·ªòC:

1. **Tr·∫Øc nghi·ªám 4 ph∆∞∆°ng √°n - S·ª¨ D·ª§NG A), B), C), D):**
C√¢u X: [n·ªôi dung c√¢u h·ªèi ƒë·∫ßy ƒë·ªß]
A) [n·ªôi dung ƒë√°p √°n A ƒë·∫ßy ƒë·ªß]
B) [n·ªôi dung ƒë√°p √°n B ƒë·∫ßy ƒë·ªß]
C) [n·ªôi dung ƒë√°p √°n C ƒë·∫ßy ƒë·ªß]
D) [n·ªôi dung ƒë√°p √°n D ƒë·∫ßy ƒë·ªß]

2. **Tr·∫Øc nghi·ªám ƒë√∫ng sai - S·ª¨ D·ª§NG a), b), c), d):**
C√¢u X: [n·ªôi dung c√¢u h·ªèi n·∫øu c√≥]
a) [n·ªôi dung ƒë√°p √°n a ƒë·∫ßy ƒë·ªß]
b) [n·ªôi dung ƒë√°p √°n b ƒë·∫ßy ƒë·ªß]
c) [n·ªôi dung ƒë√°p √°n c ƒë·∫ßy ƒë·ªß]
d) [n·ªôi dung ƒë√°p √°n d ƒë·∫ßy ƒë·ªß]

3. **C√¥ng th·ª©c to√°n h·ªçc:**
- CH·ªà s·ª≠ d·ª•ng: ${x^2 + y^2}$ cho c√¥ng th·ª©c
- V√ç D·ª§: ${ABCD}$, ${A'C' \\perp BD}$

‚ö†Ô∏è Y√äU C·∫¶U:
- TUY·ªÜT ƒê·ªêI s·ª≠ d·ª•ng A), B), C), D) cho tr·∫Øc nghi·ªám 4 ph∆∞∆°ng √°n
- TUY·ªÜT ƒê·ªêI s·ª≠ d·ª•ng a), b), c), d) cho tr·∫Øc nghi·ªám ƒë√∫ng sai
- CH·ªà vƒÉn b·∫£n thu·∫ßn t√∫y v·ªõi c√¥ng th·ª©c ${...}$
"""
                        
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt_text
                            )
                            if latex_result:
                                if enable_extraction and extracted_figures and CV2_AVAILABLE:
                                    latex_result = image_extractor.insert_figures_into_text_precisely(
                                        latex_result, extracted_figures, h, w
                                    )
                                
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    combined_latex = "\n".join(all_latex_content)
                    
                    st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                    st.text_area("üìù K·∫øt qu·∫£:", combined_latex, height=300)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Th·ªëng k√™ v√† debug
                    if enable_extraction and CV2_AVAILABLE:
                        st.info(f"üñºÔ∏è T·ªïng c·ªông ƒë√£ t√°ch: {len(all_extracted_figures)} geometric diagrams (l·ªçc text blocks)")
                        
                        if show_debug and all_debug_images:
                            st.subheader("üîç Debug - Ch·ªâ Geometric Diagrams (l·ªçc text blocks)")
                            
                            for debug_img, img_name, figures in all_debug_images:
                                st.write(f"**{img_name}:**")
                                st.image(debug_img, caption=f"Ph√°t hi·ªán {len(figures)} v√πng", use_column_width=True)
                                
                                if figures:
                                    cols = st.columns(min(len(figures), 3))
                                    for idx, fig in enumerate(figures):
                                        with cols[idx % 3]:
                                            img_data = base64.b64decode(fig['base64'])
                                            img_pil = Image.open(io.BytesIO(img_data))
                                            
                                            st.image(img_pil, caption=fig['name'], use_column_width=True)
                                            st.write(f"**{fig['name']}**")
                                            st.write(f"üè∑Ô∏è Lo·∫°i: {'üìä B·∫£ng' if fig['is_table'] else 'üìê Diagram'}")
                                            st.write(f"üéØ Confidence: {fig['confidence']:.1f}%")
                                            st.write(f"üìç V·ªã tr√≠ Y: {fig['y_position']}px")
                                            st.write(f"üìê T·ª∑ l·ªá: {fig['aspect_ratio']:.2f}")
                                            st.write(f"üîç Is Diagram: {fig.get('is_diagram', True)}")
                    
                    # L∆∞u session
                    st.session_state.image_latex_content = combined_latex
                    st.session_state.image_list = all_original_images
                    st.session_state.image_extracted_figures = all_extracted_figures if enable_extraction else None
                
                # T·∫°o Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                extracted_figs = st.session_state.get('image_extracted_figures')
                                original_imgs = st.session_state.image_list
                                
                                word_buffer = SimpleWordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    extracted_figures=extracted_figs,
                                    images=original_imgs
                                )
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name="images_converted.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>üéØ <strong>PRECISE & SMART VERSION:</strong> L·ªçc text blocks + Ch√®n ch√≠nh x√°c 100%</p>
        <p>üìù <strong>Smart Filtering:</strong> Ch·ªâ t√°ch geometric diagrams, b·ªè qua text blocks m√†u</p>
        <p>üîç <strong>Precise Insertion:</strong> √Ånh x·∫° figure-question + priority-based positioning</p>
        <p>üìÑ <strong>Perfect Results:</strong> H√¨nh ƒë√∫ng v·ªã tr√≠, kh√¥ng c·∫Øt nh·∫ßm b·∫£ng ƒë√°p √°n</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
