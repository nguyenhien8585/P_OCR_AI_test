import streamlit as st
import requests
import base64
import io
import json
from PIL import Image
import fitz  # PyMuPDF
from docx import Document
import tempfile
import os
from typing import List, Tuple
import re

# Import utility functions
try:
    from utils import (
        clean_latex_content, validate_api_key, format_file_size,
        validate_image_file, validate_pdf_file, extract_latex_equations,
        count_math_content, show_processing_stats, create_latex_preview,
        generate_filename, ConversionHistory, show_tips_and_tricks,
        handle_api_errors
    )
except ImportError:
    # Fallback n·∫øu utils.py kh√¥ng c√≥
    import time
    def clean_latex_content(text): return text.strip()
    def validate_api_key(key): return len(key) > 10 if key else False
    def format_file_size(size): return f"{size/1024:.1f} KB"
    def validate_image_file(f): return (True, "OK") if f else (False, "No file")
    def validate_pdf_file(f): return (True, "OK") if f else (False, "No file")
    def extract_latex_equations(text): return []
    def count_math_content(text): return {'total_equations': 0}
    def show_processing_stats(stats): pass
    def create_latex_preview(text, max_len=1000): return text[:max_len]
    def generate_filename(name, suffix="converted"): return f"{name}_{suffix}.docx"
    class ConversionHistory:
        @staticmethod
        def add_to_history(input_type, filename, success, latex_length=0):
            if 'conversion_history' not in st.session_state:
                st.session_state.conversion_history = []
            entry = {
                'timestamp': time.strftime("%Y-%m-%d %H:%M:%S"),
                'input_type': input_type,
                'filename': filename,
                'success': success,
                'latex_length': latex_length
            }
            st.session_state.conversion_history.append(entry)
        @staticmethod
        def show_history(): 
            if 'conversion_history' in st.session_state:
                st.write("üìä L·ªãch s·ª≠:", len(st.session_state.conversion_history), "items")
        @staticmethod
        def clear_history():
            if 'conversion_history' in st.session_state:
                del st.session_state.conversion_history
    def show_tips_and_tricks(): pass
    def handle_api_errors(func): return func

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="PDF/Image to LaTeX Converter",
    page_icon="üìù",
    layout="wide"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #2E86AB;
        font-size: 2.5rem;
        margin-bottom: 2rem;
    }
    .tab-content {
        padding: 2rem;
        border-radius: 10px;
        background-color: #f8f9fa;
        margin: 1rem 0;
    }
    .latex-output {
        background-color: #f4f4f4;
        padding: 1rem;
        border-radius: 5px;
        font-family: 'Courier New', monospace;
        border-left: 4px solid #2E86AB;
    }
    .success-message {
        color: #28a745;
        font-weight: bold;
    }
    .error-message {
        color: #dc3545;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

class GeminiAPI:
    def __init__(self, api_key: str):
        if not validate_api_key(api_key):
            raise ValueError("API key kh√¥ng h·ª£p l·ªá")
        self.api_key = api_key
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    
    def encode_image(self, image_data: bytes) -> str:
        """M√£ h√≥a ·∫£nh th√†nh base64"""
        return base64.b64encode(image_data).decode('utf-8')
    
    @handle_api_errors
    def convert_to_latex(self, content_data: bytes, content_type: str, prompt: str) -> str:
        """Chuy·ªÉn ƒë·ªïi n·ªôi dung sang LaTeX s·ª≠ d·ª•ng Gemini API"""
        headers = {
            "Content-Type": "application/json"
        }
        
        # Validate input data
        if not content_data:
            raise ValueError("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω")
        
        if len(content_data) > 10 * 1024 * 1024:  # 10MB limit
            raise ValueError("File qu√° l·ªõn. Gi·ªõi h·∫°n 10MB")
        
        # T·∫°o payload cho API
        if content_type.startswith('image/'):
            mime_type = content_type
            encoded_content = self.encode_image(content_data)
        else:
            mime_type = "image/png"  # Cho PDF ƒë√£ convert th√†nh ·∫£nh
            encoded_content = self.encode_image(content_data)
        
        payload = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": prompt
                        },
                        {
                            "inline_data": {
                                "mime_type": mime_type,
                                "data": encoded_content
                            }
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.1,
                "topK": 1,
                "topP": 0.8,
                "maxOutputTokens": 8192,
            },
            "safetySettings": [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH", 
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_NONE"
                }
            ]
        }
        
        try:
            response = requests.post(
                f"{self.base_url}?key={self.api_key}",
                headers=headers,
                json=payload,
                timeout=90  # TƒÉng timeout l√™n 90s
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'candidates' in result and len(result['candidates']) > 0:
                    content = result['candidates'][0]['content']['parts'][0]['text']
                    # Clean v√† validate LaTeX output
                    cleaned_content = clean_latex_content(content)
                    return cleaned_content
                else:
                    raise Exception("API kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá")
            elif response.status_code == 401:
                raise Exception("API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
            elif response.status_code == 429:
                raise Exception("ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n rate limit")
            elif response.status_code == 400:
                raise Exception("Request kh√¥ng h·ª£p l·ªá")
            else:
                raise Exception(f"API Error {response.status_code}: {response.text}")
        
        except requests.exceptions.Timeout:
            raise Exception("Request timeout - th·ª≠ l·∫°i sau √≠t ph√∫t")
        except requests.exceptions.ConnectionError:
            raise Exception("L·ªói k·∫øt n·ªëi m·∫°ng")
        except Exception as e:
            raise Exception(str(e))

class PDFProcessor:
    @staticmethod
    def extract_images_and_text(pdf_file) -> List[Tuple[Image.Image, int]]:
        """Tr√≠ch xu·∫•t ·∫£nh v√† chuy·ªÉn ƒë·ªïi trang PDF th√†nh ·∫£nh"""
        pdf_document = fitz.open(stream=pdf_file.read(), filetype="pdf")
        images = []
        
        for page_num in range(pdf_document.page_count):
            page = pdf_document[page_num]
            
            # Chuy·ªÉn ƒë·ªïi trang th√†nh ·∫£nh
            mat = fitz.Matrix(2.0, 2.0)  # TƒÉng ƒë·ªô ph√¢n gi·∫£i
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            img = Image.open(io.BytesIO(img_data))
            images.append((img, page_num + 1))
        
        pdf_document.close()
        return images

class WordExporter:
    @staticmethod
    def create_word_document(latex_content: str, images: List[Image.Image] = None) -> io.BytesIO:
        """T·∫°o file Word v·ªõi equations t·ª´ LaTeX"""
        doc = Document()
        
        # Th√™m ti√™u ƒë·ªÅ
        title = doc.add_heading('T√†i li·ªáu ƒë√£ chuy·ªÉn ƒë·ªïi t·ª´ PDF/·∫¢nh', 0)
        title.alignment = 1  # Center alignment
        
        # Th√™m th√¥ng tin metadata
        doc.add_paragraph(f"ƒê∆∞·ª£c t·∫°o b·ªüi PDF/Image to LaTeX Converter")
        doc.add_paragraph(f"Th·ªùi gian: {str(st.session_state.get('conversion_time', 'N/A'))}")
        doc.add_paragraph("")  # Empty line
        
        # X·ª≠ l√Ω n·ªôi dung LaTeX
        lines = latex_content.split('\n')
        current_paragraph = None
        
        for line in lines:
            line = line.strip()
            
            # Skip comments
            if line.startswith('<!--') and line.endswith('-->'):
                # Add as heading for source file info
                if 'Trang' in line or '·∫¢nh' in line:
                    doc.add_heading(line.replace('<!--', '').replace('-->', '').strip(), level=2)
                continue
            
            if not line:
                current_paragraph = None
                continue
            
            # T√¨m c√°c c√¥ng th·ª©c LaTeX
            latex_patterns = re.findall(r'\$\$([^$]+)\$\$|\$([^$]+)\

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key v√† settings
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        # Validation API key real-time
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
                st.info("API key ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i, s·ªë, d·∫•u g·∫°ch ngang v√† underscore")
        
        st.markdown("---")
        
        # Settings
        st.subheader("üéõÔ∏è T√πy ch·ªçn")
        
        max_file_size = st.selectbox(
            "Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file",
            ["10MB", "20MB", "50MB"],
            index=1
        )
        
        output_format = st.selectbox(
            "ƒê·ªãnh d·∫°ng output",
            ["LaTeX ($...$)", "MathJax", "AsciiMath"],
            index=0
        )
        
        include_images = st.checkbox("Bao g·ªìm h√¨nh ·∫£nh trong Word", value=True)
        
        st.markdown("---")
        
        # Conversion History
        st.subheader("üìä L·ªãch s·ª≠")
        ConversionHistory.show_history()
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
            ConversionHistory.clear_history()
            st.rerun()
        
        st.markdown("---")
        
        # Tips v√† h∆∞·ªõng d·∫´n
        show_tips_and_tricks()
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i [Google AI Studio](https://makersuite.google.com/app/apikey)")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2, tab3 = st.tabs(["üìÑ PDF to LaTeX", "üñºÔ∏è Image to LaTeX", "üìã Batch Processing"])
    
    # Kh·ªüi t·∫°o API v·ªõi error handling
    try:
        gemini_api = GeminiAPI(api_key)
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o API: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_pdf:
            # Validate PDF file
            is_valid, error_msg = validate_pdf_file(uploaded_pdf)
            if not is_valid:
                st.error(f"‚ùå {error_msg}")
                return
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                
                # Hi·ªÉn th·ªã th√¥ng tin file
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                # Extract images t·ª´ PDF
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview c√°c trang
                        for img, page_num in pdf_images[:3]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 3 trang ƒë·∫ßu
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 3:
                            st.info(f"... v√† {len(pdf_images) - 3} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        ConversionHistory.add_to_history("PDF", uploaded_pdf.name, False)
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        conversion_successful = True
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T·∫°o prompt cho Gemini
                            prompt = f"""
                            H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh trang {page_num} th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.
                            
                            Y√äU C·∫¶U QUAN TR·ªåNG:
                            1. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c inline (trong d√≤ng)
                            2. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c display (ri√™ng d√≤ng)
                            3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
                            4. Bao g·ªìm T·∫§T C·∫¢ text th∆∞·ªùng v√† c√¥ng th·ª©c to√°n h·ªçc
                            5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n (\\frac, \\sqrt, \\sum, \\int, ...)
                            6. X·ª≠ l√Ω ƒë√∫ng c√°c ch·ªâ s·ªë tr√™n/d∆∞·ªõi, ma tr·∫≠n, h·ªá ph∆∞∆°ng tr√¨nh
                            7. N·∫øu c√≥ b·∫£ng, s·ª≠ d·ª•ng tabular environment
                            8. M√¥ t·∫£ ng·∫Øn g·ªçn c√°c h√¨nh v·∫Ω/bi·ªÉu ƒë·ªì n·∫øu c√≥
                            
                            ƒê·ªäNH D·∫†NG OUTPUT MONG MU·ªêN:
                            - Text th∆∞·ªùng: vi·∫øt b√¨nh th∆∞·ªùng
                            - C√¥ng th·ª©c inline: ${{x^2 + y^2 = z^2}}$
                            - C√¥ng th·ª©c display: ${{\\int_0^1 x dx = \\frac{{1}}{{2}}}}$
                            - Ma tr·∫≠n: ${{A = \\begin{{pmatrix}} a & b \\\\ c & d \\end{{pmatrix}}}}$
                            
                            H√£y ƒë·∫£m b·∫£o LaTeX output c√≥ th·ªÉ compile ƒë∆∞·ª£c v√† ch√≠nh x√°c 100%.
                            """
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                                    conversion_successful = False
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                                conversion_successful = False
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        if conversion_successful:
                            status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                            
                            # Combine v√† hi·ªÉn th·ªã k·∫øt qu·∫£
                            combined_latex = "\n".join(all_latex_content)
                            
                            # Th·ªëng k√™ k·∫øt qu·∫£
                            stats = count_math_content(combined_latex)
                            show_processing_stats(stats)
                            
                            # Hi·ªÉn th·ªã preview
                            st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                            preview_content = create_latex_preview(combined_latex, 2000)
                            st.text_area("üìù K·∫øt qu·∫£ LaTeX (Preview):", preview_content, height=300)
                            st.markdown('</div>', unsafe_allow_html=True)
                            
                            # L∆∞u v√†o session state ƒë·ªÉ t√°i s·ª≠ d·ª•ng
                            st.session_state.pdf_latex_content = combined_latex
                            st.session_state.pdf_images = [img for img, _ in pdf_images]
                            
                            # Add to history
                            ConversionHistory.add_to_history(
                                "PDF", uploaded_pdf.name, True, len(combined_latex)
                            )
                            
                        else:
                            status_text.text("‚ùå M·ªôt s·ªë trang kh√¥ng th·ªÉ x·ª≠ l√Ω")
                            ConversionHistory.add_to_history("PDF", uploaded_pdf.name, False)
                
                # T·∫°o file Word n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                images_to_include = st.session_state.pdf_images if include_images else None
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    images_to_include
                                )
                                
                                filename = generate_filename(uploaded_pdf.name, "latex_converted")
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                
                                # Download LaTeX source
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Tab x·ª≠ l√Ω ·∫£nh
    with tab2:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_images:
            # Validate all images
            all_valid = True
            for uploaded_image in uploaded_images:
                is_valid, error_msg = validate_image_file(uploaded_image)
                if not is_valid:
                    st.error(f"‚ùå {uploaded_image.name}: {error_msg}")
                    all_valid = False
            
            if not all_valid:
                return
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                # Hi·ªÉn th·ªã preview
                for i, uploaded_image in enumerate(uploaded_images[:5]):  # T·ªëi ƒëa 5 ·∫£nh
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                    st.caption(f"üìè {image.size[0]}x{image.size[1]} pixels")
                
                if len(uploaded_images) > 5:
                    st.info(f"... v√† {len(uploaded_images) - 5} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                # T√πy ch·ªçn x·ª≠ l√Ω
                processing_mode = st.radio(
                    "Ch·∫ø ƒë·ªô x·ª≠ l√Ω:",
                    ["T·ª± ƒë·ªông", "T√πy ch·ªânh prompt"],
                    help="T·ª± ƒë·ªông: s·ª≠ d·ª•ng prompt m·∫∑c ƒë·ªãnh. T√πy ch·ªânh: b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a prompt"
                )
                
                custom_prompt = ""
                if processing_mode == "T√πy ch·ªânh prompt":
                    custom_prompt = st.text_area(
                        "Prompt t√πy ch·ªânh:",
                        value="""Chuy·ªÉn ƒë·ªïi n·ªôi dung to√°n h·ªçc th√†nh LaTeX format ch√≠nh x√°c.
S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations.
Gi·ªØ nguy√™n c·∫•u tr√∫c v√† th·ª© t·ª± n·ªôi dung.""",
                        height=100
                    )
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    conversion_successful = True
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        # ƒê·ªçc ·∫£nh
                        image_bytes = uploaded_image.getvalue()
                        
                        # T·∫°o prompt
                        if processing_mode == "T√πy ch·ªânh prompt" and custom_prompt:
                            prompt = custom_prompt
                        else:
                            prompt = f"""
                            Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.
                            
                            Y√äU C·∫¶U QUAN TR·ªåNG:
                            1. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c inline (trong d√≤ng)
                            2. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c display (ri√™ng d√≤ng)  
                            3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
                            4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
                            5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
                            6. X·ª≠ l√Ω ƒë√∫ng ma tr·∫≠n, h·ªá ph∆∞∆°ng tr√¨nh, t√≠ch ph√¢n, ƒë·∫°o h√†m
                            7. N·∫øu c√≥ bi·ªÉu ƒë·ªì/h√¨nh v·∫Ω, m√¥ t·∫£ ng·∫Øn g·ªçn
                            8. ƒê·∫£m b·∫£o LaTeX c√≥ th·ªÉ compile ƒë∆∞·ª£c
                            
                            ƒê·ªäNH D·∫†NG OUTPUT:
                            - Text: vi·∫øt b√¨nh th∆∞·ªùng
                            - Inline: ${{x^2 + 1}}$
                            - Display: ${{\\int_0^\\infty e^{{-x}} dx = 1}}$
                            - Ma tr·∫≠n: ${{\\begin{{pmatrix}} a & b \\\\ c & d \\end{{pmatrix}}}}$
                            """
                        
                        # G·ªçi API
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                                conversion_successful = False
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                            conversion_successful = False
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    if conversion_successful:
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Combine v√† hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        # Th·ªëng k√™
                        stats = count_math_content(combined_latex)
                        show_processing_stats(stats)
                        
                        # Preview
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        preview_content = create_latex_preview(combined_latex, 2000)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX (Preview):", preview_content, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # L∆∞u v√†o session
                        st.session_state.image_latex_content = combined_latex
                        st.session_state.image_list = [Image.open(img) for img in uploaded_images]
                        
                        # Add to history
                        ConversionHistory.add_to_history(
                            "Images", f"{len(uploaded_images)} files", True, len(combined_latex)
                        )
                    else:
                        status_text.text("‚ùå M·ªôt s·ªë ·∫£nh kh√¥ng th·ªÉ x·ª≠ l√Ω")
                        ConversionHistory.add_to_history("Images", f"{len(uploaded_images)} files", False)
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                images_to_include = st.session_state.image_list if include_images else None
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    images_to_include
                                )
                                
                                filename = "images_latex_converted.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                
                                # Download LaTeX
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Tab Batch Processing
    with tab3:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üìã X·ª≠ l√Ω h√†ng lo·∫°t")
        
        st.info("üöÄ T√≠nh nƒÉng n√†y cho ph√©p x·ª≠ l√Ω nhi·ªÅu file PDF v√† ·∫£nh c√πng l√∫c")
        
        # Upload multiple files
        batch_files = st.file_uploader(
            "Ch·ªçn nhi·ªÅu file (PDF v√† ·∫£nh)",
            type=['pdf', 'png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload nhi·ªÅu file PDF v√† ·∫£nh ƒë·ªÉ x·ª≠ l√Ω c√πng l√∫c"
        )
        
        if batch_files:
            st.write(f"üìÅ ƒê√£ ch·ªçn {len(batch_files)} file(s)")
            
            # Ph√¢n lo·∫°i files
            pdf_files = [f for f in batch_files if f.type == 'application/pdf']
            image_files = [f for f in batch_files if f.type.startswith('image/')]
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("üìÑ PDF files", len(pdf_files))
            with col2:
                st.metric("üñºÔ∏è Image files", len(image_files))
            
            # Hi·ªÉn th·ªã danh s√°ch files
            with st.expander("üìÇ Danh s√°ch files"):
                for i, file in enumerate(batch_files):
                    file_type = "üìÑ" if file.type == 'application/pdf' else "üñºÔ∏è"
                    st.write(f"{file_type} {file.name} ({format_file_size(file.size)})")
            
            # Batch processing options
            st.subheader("‚öôÔ∏è T√πy ch·ªçn x·ª≠ l√Ω")
            
            col1, col2 = st.columns(2)
            with col1:
                merge_output = st.checkbox("G·ªôp t·∫•t c·∫£ th√†nh 1 file Word", value=True)
                include_source_name = st.checkbox("Ghi r√µ t√™n file g·ªëc", value=True)
            
            with col2:
                skip_errors = st.checkbox("B·ªè qua files l·ªói", value=True)
                max_concurrent = st.slider("S·ªë file x·ª≠ l√Ω ƒë·ªìng th·ªùi", 1, 5, 2)
            
            if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t", key="batch_process"):
                batch_results = []
                
                # Create main progress bar
                main_progress = st.progress(0)
                main_status = st.empty()
                
                for i, file in enumerate(batch_files):
                    main_status.text(f"ƒêang x·ª≠ l√Ω {i+1}/{len(batch_files)}: {file.name}")
                    
                    try:
                        if file.type == 'application/pdf':
                            # Process PDF
                            pdf_images = PDFProcessor.extract_images_and_text(file)
                            
                            file_latex_content = []
                            for img, page_num in pdf_images:
                                img_buffer = io.BytesIO()
                                img.save(img_buffer, format='PNG')
                                img_bytes = img_buffer.getvalue()
                                
                                prompt = """Chuy·ªÉn ƒë·ªïi n·ªôi dung th√†nh LaTeX format ch√≠nh x√°c.
                                S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations."""
                                
                                latex_result = gemini_api.convert_to_latex(
                                    img_bytes, "image/png", prompt
                                )
                                if latex_result:
                                    file_latex_content.append(latex_result)
                            
                            combined_content = "\n".join(file_latex_content)
                            
                        else:
                            # Process Image
                            image_bytes = file.getvalue()
                            prompt = """Chuy·ªÉn ƒë·ªïi n·ªôi dung th√†nh LaTeX format ch√≠nh x√°c.
                            S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations."""
                            
                            combined_content = gemini_api.convert_to_latex(
                                image_bytes, file.type, prompt
                            )
                        
                        if combined_content:
                            if include_source_name:
                                combined_content = f"<!-- Source: {file.name} -->\n{combined_content}"
                            
                            batch_results.append({
                                'filename': file.name,
                                'content': combined_content,
                                'success': True
                            })
                        else:
                            raise Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ API")
                    
                    except Exception as e:
                        error_msg = f"L·ªói x·ª≠ l√Ω {file.name}: {str(e)}"
                        if skip_errors:
                            st.warning(f"‚ö†Ô∏è {error_msg}")
                            batch_results.append({
                                'filename': file.name,
                                'content': f"<!-- ERROR: {error_msg} -->",
                                'success': False
                            })
                        else:
                            st.error(f"‚ùå {error_msg}")
                            break
                    
                    main_progress.progress((i + 1) / len(batch_files))
                
                # Process results
                successful_files = [r for r in batch_results if r['success']]
                failed_files = [r for r in batch_results if not r['success']]
                
                main_status.text(f"‚úÖ Ho√†n th√†nh: {len(successful_files)} th√†nh c√¥ng, {len(failed_files)} l·ªói")
                
                if successful_files:
                    if merge_output:
                        # Merge all content
                        all_content = "\n\n".join([r['content'] for r in successful_files])
                        
                        # Show stats
                        stats = count_math_content(all_content)
                        show_processing_stats(stats)
                        
                        # Create Word file
                        st.subheader("üì• T·∫£i k·∫øt qu·∫£")
                        
                        if st.button("üì• T·∫°o file Word g·ªôp", key="create_batch_word"):
                            with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                                try:
                                    word_buffer = WordExporter.create_word_document(all_content)
                                    
                                    st.download_button(
                                        label="üì• T·∫£i file Word g·ªôp",
                                        data=word_buffer.getvalue(),
                                        file_name="batch_converted.docx",
                                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                    )
                                    
                                    st.download_button(
                                        label="üìù T·∫£i LaTeX source",
                                        data=all_content,
                                        file_name="batch_converted.tex",
                                        mime="text/plain"
                                    )
                                    
                                    st.success("‚úÖ File ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                except Exception as e:
                                    st.error(f"‚ùå L·ªói t·∫°o file: {str(e)}")
                    
                    else:
                        # Individual downloads
                        st.subheader("üì• T·∫£i t·ª´ng file")
                        for result in successful_files:
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                st.write(f"‚úÖ {result['filename']}")
                            with col2:
                                st.download_button(
                                    label="üì• T·∫£i",
                                    data=result['content'],
                                    file_name=f"{result['filename']}.tex",
                                    mime="text/plain",
                                    key=f"download_{result['filename']}"
                                )
                
                # Add batch to history
                ConversionHistory.add_to_history(
                    "Batch", 
                    f"{len(batch_files)} files", 
                    len(successful_files) > 0,
                    sum(len(r['content']) for r in successful_files)
                )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi PDF v√† ·∫£nh sang LaTeX v·ªõi ƒë·ªô ch√≠nh x√°c cao</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main(), line)
            
            if latex_patterns:
                # T·∫°o paragraph m·ªõi n·∫øu c·∫ßn
                if current_paragraph is None:
                    current_paragraph = doc.add_paragraph()
                
                # X·ª≠ l√Ω line c√≥ ch·ª©a LaTeX
                remaining_text = line
                
                # Replace display math ($...$) first
                display_matches = re.finditer(r'\$\$([^$]+)\$\

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key v√† settings
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        # Validation API key real-time
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
                st.info("API key ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i, s·ªë, d·∫•u g·∫°ch ngang v√† underscore")
        
        st.markdown("---")
        
        # Settings
        st.subheader("üéõÔ∏è T√πy ch·ªçn")
        
        max_file_size = st.selectbox(
            "Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file",
            ["10MB", "20MB", "50MB"],
            index=1
        )
        
        output_format = st.selectbox(
            "ƒê·ªãnh d·∫°ng output",
            ["LaTeX ($...$)", "MathJax", "AsciiMath"],
            index=0
        )
        
        include_images = st.checkbox("Bao g·ªìm h√¨nh ·∫£nh trong Word", value=True)
        
        st.markdown("---")
        
        # Conversion History
        st.subheader("üìä L·ªãch s·ª≠")
        ConversionHistory.show_history()
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
            ConversionHistory.clear_history()
            st.rerun()
        
        st.markdown("---")
        
        # Tips v√† h∆∞·ªõng d·∫´n
        show_tips_and_tricks()
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i [Google AI Studio](https://makersuite.google.com/app/apikey)")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2, tab3 = st.tabs(["üìÑ PDF to LaTeX", "üñºÔ∏è Image to LaTeX", "üìã Batch Processing"])
    
    # Kh·ªüi t·∫°o API v·ªõi error handling
    try:
        gemini_api = GeminiAPI(api_key)
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o API: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_pdf:
            # Validate PDF file
            is_valid, error_msg = validate_pdf_file(uploaded_pdf)
            if not is_valid:
                st.error(f"‚ùå {error_msg}")
                return
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                
                # Hi·ªÉn th·ªã th√¥ng tin file
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                # Extract images t·ª´ PDF
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview c√°c trang
                        for img, page_num in pdf_images[:3]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 3 trang ƒë·∫ßu
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 3:
                            st.info(f"... v√† {len(pdf_images) - 3} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        ConversionHistory.add_to_history("PDF", uploaded_pdf.name, False)
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        conversion_successful = True
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T·∫°o prompt cho Gemini
                            prompt = f"""
                            H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh trang {page_num} th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.
                            
                            Y√äU C·∫¶U QUAN TR·ªåNG:
                            1. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c inline (trong d√≤ng)
                            2. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c display (ri√™ng d√≤ng)
                            3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
                            4. Bao g·ªìm T·∫§T C·∫¢ text th∆∞·ªùng v√† c√¥ng th·ª©c to√°n h·ªçc
                            5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n (\\frac, \\sqrt, \\sum, \\int, ...)
                            6. X·ª≠ l√Ω ƒë√∫ng c√°c ch·ªâ s·ªë tr√™n/d∆∞·ªõi, ma tr·∫≠n, h·ªá ph∆∞∆°ng tr√¨nh
                            7. N·∫øu c√≥ b·∫£ng, s·ª≠ d·ª•ng tabular environment
                            8. M√¥ t·∫£ ng·∫Øn g·ªçn c√°c h√¨nh v·∫Ω/bi·ªÉu ƒë·ªì n·∫øu c√≥
                            
                            ƒê·ªäNH D·∫†NG OUTPUT MONG MU·ªêN:
                            - Text th∆∞·ªùng: vi·∫øt b√¨nh th∆∞·ªùng
                            - C√¥ng th·ª©c inline: ${{x^2 + y^2 = z^2}}$
                            - C√¥ng th·ª©c display: ${{\\int_0^1 x dx = \\frac{{1}}{{2}}}}$
                            - Ma tr·∫≠n: ${{A = \\begin{{pmatrix}} a & b \\\\ c & d \\end{{pmatrix}}}}$
                            
                            H√£y ƒë·∫£m b·∫£o LaTeX output c√≥ th·ªÉ compile ƒë∆∞·ª£c v√† ch√≠nh x√°c 100%.
                            """
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                                    conversion_successful = False
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                                conversion_successful = False
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        if conversion_successful:
                            status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                            
                            # Combine v√† hi·ªÉn th·ªã k·∫øt qu·∫£
                            combined_latex = "\n".join(all_latex_content)
                            
                            # Th·ªëng k√™ k·∫øt qu·∫£
                            stats = count_math_content(combined_latex)
                            show_processing_stats(stats)
                            
                            # Hi·ªÉn th·ªã preview
                            st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                            preview_content = create_latex_preview(combined_latex, 2000)
                            st.text_area("üìù K·∫øt qu·∫£ LaTeX (Preview):", preview_content, height=300)
                            st.markdown('</div>', unsafe_allow_html=True)
                            
                            # L∆∞u v√†o session state ƒë·ªÉ t√°i s·ª≠ d·ª•ng
                            st.session_state.pdf_latex_content = combined_latex
                            st.session_state.pdf_images = [img for img, _ in pdf_images]
                            
                            # Add to history
                            ConversionHistory.add_to_history(
                                "PDF", uploaded_pdf.name, True, len(combined_latex)
                            )
                            
                        else:
                            status_text.text("‚ùå M·ªôt s·ªë trang kh√¥ng th·ªÉ x·ª≠ l√Ω")
                            ConversionHistory.add_to_history("PDF", uploaded_pdf.name, False)
                
                # T·∫°o file Word n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                images_to_include = st.session_state.pdf_images if include_images else None
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    images_to_include
                                )
                                
                                filename = generate_filename(uploaded_pdf.name, "latex_converted")
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                
                                # Download LaTeX source
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Tab x·ª≠ l√Ω ·∫£nh
    with tab2:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_images:
            # Validate all images
            all_valid = True
            for uploaded_image in uploaded_images:
                is_valid, error_msg = validate_image_file(uploaded_image)
                if not is_valid:
                    st.error(f"‚ùå {uploaded_image.name}: {error_msg}")
                    all_valid = False
            
            if not all_valid:
                return
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                # Hi·ªÉn th·ªã preview
                for i, uploaded_image in enumerate(uploaded_images[:5]):  # T·ªëi ƒëa 5 ·∫£nh
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                    st.caption(f"üìè {image.size[0]}x{image.size[1]} pixels")
                
                if len(uploaded_images) > 5:
                    st.info(f"... v√† {len(uploaded_images) - 5} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                # T√πy ch·ªçn x·ª≠ l√Ω
                processing_mode = st.radio(
                    "Ch·∫ø ƒë·ªô x·ª≠ l√Ω:",
                    ["T·ª± ƒë·ªông", "T√πy ch·ªânh prompt"],
                    help="T·ª± ƒë·ªông: s·ª≠ d·ª•ng prompt m·∫∑c ƒë·ªãnh. T√πy ch·ªânh: b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a prompt"
                )
                
                custom_prompt = ""
                if processing_mode == "T√πy ch·ªânh prompt":
                    custom_prompt = st.text_area(
                        "Prompt t√πy ch·ªânh:",
                        value="""Chuy·ªÉn ƒë·ªïi n·ªôi dung to√°n h·ªçc th√†nh LaTeX format ch√≠nh x√°c.
S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations.
Gi·ªØ nguy√™n c·∫•u tr√∫c v√† th·ª© t·ª± n·ªôi dung.""",
                        height=100
                    )
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    conversion_successful = True
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        # ƒê·ªçc ·∫£nh
                        image_bytes = uploaded_image.getvalue()
                        
                        # T·∫°o prompt
                        if processing_mode == "T√πy ch·ªânh prompt" and custom_prompt:
                            prompt = custom_prompt
                        else:
                            prompt = f"""
                            Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.
                            
                            Y√äU C·∫¶U QUAN TR·ªåNG:
                            1. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c inline (trong d√≤ng)
                            2. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c display (ri√™ng d√≤ng)  
                            3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
                            4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
                            5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
                            6. X·ª≠ l√Ω ƒë√∫ng ma tr·∫≠n, h·ªá ph∆∞∆°ng tr√¨nh, t√≠ch ph√¢n, ƒë·∫°o h√†m
                            7. N·∫øu c√≥ bi·ªÉu ƒë·ªì/h√¨nh v·∫Ω, m√¥ t·∫£ ng·∫Øn g·ªçn
                            8. ƒê·∫£m b·∫£o LaTeX c√≥ th·ªÉ compile ƒë∆∞·ª£c
                            
                            ƒê·ªäNH D·∫†NG OUTPUT:
                            - Text: vi·∫øt b√¨nh th∆∞·ªùng
                            - Inline: ${{x^2 + 1}}$
                            - Display: ${{\\int_0^\\infty e^{{-x}} dx = 1}}$
                            - Ma tr·∫≠n: ${{\\begin{{pmatrix}} a & b \\\\ c & d \\end{{pmatrix}}}}$
                            """
                        
                        # G·ªçi API
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                                conversion_successful = False
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                            conversion_successful = False
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    if conversion_successful:
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Combine v√† hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        # Th·ªëng k√™
                        stats = count_math_content(combined_latex)
                        show_processing_stats(stats)
                        
                        # Preview
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        preview_content = create_latex_preview(combined_latex, 2000)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX (Preview):", preview_content, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # L∆∞u v√†o session
                        st.session_state.image_latex_content = combined_latex
                        st.session_state.image_list = [Image.open(img) for img in uploaded_images]
                        
                        # Add to history
                        ConversionHistory.add_to_history(
                            "Images", f"{len(uploaded_images)} files", True, len(combined_latex)
                        )
                    else:
                        status_text.text("‚ùå M·ªôt s·ªë ·∫£nh kh√¥ng th·ªÉ x·ª≠ l√Ω")
                        ConversionHistory.add_to_history("Images", f"{len(uploaded_images)} files", False)
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                images_to_include = st.session_state.image_list if include_images else None
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    images_to_include
                                )
                                
                                filename = "images_latex_converted.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                
                                # Download LaTeX
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Tab Batch Processing
    with tab3:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üìã X·ª≠ l√Ω h√†ng lo·∫°t")
        
        st.info("üöÄ T√≠nh nƒÉng n√†y cho ph√©p x·ª≠ l√Ω nhi·ªÅu file PDF v√† ·∫£nh c√πng l√∫c")
        
        # Upload multiple files
        batch_files = st.file_uploader(
            "Ch·ªçn nhi·ªÅu file (PDF v√† ·∫£nh)",
            type=['pdf', 'png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload nhi·ªÅu file PDF v√† ·∫£nh ƒë·ªÉ x·ª≠ l√Ω c√πng l√∫c"
        )
        
        if batch_files:
            st.write(f"üìÅ ƒê√£ ch·ªçn {len(batch_files)} file(s)")
            
            # Ph√¢n lo·∫°i files
            pdf_files = [f for f in batch_files if f.type == 'application/pdf']
            image_files = [f for f in batch_files if f.type.startswith('image/')]
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("üìÑ PDF files", len(pdf_files))
            with col2:
                st.metric("üñºÔ∏è Image files", len(image_files))
            
            # Hi·ªÉn th·ªã danh s√°ch files
            with st.expander("üìÇ Danh s√°ch files"):
                for i, file in enumerate(batch_files):
                    file_type = "üìÑ" if file.type == 'application/pdf' else "üñºÔ∏è"
                    st.write(f"{file_type} {file.name} ({format_file_size(file.size)})")
            
            # Batch processing options
            st.subheader("‚öôÔ∏è T√πy ch·ªçn x·ª≠ l√Ω")
            
            col1, col2 = st.columns(2)
            with col1:
                merge_output = st.checkbox("G·ªôp t·∫•t c·∫£ th√†nh 1 file Word", value=True)
                include_source_name = st.checkbox("Ghi r√µ t√™n file g·ªëc", value=True)
            
            with col2:
                skip_errors = st.checkbox("B·ªè qua files l·ªói", value=True)
                max_concurrent = st.slider("S·ªë file x·ª≠ l√Ω ƒë·ªìng th·ªùi", 1, 5, 2)
            
            if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t", key="batch_process"):
                batch_results = []
                
                # Create main progress bar
                main_progress = st.progress(0)
                main_status = st.empty()
                
                for i, file in enumerate(batch_files):
                    main_status.text(f"ƒêang x·ª≠ l√Ω {i+1}/{len(batch_files)}: {file.name}")
                    
                    try:
                        if file.type == 'application/pdf':
                            # Process PDF
                            pdf_images = PDFProcessor.extract_images_and_text(file)
                            
                            file_latex_content = []
                            for img, page_num in pdf_images:
                                img_buffer = io.BytesIO()
                                img.save(img_buffer, format='PNG')
                                img_bytes = img_buffer.getvalue()
                                
                                prompt = """Chuy·ªÉn ƒë·ªïi n·ªôi dung th√†nh LaTeX format ch√≠nh x√°c.
                                S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations."""
                                
                                latex_result = gemini_api.convert_to_latex(
                                    img_bytes, "image/png", prompt
                                )
                                if latex_result:
                                    file_latex_content.append(latex_result)
                            
                            combined_content = "\n".join(file_latex_content)
                            
                        else:
                            # Process Image
                            image_bytes = file.getvalue()
                            prompt = """Chuy·ªÉn ƒë·ªïi n·ªôi dung th√†nh LaTeX format ch√≠nh x√°c.
                            S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations."""
                            
                            combined_content = gemini_api.convert_to_latex(
                                image_bytes, file.type, prompt
                            )
                        
                        if combined_content:
                            if include_source_name:
                                combined_content = f"<!-- Source: {file.name} -->\n{combined_content}"
                            
                            batch_results.append({
                                'filename': file.name,
                                'content': combined_content,
                                'success': True
                            })
                        else:
                            raise Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ API")
                    
                    except Exception as e:
                        error_msg = f"L·ªói x·ª≠ l√Ω {file.name}: {str(e)}"
                        if skip_errors:
                            st.warning(f"‚ö†Ô∏è {error_msg}")
                            batch_results.append({
                                'filename': file.name,
                                'content': f"<!-- ERROR: {error_msg} -->",
                                'success': False
                            })
                        else:
                            st.error(f"‚ùå {error_msg}")
                            break
                    
                    main_progress.progress((i + 1) / len(batch_files))
                
                # Process results
                successful_files = [r for r in batch_results if r['success']]
                failed_files = [r for r in batch_results if not r['success']]
                
                main_status.text(f"‚úÖ Ho√†n th√†nh: {len(successful_files)} th√†nh c√¥ng, {len(failed_files)} l·ªói")
                
                if successful_files:
                    if merge_output:
                        # Merge all content
                        all_content = "\n\n".join([r['content'] for r in successful_files])
                        
                        # Show stats
                        stats = count_math_content(all_content)
                        show_processing_stats(stats)
                        
                        # Create Word file
                        st.subheader("üì• T·∫£i k·∫øt qu·∫£")
                        
                        if st.button("üì• T·∫°o file Word g·ªôp", key="create_batch_word"):
                            with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                                try:
                                    word_buffer = WordExporter.create_word_document(all_content)
                                    
                                    st.download_button(
                                        label="üì• T·∫£i file Word g·ªôp",
                                        data=word_buffer.getvalue(),
                                        file_name="batch_converted.docx",
                                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                    )
                                    
                                    st.download_button(
                                        label="üìù T·∫£i LaTeX source",
                                        data=all_content,
                                        file_name="batch_converted.tex",
                                        mime="text/plain"
                                    )
                                    
                                    st.success("‚úÖ File ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                except Exception as e:
                                    st.error(f"‚ùå L·ªói t·∫°o file: {str(e)}")
                    
                    else:
                        # Individual downloads
                        st.subheader("üì• T·∫£i t·ª´ng file")
                        for result in successful_files:
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                st.write(f"‚úÖ {result['filename']}")
                            with col2:
                                st.download_button(
                                    label="üì• T·∫£i",
                                    data=result['content'],
                                    file_name=f"{result['filename']}.tex",
                                    mime="text/plain",
                                    key=f"download_{result['filename']}"
                                )
                
                # Add batch to history
                ConversionHistory.add_to_history(
                    "Batch", 
                    f"{len(batch_files)} files", 
                    len(successful_files) > 0,
                    sum(len(r['content']) for r in successful_files)
                )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi PDF v√† ·∫£nh sang LaTeX v·ªõi ƒë·ªô ch√≠nh x√°c cao</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main(), remaining_text)
                for match in reversed(list(display_matches)):
                    before_text = remaining_text[:match.start()]
                    after_text = remaining_text[match.end():]
                    latex_expr = match.group(1)
                    
                    if before_text.strip():
                        current_paragraph.add_run(before_text)
                    
                    # Add equation placeholder
                    eq_run = current_paragraph.add_run(f"\n[EQUATION: {latex_expr}]\n")
                    eq_run.font.bold = True
                    eq_run.font.italic = True
                    
                    remaining_text = after_text
                
                # Replace inline math ($...$)
                inline_matches = re.finditer(r'\$([^$]+)\

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key v√† settings
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        # Validation API key real-time
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
                st.info("API key ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i, s·ªë, d·∫•u g·∫°ch ngang v√† underscore")
        
        st.markdown("---")
        
        # Settings
        st.subheader("üéõÔ∏è T√πy ch·ªçn")
        
        max_file_size = st.selectbox(
            "Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file",
            ["10MB", "20MB", "50MB"],
            index=1
        )
        
        output_format = st.selectbox(
            "ƒê·ªãnh d·∫°ng output",
            ["LaTeX ($...$)", "MathJax", "AsciiMath"],
            index=0
        )
        
        include_images = st.checkbox("Bao g·ªìm h√¨nh ·∫£nh trong Word", value=True)
        
        st.markdown("---")
        
        # Conversion History
        st.subheader("üìä L·ªãch s·ª≠")
        ConversionHistory.show_history()
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
            ConversionHistory.clear_history()
            st.rerun()
        
        st.markdown("---")
        
        # Tips v√† h∆∞·ªõng d·∫´n
        show_tips_and_tricks()
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i [Google AI Studio](https://makersuite.google.com/app/apikey)")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2, tab3 = st.tabs(["üìÑ PDF to LaTeX", "üñºÔ∏è Image to LaTeX", "üìã Batch Processing"])
    
    # Kh·ªüi t·∫°o API v·ªõi error handling
    try:
        gemini_api = GeminiAPI(api_key)
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o API: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_pdf:
            # Validate PDF file
            is_valid, error_msg = validate_pdf_file(uploaded_pdf)
            if not is_valid:
                st.error(f"‚ùå {error_msg}")
                return
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                
                # Hi·ªÉn th·ªã th√¥ng tin file
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                # Extract images t·ª´ PDF
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview c√°c trang
                        for img, page_num in pdf_images[:3]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 3 trang ƒë·∫ßu
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 3:
                            st.info(f"... v√† {len(pdf_images) - 3} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        ConversionHistory.add_to_history("PDF", uploaded_pdf.name, False)
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        conversion_successful = True
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T·∫°o prompt cho Gemini
                            prompt = f"""
                            H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh trang {page_num} th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.
                            
                            Y√äU C·∫¶U QUAN TR·ªåNG:
                            1. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c inline (trong d√≤ng)
                            2. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c display (ri√™ng d√≤ng)
                            3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
                            4. Bao g·ªìm T·∫§T C·∫¢ text th∆∞·ªùng v√† c√¥ng th·ª©c to√°n h·ªçc
                            5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n (\\frac, \\sqrt, \\sum, \\int, ...)
                            6. X·ª≠ l√Ω ƒë√∫ng c√°c ch·ªâ s·ªë tr√™n/d∆∞·ªõi, ma tr·∫≠n, h·ªá ph∆∞∆°ng tr√¨nh
                            7. N·∫øu c√≥ b·∫£ng, s·ª≠ d·ª•ng tabular environment
                            8. M√¥ t·∫£ ng·∫Øn g·ªçn c√°c h√¨nh v·∫Ω/bi·ªÉu ƒë·ªì n·∫øu c√≥
                            
                            ƒê·ªäNH D·∫†NG OUTPUT MONG MU·ªêN:
                            - Text th∆∞·ªùng: vi·∫øt b√¨nh th∆∞·ªùng
                            - C√¥ng th·ª©c inline: ${{x^2 + y^2 = z^2}}$
                            - C√¥ng th·ª©c display: ${{\\int_0^1 x dx = \\frac{{1}}{{2}}}}$
                            - Ma tr·∫≠n: ${{A = \\begin{{pmatrix}} a & b \\\\ c & d \\end{{pmatrix}}}}$
                            
                            H√£y ƒë·∫£m b·∫£o LaTeX output c√≥ th·ªÉ compile ƒë∆∞·ª£c v√† ch√≠nh x√°c 100%.
                            """
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                                    conversion_successful = False
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                                conversion_successful = False
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        if conversion_successful:
                            status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                            
                            # Combine v√† hi·ªÉn th·ªã k·∫øt qu·∫£
                            combined_latex = "\n".join(all_latex_content)
                            
                            # Th·ªëng k√™ k·∫øt qu·∫£
                            stats = count_math_content(combined_latex)
                            show_processing_stats(stats)
                            
                            # Hi·ªÉn th·ªã preview
                            st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                            preview_content = create_latex_preview(combined_latex, 2000)
                            st.text_area("üìù K·∫øt qu·∫£ LaTeX (Preview):", preview_content, height=300)
                            st.markdown('</div>', unsafe_allow_html=True)
                            
                            # L∆∞u v√†o session state ƒë·ªÉ t√°i s·ª≠ d·ª•ng
                            st.session_state.pdf_latex_content = combined_latex
                            st.session_state.pdf_images = [img for img, _ in pdf_images]
                            
                            # Add to history
                            ConversionHistory.add_to_history(
                                "PDF", uploaded_pdf.name, True, len(combined_latex)
                            )
                            
                        else:
                            status_text.text("‚ùå M·ªôt s·ªë trang kh√¥ng th·ªÉ x·ª≠ l√Ω")
                            ConversionHistory.add_to_history("PDF", uploaded_pdf.name, False)
                
                # T·∫°o file Word n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                images_to_include = st.session_state.pdf_images if include_images else None
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    images_to_include
                                )
                                
                                filename = generate_filename(uploaded_pdf.name, "latex_converted")
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                
                                # Download LaTeX source
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Tab x·ª≠ l√Ω ·∫£nh
    with tab2:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_images:
            # Validate all images
            all_valid = True
            for uploaded_image in uploaded_images:
                is_valid, error_msg = validate_image_file(uploaded_image)
                if not is_valid:
                    st.error(f"‚ùå {uploaded_image.name}: {error_msg}")
                    all_valid = False
            
            if not all_valid:
                return
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                # Hi·ªÉn th·ªã preview
                for i, uploaded_image in enumerate(uploaded_images[:5]):  # T·ªëi ƒëa 5 ·∫£nh
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                    st.caption(f"üìè {image.size[0]}x{image.size[1]} pixels")
                
                if len(uploaded_images) > 5:
                    st.info(f"... v√† {len(uploaded_images) - 5} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                # T√πy ch·ªçn x·ª≠ l√Ω
                processing_mode = st.radio(
                    "Ch·∫ø ƒë·ªô x·ª≠ l√Ω:",
                    ["T·ª± ƒë·ªông", "T√πy ch·ªânh prompt"],
                    help="T·ª± ƒë·ªông: s·ª≠ d·ª•ng prompt m·∫∑c ƒë·ªãnh. T√πy ch·ªânh: b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a prompt"
                )
                
                custom_prompt = ""
                if processing_mode == "T√πy ch·ªânh prompt":
                    custom_prompt = st.text_area(
                        "Prompt t√πy ch·ªânh:",
                        value="""Chuy·ªÉn ƒë·ªïi n·ªôi dung to√°n h·ªçc th√†nh LaTeX format ch√≠nh x√°c.
S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations.
Gi·ªØ nguy√™n c·∫•u tr√∫c v√† th·ª© t·ª± n·ªôi dung.""",
                        height=100
                    )
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    conversion_successful = True
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        # ƒê·ªçc ·∫£nh
                        image_bytes = uploaded_image.getvalue()
                        
                        # T·∫°o prompt
                        if processing_mode == "T√πy ch·ªânh prompt" and custom_prompt:
                            prompt = custom_prompt
                        else:
                            prompt = f"""
                            Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.
                            
                            Y√äU C·∫¶U QUAN TR·ªåNG:
                            1. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c inline (trong d√≤ng)
                            2. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c display (ri√™ng d√≤ng)  
                            3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
                            4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
                            5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
                            6. X·ª≠ l√Ω ƒë√∫ng ma tr·∫≠n, h·ªá ph∆∞∆°ng tr√¨nh, t√≠ch ph√¢n, ƒë·∫°o h√†m
                            7. N·∫øu c√≥ bi·ªÉu ƒë·ªì/h√¨nh v·∫Ω, m√¥ t·∫£ ng·∫Øn g·ªçn
                            8. ƒê·∫£m b·∫£o LaTeX c√≥ th·ªÉ compile ƒë∆∞·ª£c
                            
                            ƒê·ªäNH D·∫†NG OUTPUT:
                            - Text: vi·∫øt b√¨nh th∆∞·ªùng
                            - Inline: ${{x^2 + 1}}$
                            - Display: ${{\\int_0^\\infty e^{{-x}} dx = 1}}$
                            - Ma tr·∫≠n: ${{\\begin{{pmatrix}} a & b \\\\ c & d \\end{{pmatrix}}}}$
                            """
                        
                        # G·ªçi API
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                                conversion_successful = False
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                            conversion_successful = False
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    if conversion_successful:
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Combine v√† hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        # Th·ªëng k√™
                        stats = count_math_content(combined_latex)
                        show_processing_stats(stats)
                        
                        # Preview
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        preview_content = create_latex_preview(combined_latex, 2000)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX (Preview):", preview_content, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # L∆∞u v√†o session
                        st.session_state.image_latex_content = combined_latex
                        st.session_state.image_list = [Image.open(img) for img in uploaded_images]
                        
                        # Add to history
                        ConversionHistory.add_to_history(
                            "Images", f"{len(uploaded_images)} files", True, len(combined_latex)
                        )
                    else:
                        status_text.text("‚ùå M·ªôt s·ªë ·∫£nh kh√¥ng th·ªÉ x·ª≠ l√Ω")
                        ConversionHistory.add_to_history("Images", f"{len(uploaded_images)} files", False)
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                images_to_include = st.session_state.image_list if include_images else None
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    images_to_include
                                )
                                
                                filename = "images_latex_converted.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                
                                # Download LaTeX
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Tab Batch Processing
    with tab3:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üìã X·ª≠ l√Ω h√†ng lo·∫°t")
        
        st.info("üöÄ T√≠nh nƒÉng n√†y cho ph√©p x·ª≠ l√Ω nhi·ªÅu file PDF v√† ·∫£nh c√πng l√∫c")
        
        # Upload multiple files
        batch_files = st.file_uploader(
            "Ch·ªçn nhi·ªÅu file (PDF v√† ·∫£nh)",
            type=['pdf', 'png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload nhi·ªÅu file PDF v√† ·∫£nh ƒë·ªÉ x·ª≠ l√Ω c√πng l√∫c"
        )
        
        if batch_files:
            st.write(f"üìÅ ƒê√£ ch·ªçn {len(batch_files)} file(s)")
            
            # Ph√¢n lo·∫°i files
            pdf_files = [f for f in batch_files if f.type == 'application/pdf']
            image_files = [f for f in batch_files if f.type.startswith('image/')]
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("üìÑ PDF files", len(pdf_files))
            with col2:
                st.metric("üñºÔ∏è Image files", len(image_files))
            
            # Hi·ªÉn th·ªã danh s√°ch files
            with st.expander("üìÇ Danh s√°ch files"):
                for i, file in enumerate(batch_files):
                    file_type = "üìÑ" if file.type == 'application/pdf' else "üñºÔ∏è"
                    st.write(f"{file_type} {file.name} ({format_file_size(file.size)})")
            
            # Batch processing options
            st.subheader("‚öôÔ∏è T√πy ch·ªçn x·ª≠ l√Ω")
            
            col1, col2 = st.columns(2)
            with col1:
                merge_output = st.checkbox("G·ªôp t·∫•t c·∫£ th√†nh 1 file Word", value=True)
                include_source_name = st.checkbox("Ghi r√µ t√™n file g·ªëc", value=True)
            
            with col2:
                skip_errors = st.checkbox("B·ªè qua files l·ªói", value=True)
                max_concurrent = st.slider("S·ªë file x·ª≠ l√Ω ƒë·ªìng th·ªùi", 1, 5, 2)
            
            if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t", key="batch_process"):
                batch_results = []
                
                # Create main progress bar
                main_progress = st.progress(0)
                main_status = st.empty()
                
                for i, file in enumerate(batch_files):
                    main_status.text(f"ƒêang x·ª≠ l√Ω {i+1}/{len(batch_files)}: {file.name}")
                    
                    try:
                        if file.type == 'application/pdf':
                            # Process PDF
                            pdf_images = PDFProcessor.extract_images_and_text(file)
                            
                            file_latex_content = []
                            for img, page_num in pdf_images:
                                img_buffer = io.BytesIO()
                                img.save(img_buffer, format='PNG')
                                img_bytes = img_buffer.getvalue()
                                
                                prompt = """Chuy·ªÉn ƒë·ªïi n·ªôi dung th√†nh LaTeX format ch√≠nh x√°c.
                                S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations."""
                                
                                latex_result = gemini_api.convert_to_latex(
                                    img_bytes, "image/png", prompt
                                )
                                if latex_result:
                                    file_latex_content.append(latex_result)
                            
                            combined_content = "\n".join(file_latex_content)
                            
                        else:
                            # Process Image
                            image_bytes = file.getvalue()
                            prompt = """Chuy·ªÉn ƒë·ªïi n·ªôi dung th√†nh LaTeX format ch√≠nh x√°c.
                            S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations."""
                            
                            combined_content = gemini_api.convert_to_latex(
                                image_bytes, file.type, prompt
                            )
                        
                        if combined_content:
                            if include_source_name:
                                combined_content = f"<!-- Source: {file.name} -->\n{combined_content}"
                            
                            batch_results.append({
                                'filename': file.name,
                                'content': combined_content,
                                'success': True
                            })
                        else:
                            raise Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ API")
                    
                    except Exception as e:
                        error_msg = f"L·ªói x·ª≠ l√Ω {file.name}: {str(e)}"
                        if skip_errors:
                            st.warning(f"‚ö†Ô∏è {error_msg}")
                            batch_results.append({
                                'filename': file.name,
                                'content': f"<!-- ERROR: {error_msg} -->",
                                'success': False
                            })
                        else:
                            st.error(f"‚ùå {error_msg}")
                            break
                    
                    main_progress.progress((i + 1) / len(batch_files))
                
                # Process results
                successful_files = [r for r in batch_results if r['success']]
                failed_files = [r for r in batch_results if not r['success']]
                
                main_status.text(f"‚úÖ Ho√†n th√†nh: {len(successful_files)} th√†nh c√¥ng, {len(failed_files)} l·ªói")
                
                if successful_files:
                    if merge_output:
                        # Merge all content
                        all_content = "\n\n".join([r['content'] for r in successful_files])
                        
                        # Show stats
                        stats = count_math_content(all_content)
                        show_processing_stats(stats)
                        
                        # Create Word file
                        st.subheader("üì• T·∫£i k·∫øt qu·∫£")
                        
                        if st.button("üì• T·∫°o file Word g·ªôp", key="create_batch_word"):
                            with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                                try:
                                    word_buffer = WordExporter.create_word_document(all_content)
                                    
                                    st.download_button(
                                        label="üì• T·∫£i file Word g·ªôp",
                                        data=word_buffer.getvalue(),
                                        file_name="batch_converted.docx",
                                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                    )
                                    
                                    st.download_button(
                                        label="üìù T·∫£i LaTeX source",
                                        data=all_content,
                                        file_name="batch_converted.tex",
                                        mime="text/plain"
                                    )
                                    
                                    st.success("‚úÖ File ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                except Exception as e:
                                    st.error(f"‚ùå L·ªói t·∫°o file: {str(e)}")
                    
                    else:
                        # Individual downloads
                        st.subheader("üì• T·∫£i t·ª´ng file")
                        for result in successful_files:
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                st.write(f"‚úÖ {result['filename']}")
                            with col2:
                                st.download_button(
                                    label="üì• T·∫£i",
                                    data=result['content'],
                                    file_name=f"{result['filename']}.tex",
                                    mime="text/plain",
                                    key=f"download_{result['filename']}"
                                )
                
                # Add batch to history
                ConversionHistory.add_to_history(
                    "Batch", 
                    f"{len(batch_files)} files", 
                    len(successful_files) > 0,
                    sum(len(r['content']) for r in successful_files)
                )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi PDF v√† ·∫£nh sang LaTeX v·ªõi ƒë·ªô ch√≠nh x√°c cao</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main(), remaining_text)
                for match in reversed(list(inline_matches)):
                    before_text = remaining_text[:match.start()]
                    after_text = remaining_text[match.end():]
                    latex_expr = match.group(1)
                    
                    if before_text.strip():
                        current_paragraph.add_run(before_text)
                    
                    # Add inline equation
                    eq_run = current_paragraph.add_run(f"[{latex_expr}]")
                    eq_run.font.italic = True
                    
                    remaining_text = after_text
                
                # Add any remaining text
                if remaining_text.strip():
                    current_paragraph.add_run(remaining_text)
                    
            else:
                # N·∫øu kh√¥ng c√≥ c√¥ng th·ª©c LaTeX, th√™m paragraph th∆∞·ªùng
                doc.add_paragraph(line)
                current_paragraph = None
        
        # Th√™m ·∫£nh n·∫øu c√≥
        if images:
            doc.add_page_break()
            doc.add_heading('H√¨nh ·∫£nh minh h·ªça', level=1)
            
            for i, img in enumerate(images):
                try:
                    doc.add_heading(f'H√¨nh {i+1}', level=2)
                    
                    # Resize image if too large
                    max_width = 6.0  # inches
                    img_width = max_width
                    
                    # L∆∞u ·∫£nh t·∫°m th·ªùi
                    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
                        # Convert to RGB if necessary
                        if img.mode in ('RGBA', 'LA', 'P'):
                            img = img.convert('RGB')
                        
                        img.save(tmp.name, 'PNG')
                        
                        try:
                            doc.add_picture(tmp.name, width=doc.sections[0].page_width * 0.8)
                        except Exception as e:
                            # If image can't be added, add a placeholder
                            doc.add_paragraph(f"[H√¨nh ·∫£nh {i+1} - Kh√¥ng th·ªÉ hi·ªÉn th·ªã: {str(e)}]")
                        
                        os.unlink(tmp.name)
                        
                except Exception as e:
                    doc.add_paragraph(f"[L·ªói hi·ªÉn th·ªã h√¨nh {i+1}: {str(e)}]")
        
        # Th√™m footer th√¥ng tin
        doc.add_page_break()
        doc.add_heading('Th√¥ng tin chuy·ªÉn ƒë·ªïi', level=2)
        
        info_text = f"""
        T√†i li·ªáu n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ PDF/Image to LaTeX Converter.
        
        L∆∞u √Ω:
        - C√°c c√¥ng th·ª©c to√°n h·ªçc ƒë∆∞·ª£c hi·ªÉn th·ªã d·∫°ng [equation] do gi·ªõi h·∫°n c·ªßa python-docx
        - ƒê·ªÉ c√≥ equations th·∫≠t, b·∫°n c√≥ th·ªÉ copy LaTeX code v√† paste v√†o Word v·ªõi MathType
        - Ho·∫∑c s·ª≠ d·ª•ng c√°c editor h·ªó tr·ª£ LaTeX nh∆∞ Overleaf, TeXShop
        
        LaTeX format ƒë∆∞·ª£c s·ª≠ d·ª•ng:
        - Inline equations: ${{formula}}$
        - Display equations: ${{formula}}$
        """
        
        doc.add_paragraph(info_text)
        
        # L∆∞u document v√†o buffer
        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        return buffer

def main():
    st.markdown('<h1 class="main-header">üìù PDF/Image to LaTeX Converter</h1>', unsafe_allow_html=True)
    
    # Sidebar cho API key v√† settings
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="Nh·∫≠p API key t·ª´ Google AI Studio",
            placeholder="Paste your API key here..."
        )
        
        # Validation API key real-time
        if api_key:
            if validate_api_key(api_key):
                st.success("‚úÖ API key h·ª£p l·ªá")
            else:
                st.error("‚ùå API key kh√¥ng h·ª£p l·ªá")
                st.info("API key ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª± v√† ch·ªâ ch·ª©a ch·ªØ c√°i, s·ªë, d·∫•u g·∫°ch ngang v√† underscore")
        
        st.markdown("---")
        
        # Settings
        st.subheader("üéõÔ∏è T√πy ch·ªçn")
        
        max_file_size = st.selectbox(
            "Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file",
            ["10MB", "20MB", "50MB"],
            index=1
        )
        
        output_format = st.selectbox(
            "ƒê·ªãnh d·∫°ng output",
            ["LaTeX ($...$)", "MathJax", "AsciiMath"],
            index=0
        )
        
        include_images = st.checkbox("Bao g·ªìm h√¨nh ·∫£nh trong Word", value=True)
        
        st.markdown("---")
        
        # Conversion History
        st.subheader("üìä L·ªãch s·ª≠")
        ConversionHistory.show_history()
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
            ConversionHistory.clear_history()
            st.rerun()
        
        st.markdown("---")
        
        # Tips v√† h∆∞·ªõng d·∫´n
        show_tips_and_tricks()
    
    if not api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Gemini API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        st.info("üí° B·∫°n c√≥ th·ªÉ l·∫•y API key mi·ªÖn ph√≠ t·∫°i [Google AI Studio](https://makersuite.google.com/app/apikey)")
        return
    
    if not validate_api_key(api_key):
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!")
        return
    
    # T·∫°o tabs
    tab1, tab2, tab3 = st.tabs(["üìÑ PDF to LaTeX", "üñºÔ∏è Image to LaTeX", "üìã Batch Processing"])
    
    # Kh·ªüi t·∫°o API v·ªõi error handling
    try:
        gemini_api = GeminiAPI(api_key)
    except Exception as e:
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o API: {str(e)}")
        return
    
    # Tab x·ª≠ l√Ω PDF
    with tab1:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üìÑ Chuy·ªÉn ƒë·ªïi PDF sang LaTeX")
        
        uploaded_pdf = st.file_uploader(
            "Ch·ªçn file PDF",
            type=['pdf'],
            help="Upload file PDF ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_pdf:
            # Validate PDF file
            is_valid, error_msg = validate_pdf_file(uploaded_pdf)
            if not is_valid:
                st.error(f"‚ùå {error_msg}")
                return
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üìã Preview PDF")
                
                # Hi·ªÉn th·ªã th√¥ng tin file
                st.info(f"üìÅ File: {uploaded_pdf.name}")
                st.info(f"üìè K√≠ch th∆∞·ªõc: {format_file_size(uploaded_pdf.size)}")
                
                # Extract images t·ª´ PDF
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω PDF..."):
                    try:
                        pdf_images = PDFProcessor.extract_images_and_text(uploaded_pdf)
                        st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(pdf_images)} trang")
                        
                        # Hi·ªÉn th·ªã preview c√°c trang
                        for img, page_num in pdf_images[:3]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 3 trang ƒë·∫ßu
                            st.write(f"**Trang {page_num}:**")
                            st.image(img, use_column_width=True)
                        
                        if len(pdf_images) > 3:
                            st.info(f"... v√† {len(pdf_images) - 3} trang kh√°c")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω PDF: {str(e)}")
                        ConversionHistory.add_to_history("PDF", uploaded_pdf.name, False)
                        pdf_images = []
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi PDF", key="convert_pdf"):
                    if pdf_images:
                        all_latex_content = []
                        conversion_successful = True
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, (img, page_num) in enumerate(pdf_images):
                            status_text.text(f"ƒêang x·ª≠ l√Ω trang {page_num}/{len(pdf_images)}...")
                            
                            # Chuy·ªÉn ·∫£nh th√†nh bytes
                            img_buffer = io.BytesIO()
                            img.save(img_buffer, format='PNG')
                            img_bytes = img_buffer.getvalue()
                            
                            # T·∫°o prompt cho Gemini
                            prompt = f"""
                            H√£y chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh trang {page_num} th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.
                            
                            Y√äU C·∫¶U QUAN TR·ªåNG:
                            1. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c inline (trong d√≤ng)
                            2. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c display (ri√™ng d√≤ng)
                            3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
                            4. Bao g·ªìm T·∫§T C·∫¢ text th∆∞·ªùng v√† c√¥ng th·ª©c to√°n h·ªçc
                            5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n (\\frac, \\sqrt, \\sum, \\int, ...)
                            6. X·ª≠ l√Ω ƒë√∫ng c√°c ch·ªâ s·ªë tr√™n/d∆∞·ªõi, ma tr·∫≠n, h·ªá ph∆∞∆°ng tr√¨nh
                            7. N·∫øu c√≥ b·∫£ng, s·ª≠ d·ª•ng tabular environment
                            8. M√¥ t·∫£ ng·∫Øn g·ªçn c√°c h√¨nh v·∫Ω/bi·ªÉu ƒë·ªì n·∫øu c√≥
                            
                            ƒê·ªäNH D·∫†NG OUTPUT MONG MU·ªêN:
                            - Text th∆∞·ªùng: vi·∫øt b√¨nh th∆∞·ªùng
                            - C√¥ng th·ª©c inline: ${{x^2 + y^2 = z^2}}$
                            - C√¥ng th·ª©c display: ${{\\int_0^1 x dx = \\frac{{1}}{{2}}}}$
                            - Ma tr·∫≠n: ${{A = \\begin{{pmatrix}} a & b \\\\ c & d \\end{{pmatrix}}}}$
                            
                            H√£y ƒë·∫£m b·∫£o LaTeX output c√≥ th·ªÉ compile ƒë∆∞·ª£c v√† ch√≠nh x√°c 100%.
                            """
                            
                            # G·ªçi API
                            try:
                                latex_result = gemini_api.convert_to_latex(img_bytes, "image/png", prompt)
                                if latex_result:
                                    all_latex_content.append(f"<!-- Trang {page_num} -->\n{latex_result}\n")
                                else:
                                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num}")
                                    conversion_successful = False
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x·ª≠ l√Ω trang {page_num}: {str(e)}")
                                conversion_successful = False
                            
                            progress_bar.progress((i + 1) / len(pdf_images))
                        
                        if conversion_successful:
                            status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                            
                            # Combine v√† hi·ªÉn th·ªã k·∫øt qu·∫£
                            combined_latex = "\n".join(all_latex_content)
                            
                            # Th·ªëng k√™ k·∫øt qu·∫£
                            stats = count_math_content(combined_latex)
                            show_processing_stats(stats)
                            
                            # Hi·ªÉn th·ªã preview
                            st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                            preview_content = create_latex_preview(combined_latex, 2000)
                            st.text_area("üìù K·∫øt qu·∫£ LaTeX (Preview):", preview_content, height=300)
                            st.markdown('</div>', unsafe_allow_html=True)
                            
                            # L∆∞u v√†o session state ƒë·ªÉ t√°i s·ª≠ d·ª•ng
                            st.session_state.pdf_latex_content = combined_latex
                            st.session_state.pdf_images = [img for img, _ in pdf_images]
                            
                            # Add to history
                            ConversionHistory.add_to_history(
                                "PDF", uploaded_pdf.name, True, len(combined_latex)
                            )
                            
                        else:
                            status_text.text("‚ùå M·ªôt s·ªë trang kh√¥ng th·ªÉ x·ª≠ l√Ω")
                            ConversionHistory.add_to_history("PDF", uploaded_pdf.name, False)
                
                # T·∫°o file Word n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£
                if 'pdf_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_pdf"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                images_to_include = st.session_state.pdf_images if include_images else None
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.pdf_latex_content, 
                                    images_to_include
                                )
                                
                                filename = generate_filename(uploaded_pdf.name, "latex_converted")
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                
                                # Download LaTeX source
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.pdf_latex_content,
                                    file_name=uploaded_pdf.name.replace('.pdf', '.tex'),
                                    mime="text/plain"
                                )
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Tab x·ª≠ l√Ω ·∫£nh
    with tab2:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üñºÔ∏è Chuy·ªÉn ƒë·ªïi ·∫¢nh sang LaTeX")
        
        uploaded_images = st.file_uploader(
            "Ch·ªçn ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
            type=['png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload ·∫£nh ch·ª©a c√¥ng th·ª©c to√°n h·ªçc"
        )
        
        if uploaded_images:
            # Validate all images
            all_valid = True
            for uploaded_image in uploaded_images:
                is_valid, error_msg = validate_image_file(uploaded_image)
                if not is_valid:
                    st.error(f"‚ùå {uploaded_image.name}: {error_msg}")
                    all_valid = False
            
            if not all_valid:
                return
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üñºÔ∏è Preview ·∫¢nh")
                
                total_size = sum(img.size for img in uploaded_images)
                st.info(f"üìÅ S·ªë ·∫£nh: {len(uploaded_images)}")
                st.info(f"üìè T·ªïng k√≠ch th∆∞·ªõc: {format_file_size(total_size)}")
                
                # Hi·ªÉn th·ªã preview
                for i, uploaded_image in enumerate(uploaded_images[:5]):  # T·ªëi ƒëa 5 ·∫£nh
                    st.write(f"**·∫¢nh {i+1}: {uploaded_image.name}**")
                    image = Image.open(uploaded_image)
                    st.image(image, use_column_width=True)
                    st.caption(f"üìè {image.size[0]}x{image.size[1]} pixels")
                
                if len(uploaded_images) > 5:
                    st.info(f"... v√† {len(uploaded_images) - 5} ·∫£nh kh√°c")
            
            with col2:
                st.subheader("‚ö° Chuy·ªÉn ƒë·ªïi sang LaTeX")
                
                # T√πy ch·ªçn x·ª≠ l√Ω
                processing_mode = st.radio(
                    "Ch·∫ø ƒë·ªô x·ª≠ l√Ω:",
                    ["T·ª± ƒë·ªông", "T√πy ch·ªânh prompt"],
                    help="T·ª± ƒë·ªông: s·ª≠ d·ª•ng prompt m·∫∑c ƒë·ªãnh. T√πy ch·ªânh: b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a prompt"
                )
                
                custom_prompt = ""
                if processing_mode == "T√πy ch·ªânh prompt":
                    custom_prompt = st.text_area(
                        "Prompt t√πy ch·ªânh:",
                        value="""Chuy·ªÉn ƒë·ªïi n·ªôi dung to√°n h·ªçc th√†nh LaTeX format ch√≠nh x√°c.
S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations.
Gi·ªØ nguy√™n c·∫•u tr√∫c v√† th·ª© t·ª± n·ªôi dung.""",
                        height=100
                    )
                
                if st.button("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi ·∫£nh", key="convert_images"):
                    all_latex_content = []
                    conversion_successful = True
                    
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i, uploaded_image in enumerate(uploaded_images):
                        status_text.text(f"ƒêang x·ª≠ l√Ω ·∫£nh {i+1}/{len(uploaded_images)}: {uploaded_image.name}")
                        
                        # ƒê·ªçc ·∫£nh
                        image_bytes = uploaded_image.getvalue()
                        
                        # T·∫°o prompt
                        if processing_mode == "T√πy ch·ªânh prompt" and custom_prompt:
                            prompt = custom_prompt
                        else:
                            prompt = f"""
                            Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ n·ªôi dung trong ·∫£nh th√†nh ƒë·ªãnh d·∫°ng LaTeX ch√≠nh x√°c.
                            
                            Y√äU C·∫¶U QUAN TR·ªåNG:
                            1. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c inline (trong d√≤ng)
                            2. S·ª≠ d·ª•ng ${{...}}$ cho c√¥ng th·ª©c display (ri√™ng d√≤ng)  
                            3. Gi·ªØ CH√çNH X√ÅC th·ª© t·ª± v√† c·∫•u tr√∫c n·ªôi dung
                            4. Bao g·ªìm T·∫§T C·∫¢ text v√† c√¥ng th·ª©c to√°n h·ªçc
                            5. S·ª≠ d·ª•ng k√Ω hi·ªáu LaTeX chu·∫©n
                            6. X·ª≠ l√Ω ƒë√∫ng ma tr·∫≠n, h·ªá ph∆∞∆°ng tr√¨nh, t√≠ch ph√¢n, ƒë·∫°o h√†m
                            7. N·∫øu c√≥ bi·ªÉu ƒë·ªì/h√¨nh v·∫Ω, m√¥ t·∫£ ng·∫Øn g·ªçn
                            8. ƒê·∫£m b·∫£o LaTeX c√≥ th·ªÉ compile ƒë∆∞·ª£c
                            
                            ƒê·ªäNH D·∫†NG OUTPUT:
                            - Text: vi·∫øt b√¨nh th∆∞·ªùng
                            - Inline: ${{x^2 + 1}}$
                            - Display: ${{\\int_0^\\infty e^{{-x}} dx = 1}}$
                            - Ma tr·∫≠n: ${{\\begin{{pmatrix}} a & b \\\\ c & d \\end{{pmatrix}}}}$
                            """
                        
                        # G·ªçi API
                        try:
                            latex_result = gemini_api.convert_to_latex(
                                image_bytes, uploaded_image.type, prompt
                            )
                            if latex_result:
                                all_latex_content.append(
                                    f"<!-- ·∫¢nh {i+1}: {uploaded_image.name} -->\n{latex_result}\n"
                                )
                            else:
                                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh {uploaded_image.name}")
                                conversion_successful = False
                        except Exception as e:
                            st.error(f"‚ùå L·ªói x·ª≠ l√Ω {uploaded_image.name}: {str(e)}")
                            conversion_successful = False
                        
                        progress_bar.progress((i + 1) / len(uploaded_images))
                    
                    if conversion_successful:
                        status_text.text("‚úÖ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
                        
                        # Combine v√† hi·ªÉn th·ªã k·∫øt qu·∫£
                        combined_latex = "\n".join(all_latex_content)
                        
                        # Th·ªëng k√™
                        stats = count_math_content(combined_latex)
                        show_processing_stats(stats)
                        
                        # Preview
                        st.markdown('<div class="latex-output">', unsafe_allow_html=True)
                        preview_content = create_latex_preview(combined_latex, 2000)
                        st.text_area("üìù K·∫øt qu·∫£ LaTeX (Preview):", preview_content, height=300)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # L∆∞u v√†o session
                        st.session_state.image_latex_content = combined_latex
                        st.session_state.image_list = [Image.open(img) for img in uploaded_images]
                        
                        # Add to history
                        ConversionHistory.add_to_history(
                            "Images", f"{len(uploaded_images)} files", True, len(combined_latex)
                        )
                    else:
                        status_text.text("‚ùå M·ªôt s·ªë ·∫£nh kh√¥ng th·ªÉ x·ª≠ l√Ω")
                        ConversionHistory.add_to_history("Images", f"{len(uploaded_images)} files", False)
                
                # T·∫°o file Word
                if 'image_latex_content' in st.session_state:
                    st.markdown("---")
                    if st.button("üì• T·∫°o file Word", key="create_word_images"):
                        with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                            try:
                                images_to_include = st.session_state.image_list if include_images else None
                                word_buffer = WordExporter.create_word_document(
                                    st.session_state.image_latex_content,
                                    images_to_include
                                )
                                
                                filename = "images_latex_converted.docx"
                                
                                st.download_button(
                                    label="üì• T·∫£i file Word",
                                    data=word_buffer.getvalue(),
                                    file_name=filename,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                                
                                st.success("‚úÖ File Word ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                
                                # Download LaTeX
                                st.download_button(
                                    label="üìù T·∫£i LaTeX source (.tex)",
                                    data=st.session_state.image_latex_content,
                                    file_name="images_converted.tex",
                                    mime="text/plain"
                                )
                            
                            except Exception as e:
                                st.error(f"‚ùå L·ªói t·∫°o file Word: {str(e)}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Tab Batch Processing
    with tab3:
        st.markdown('<div class="tab-content">', unsafe_allow_html=True)
        st.header("üìã X·ª≠ l√Ω h√†ng lo·∫°t")
        
        st.info("üöÄ T√≠nh nƒÉng n√†y cho ph√©p x·ª≠ l√Ω nhi·ªÅu file PDF v√† ·∫£nh c√πng l√∫c")
        
        # Upload multiple files
        batch_files = st.file_uploader(
            "Ch·ªçn nhi·ªÅu file (PDF v√† ·∫£nh)",
            type=['pdf', 'png', 'jpg', 'jpeg', 'bmp', 'tiff'],
            accept_multiple_files=True,
            help="Upload nhi·ªÅu file PDF v√† ·∫£nh ƒë·ªÉ x·ª≠ l√Ω c√πng l√∫c"
        )
        
        if batch_files:
            st.write(f"üìÅ ƒê√£ ch·ªçn {len(batch_files)} file(s)")
            
            # Ph√¢n lo·∫°i files
            pdf_files = [f for f in batch_files if f.type == 'application/pdf']
            image_files = [f for f in batch_files if f.type.startswith('image/')]
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("üìÑ PDF files", len(pdf_files))
            with col2:
                st.metric("üñºÔ∏è Image files", len(image_files))
            
            # Hi·ªÉn th·ªã danh s√°ch files
            with st.expander("üìÇ Danh s√°ch files"):
                for i, file in enumerate(batch_files):
                    file_type = "üìÑ" if file.type == 'application/pdf' else "üñºÔ∏è"
                    st.write(f"{file_type} {file.name} ({format_file_size(file.size)})")
            
            # Batch processing options
            st.subheader("‚öôÔ∏è T√πy ch·ªçn x·ª≠ l√Ω")
            
            col1, col2 = st.columns(2)
            with col1:
                merge_output = st.checkbox("G·ªôp t·∫•t c·∫£ th√†nh 1 file Word", value=True)
                include_source_name = st.checkbox("Ghi r√µ t√™n file g·ªëc", value=True)
            
            with col2:
                skip_errors = st.checkbox("B·ªè qua files l·ªói", value=True)
                max_concurrent = st.slider("S·ªë file x·ª≠ l√Ω ƒë·ªìng th·ªùi", 1, 5, 2)
            
            if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t", key="batch_process"):
                batch_results = []
                
                # Create main progress bar
                main_progress = st.progress(0)
                main_status = st.empty()
                
                for i, file in enumerate(batch_files):
                    main_status.text(f"ƒêang x·ª≠ l√Ω {i+1}/{len(batch_files)}: {file.name}")
                    
                    try:
                        if file.type == 'application/pdf':
                            # Process PDF
                            pdf_images = PDFProcessor.extract_images_and_text(file)
                            
                            file_latex_content = []
                            for img, page_num in pdf_images:
                                img_buffer = io.BytesIO()
                                img.save(img_buffer, format='PNG')
                                img_bytes = img_buffer.getvalue()
                                
                                prompt = """Chuy·ªÉn ƒë·ªïi n·ªôi dung th√†nh LaTeX format ch√≠nh x√°c.
                                S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations."""
                                
                                latex_result = gemini_api.convert_to_latex(
                                    img_bytes, "image/png", prompt
                                )
                                if latex_result:
                                    file_latex_content.append(latex_result)
                            
                            combined_content = "\n".join(file_latex_content)
                            
                        else:
                            # Process Image
                            image_bytes = file.getvalue()
                            prompt = """Chuy·ªÉn ƒë·ªïi n·ªôi dung th√†nh LaTeX format ch√≠nh x√°c.
                            S·ª≠ d·ª•ng ${...}$ cho inline v√† ${...}$ cho display equations."""
                            
                            combined_content = gemini_api.convert_to_latex(
                                image_bytes, file.type, prompt
                            )
                        
                        if combined_content:
                            if include_source_name:
                                combined_content = f"<!-- Source: {file.name} -->\n{combined_content}"
                            
                            batch_results.append({
                                'filename': file.name,
                                'content': combined_content,
                                'success': True
                            })
                        else:
                            raise Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ API")
                    
                    except Exception as e:
                        error_msg = f"L·ªói x·ª≠ l√Ω {file.name}: {str(e)}"
                        if skip_errors:
                            st.warning(f"‚ö†Ô∏è {error_msg}")
                            batch_results.append({
                                'filename': file.name,
                                'content': f"<!-- ERROR: {error_msg} -->",
                                'success': False
                            })
                        else:
                            st.error(f"‚ùå {error_msg}")
                            break
                    
                    main_progress.progress((i + 1) / len(batch_files))
                
                # Process results
                successful_files = [r for r in batch_results if r['success']]
                failed_files = [r for r in batch_results if not r['success']]
                
                main_status.text(f"‚úÖ Ho√†n th√†nh: {len(successful_files)} th√†nh c√¥ng, {len(failed_files)} l·ªói")
                
                if successful_files:
                    if merge_output:
                        # Merge all content
                        all_content = "\n\n".join([r['content'] for r in successful_files])
                        
                        # Show stats
                        stats = count_math_content(all_content)
                        show_processing_stats(stats)
                        
                        # Create Word file
                        st.subheader("üì• T·∫£i k·∫øt qu·∫£")
                        
                        if st.button("üì• T·∫°o file Word g·ªôp", key="create_batch_word"):
                            with st.spinner("üîÑ ƒêang t·∫°o file Word..."):
                                try:
                                    word_buffer = WordExporter.create_word_document(all_content)
                                    
                                    st.download_button(
                                        label="üì• T·∫£i file Word g·ªôp",
                                        data=word_buffer.getvalue(),
                                        file_name="batch_converted.docx",
                                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                    )
                                    
                                    st.download_button(
                                        label="üìù T·∫£i LaTeX source",
                                        data=all_content,
                                        file_name="batch_converted.tex",
                                        mime="text/plain"
                                    )
                                    
                                    st.success("‚úÖ File ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                                except Exception as e:
                                    st.error(f"‚ùå L·ªói t·∫°o file: {str(e)}")
                    
                    else:
                        # Individual downloads
                        st.subheader("üì• T·∫£i t·ª´ng file")
                        for result in successful_files:
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                st.write(f"‚úÖ {result['filename']}")
                            with col2:
                                st.download_button(
                                    label="üì• T·∫£i",
                                    data=result['content'],
                                    file_name=f"{result['filename']}.tex",
                                    mime="text/plain",
                                    key=f"download_{result['filename']}"
                                )
                
                # Add batch to history
                ConversionHistory.add_to_history(
                    "Batch", 
                    f"{len(batch_files)} files", 
                    len(successful_files) > 0,
                    sum(len(r['content']) for r in successful_files)
                )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit v√† Gemini 2.0 API</p>
        <p>H·ªó tr·ª£ chuy·ªÉn ƒë·ªïi PDF v√† ·∫£nh sang LaTeX v·ªõi ƒë·ªô ch√≠nh x√°c cao</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
